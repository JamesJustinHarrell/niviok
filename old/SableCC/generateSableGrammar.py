import re
import sys
import xml.dom.minidom as DOM

inputGrammarPath = "/media/files/Desal/other/Dextr grammar.txt"
outputGrammarPath = "/media/files/Desal/test.sablecc"

outputTemplate = """
//This file was created programmatically, so
//DO NOT EDIT THIS FILE DIRECTLY.

Package Dextr.SableCC;

Helpers
	%(helpers)s

Tokens
	%(tokens)s

Productions

%(productions)s

"""

def getElemText(doc, name) :
	return doc.getElementsByTagName(name)[0].firstChild.wholeText

#get lines that aren't just whitespace
def contentLines(text) :
	return filter(
		(lambda x : x.strip() != ""),
		text.splitlines() )

#creates a name for a number
#e.g. 111 -> aaa, 123 -> abc
def alphaFromNumber(number) :
	nums = map(int, list(str(number))) #e.g. 123 -> [1, 2, 3]
	nums = map( (lambda x : ord("a") + x), nums )
	return "".join(map(chr, nums))

doc = DOM.parse(inputGrammarPath)

#character-types
helpersText = getElemText(doc, "character-types").strip()

#regular tokens
tokensText = getElemText(doc, "regular-tokens").strip()

#productions
productionsText = getElemText(doc, "productions").lower()

#keywords and operators
tokensText += "\n"
literals = set(re.findall(r'".+?"', productionsText))
def makeName(operator) :
	charCodes = map(ord, operator)
	return "_".join(map(alphaFromNumber, charCodes))
for literal in literals :
	bare = literal[1:-1]
	if re.match(r'[a-z]', bare) :
		id = "keyword_%s" % bare
	else :
		id = "operator_%s" % makeName(bare)
	tokensText += "\n\t%s = '%s' ;" % (id, bare)
	productionsText = productionsText.replace(literal, id)

#@text is a production minus the semicolon
#all literals have already been removed
#e.g. alpha = beta | gamma | delta
def handleProduction(text) :
	def handleAlt(i) :
		text = altsOriginal[i]
		ids = re.findall(r'[a-z_]+', text)
		uniqueIds = set(ids)
		for id in uniqueIds :
			if ids.count(id) > 1 :
				text = text.replace(id, " [XXX]:%s" % id)
				j = 0
				while j < ids.count(id) :
					text = text.replace("XXX", alphaFromNumber(j), 1)
					j = j + 1
		if len(altsOriginal) > 1 :
			return " {%s} %s" % (alphaFromNumber(i), text)
		return text
	
	if text.find("=") == -1 :
		return text
	[name, altsText] = text.split("=", 1)
	altsOriginal = altsText.split("|")
	alts = []
	for i in range(0, len(altsOriginal)) :
		alts.append(handleAlt(i))
	return name + "=" + "|".join(alts)

productions = productionsText.split(";")
productions = map( handleProduction, productions )
productionsText = ";".join(productions)

"""
def addLabels(text, sep, i) :
	pieces = productionsText.split(sep)
	out = []
	out.append(pieces.pop(0))
	while len(pieces) > 0 :
		out.append(sep)
		out.append("{%s}" % alphaFromNumber(i))
		i = i + 1
		out.append(pieces.pop(0))
	return ("".join(out), i)

i = 0
(productionsText, i) = addLabels(productionsText, "=", i)
(productionsText, i) = addLabels(productionsText, "|", i)
"""

file = open(outputGrammarPath, "w")
file.write(outputTemplate % {
	"helpers" : helpersText,
	"tokens" : tokensText,
	"productions" : productionsText
})
file.close()

