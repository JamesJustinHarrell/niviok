Inside of a brace-block, how do you know when you encounter a tab-block?

block {
	for i from 0 to 100
		println i
		println " "
}

What is the above equivalent to?

block {
	for i from 0 to 100 {
		println i
		println " "
	}
}

block {
	for i from 0 to 100 {
		println i
	}
	println " "
}


Solutions:
* Remove one of the block syntaxes.
* Use an operator to specify that a tab-block follows. Python uses a colon for this. If this operator is not present, only a single expression would be consumed.
* Modify one or both of the block syntaxes so they are compatible.


Third option:

BraceBlock =
	"{" [ LineExpression { "," LineExpression } ] "}" .

TabBlock =
	INDENT_OPEN Expression { NEWLINE Expression } NEWLINE INDENT_CLOSE .

BraceTabBlock =
	"{" NEWLINE TabBlock "}" .


block { a(), b(), c() }

block
	a()
	b()
	c()

block {
	a()
	b()
	c()
}



block { with decl foo = func(a){123}() { outer:println( times(2) ) } }

block
	with decl foo = func(a)
		123
	()
		outer:println( times(2) )

block {
	with decl foo = func(a) {
		123
	} () {
		outer:println( times(2) )
	}
}







--- old test of old syntax

func doStuff()
	if true
		println("this is a test")
	string str = "ðŸ¿° Hello,".concat(" World ðŸ¿±")
	println(str)
											# look at me!
	println(str.length)
	for x from 1 to 20
		println( x.add(10000) ) /* this is a comment
that tests some stuff */
	println("still in doStuff()") #yep, sure are
	/* blah blah
				blah blah
blah blah
	blah blah */
	println("still (!) in doStuff()") # will we ever get out?!
	
	decl foo1 = 2 /* comment */ + 3

	decl foo2 = 2 + 3 #comment
	
	/* comment
				comment comment */
	decl foo3 = 2 + ( func()*
		3 )() + 6
	
	decl foo4 = 2 + 3 /* comment
comment comment */
	nextLine()
	
	decl foo = 2 +
/* comment */
		3 +
		4 +
		5 + 6 + 7
	
	/*
	For the above, the identented part is parsed as a block node.
	So we have:
		decl foo = 2 + block{ 3 + 4 + 5 + 6 + 7 }
	Which is trivially optimizable to:
		decl foo = 2 + 3 + 4 + 5 + 6 + 7
	*/
	
	decl lastInDoStuff