using System.Collections.Generic;

//this file automatically generated by Coco/R

namespace CocoR {


using System;



class Parser {
	const int _EOF = 0;
	const int _INDENTOPENt = 1;
	const int _INDENTCLOSEt = 2;
	const int _NEWLINEt = 3;
	const int _BRACKETOPENt = 4;
	const int _BRACKETCLOSEt = 5;
	const int _NUMBERt = 6;
	const int _STRINGt = 7;
	const int _WORDt = 8;
	const int _OTHERt = 9;
	const int maxT = 10;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

public Bridge bridge;
	public Node_Bundle bundle;



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	void ExpectLiteral (string text) {
		if (la.value==text) Get(); else { throw new Exception("token not expected value"); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void dextrbundle() {
		IList<Node_DeclareFirst> declFirstList = new List<Node_DeclareFirst>();
		Node_DeclareFirst declFirst; 
		while (la.kind == 3) {
			Get();
		}
		if (IsLiteral(la, NUMBERt)) {
			Get();
			Expect(8);
			while (la.kind == 3) {
				Get();
			}
		}
		while (la.kind == 6) {
			DeclareFirst(out declFirst);
			declFirstList.Add( declFirst ); 
			while (la.kind == 3) {
				Get();
			}
		}
		Expect(0);
		bundle = new Node_Bundle(
		new Node_Plane[] { new Node_Plane(declFirstList) } ); 
	}

	void DeclareFirst(out Node_DeclareFirst declFirst) {
		Node_Identifier ident; INode_Expression expression; 
		ExpectLiteral("decl");
		Identifier(out ident);
		ExpectLiteral("=");
		Expression(out expression);
		declFirst = new Node_DeclareFirst(
		ident,
		new Node_IdentikeyType(
			new Node_IdentikeyCategory(IdentikeyCategory.DYNAMIC),
			new Node_NullableType(
				null,
				new Node_Boolean(false)),
			new Node_Boolean(false)),
		expression); 
	}

	void Identifier(out Node_Identifier ident) {
		Expect(8);
		ident = new Node_Identifier(bridge, new Identifier(t.val)); 
	}

	void Expression(out INode_Expression expression) {
		LineExpression(out expression);
	}

	void LineExpression(out INode_Expression expression) {
		Node_Identifier ident; 
		Identifier(out ident);
		expression = ident; 
	}



	public void Parse() {
		la = null;
		Get();
		dextrbundle();

		Expect(0);
	}
	
	bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
	public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
  
	public void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "INDENTOPENt expected"; break;
			case 2: s = "INDENTCLOSEt expected"; break;
			case 3: s = "NEWLINEt expected"; break;
			case 4: s = "BRACKETOPENt expected"; break;
			case 5: s = "BRACKETCLOSEt expected"; break;
			case 6: s = "NUMBERt expected"; break;
			case 7: s = "STRINGt expected"; break;
			case 8: s = "WORDt expected"; break;
			case 9: s = "OTHERt expected"; break;
			case 10: s = "??? expected"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


class FatalError: Exception {
	public FatalError(string m): base(m) {}
}


} //namespace CocoR

