import os
import re
import sys
import xml.dom.minidom as DOM
import paths

inputGrammarPath = os.path.join(paths.sableDir,"Dextr sablecc grammar.txt")
outputGrammarPath = os.path.join(paths.sableDir,"dextr.sablecc")

outputTemplate = """
//This file was created programmatically, so
//DO NOT EDIT THIS FILE DIRECTLY.

Package Dextr.Sablecc;

Helpers
	%(helpers)s

Tokens
	%(tokens)s

Productions

%(productions)s

"""

def getElemText(doc, name) :
	return doc.getElementsByTagName(name)[0].firstChild.wholeText

#get lines that aren't just whitespace
def contentLines(text) :
	return [x for x in text.splitlines() if x.strip() != ""]

#creates a name for a number
#e.g. 000 -> "aaa", 012 -> "abc"
def alphaFromNumber(number) :
	nums = map(int, list(str(number))) #e.g. 012 -> [0, 1, 2]
	nums = [ord("a") + x for x in nums] #e.g. [0, 1, 2] -> [97, 98, 99]
	chars = map(chr, nums) #e.g. [97, 98, 99] -> ["a", "b", "c"]
	return "".join(chars)

doc = DOM.parse(inputGrammarPath)

#character-types
helpersText = getElemText(doc, "character-types").strip()

#productions
productionsText = getElemText(doc, "productions").lower()

#build table of operator names (String operator -> String name)
operatorNames = {}
for line in contentLines(getElemText(doc,"operator-names")) :
	[operator, name] = line.strip().split(" ", 1)
	operatorNames[operator] = name

#token declarations
#keywords must come before identifier to be recognized as keywords
tokensText = ""

#keywords and operators
#replace literals with token references
literals = set(re.findall(r'".+?"', productionsText))
for literal in literals :
	bare = literal[1:-1]
	if re.match(r'[a-z]', bare) :
		id = "keyword_%s" % bare
	else :
		id = "operator_%s" % operatorNames[bare].replace(" ", "_")
	tokensText += "\n\t%s = '%s' ;" % (id, bare)
	productionsText = productionsText.replace(literal, id)

#regular tokens
tokensText += "\n" + getElemText(doc, "regular-tokens").strip()

#@text is a production minus the semicolon
#all literals have already been removed
#e.g. alpha = beta | gamma | delta
def handleProduction(text) :
	def handleAlt(i) :
		text = altsOriginal[i]
		ids = re.findall(r'[a-z_]+', text)
		uniqueIds = set(ids)
		for id in uniqueIds :
			if ids.count(id) > 1 :
				text = text.replace(id, " [XXX]:%s" % id)
				j = 0
				while j < ids.count(id) :
					text = text.replace("XXX", alphaFromNumber(j), 1)
					j = j + 1
		if len(altsOriginal) > 1 :
			return " {%s} %s" % (alphaFromNumber(i), text)
		return text
	
	if text.find("=") == -1 :
		return text
	[name, altsText] = text.split("=", 1)
	altsOriginal = altsText.split("|")
	alts = []
	for i in range(0, len(altsOriginal)) :
		alts.append(handleAlt(i))
	return name + "=" + "|".join(alts)

productions = productionsText.split(";")
productions = map( handleProduction, productions )
productionsText = ";".join(productions)

file = open(outputGrammarPath, "w")
file.write(outputTemplate % {
	"helpers" : helpersText,
	"tokens" : tokensText,
	"productions" : productionsText
})
file.close()

