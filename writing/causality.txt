=============
Causality
=============

pronounciation:
	kaw-zal-i-tee
	ko-zal-i-tee

The Desal concept of "causality" is related to what is called purity, transparency, or opacity. In Desal, causality is the what an expression or member relies on to execute, and what affect execution has. Causality is the combination of input and output, cause and effect, determinants and results.

In Desal, causality information is fundamental in enabling parallelism. Code can run in parallel, without libraries, using the appropriate causality information. Desal agents can also use causality information to run code in parallel when doing so doesn't affect the output of the program.

Question: Should method/function purity be split apart from node purity?
Question: Should interfaces and/or interface implementations define purity?

! Merge side-effects and object mutation.

important optimization that becomes possible with causality information:
	memoization


--- INPUT/CAUSE/DETERMINANTS ---

Results can be affected by these things:

--- value members

* argument
	the result of the callee, method, or property setter is affected by explicitly passed-in arguments
	by passing in the same arguments, you can be sure to get the same results
	Example: toUpperCase("text")

* internal object state
	the result of the convert/copy, callee, method, or property getter is affected by the previous state of the object
	objects with equivalent state lead to equivelent results
	Example: "text".toUpperCase()

* external object state
	the result is affected by external variables/functions that may change
	Example: func foo() { return bar }

--- expression nodes

* children/data
	the result of executing the node is dependant on the children of the node or data encoded directly be the node
	if executing an identifier to obtain the value bound to an identikey is involved, the results do not depend soley on the children
	equal nodes with equal children are known to have the same results when executed
	Example: <string>text</string> <yield><integer>3</integer></yield>

* identikey
	relies on the values bound to a specified identikey
	Example: <identifier>foo</identifier>

---

If an implementation knows the external variables/functions will always give the same result, or that in the end they have no affect on the outcome, it can move the dependency level to "argument". If an implementation knows the arguments to a function will always be the same, or that they will have no affect, it can move the dependency level to "independent".

An implementation may move the dependency level down even when code has specifically been marked with a higher dependency level. An implementation must not move the dependency level higher than code has been marked as.



--- OUTPUT/EFFECT/RESULT

There are 3 types of results:

* visible side effects
	example: binding a global identifier-reference to a different value

* non-visible side effects
	example: printing, playing a sound

* evaluation
	example: a function call returning something

Visible means the result causes changes within the implementation, rather than going outside the implementation. Non-visible changes don't have lasting affects on the implementation, although they may have lasting affects outside the implementation.

Every Desal node has information about each of these result types. A Desal node should specify all visible and non-visible side effects of execution, and each result's dependency level. It should also specify the dependency level of of evaluation if it can be evaluated. 


--- ORDER

differentiate between ordered and unordered results!

Nodes should also have information about whether the results are dependent on order.

example: incrementing is unordered, but printing is ordered


--- EXPLICIT CAUSALITY INFORMATION ---

Results and their dependency level should be markable for every executable node. If something is marked a certain way, it should be treated that way, even if it isn't.


--- EXAMPLE

If a function has no side effects, so that the only result is the product, and the dependency level of the function is "argument", every function call with that function, where the arguments can be evaluated, can be evaluated during processing.

So, Math.square(5) may be replaced with 25.

The tree after processing could be turned back into a Desal storage tree if all evaluated expressions can be represented with Desal nodes. In this case, 25 is a builtin integer, so it could be replaced with an integer node.


--- REDUCTION ---

Some problems can be reduced to a single println function call when enough causality information is given. Desal Agents should be tested with complicated programs, marked-up with lots of causality info, that should be reduced to a single println function call.

For if-else blocks, where the test for the first if is known to always be true, but the block in the else depends on external variables, the if-else depends on external variables, and can't immediately be reduced. However, the if-else can be instructed to reduce its children, which lead to the test for the if being evaluated. From here, it is simple for an implementation to remove the else blocks and replace the entire if-else node with a single block node.

