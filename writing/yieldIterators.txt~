Note: The generator and yield nodes become mostly useless without loop nodes. Loop functions will not work with the yield node.

interface Iterable<T>
	func iterate (-> Iterator<T>)

interface Iterator<T>
	get T value
	get Bool next?
	func advance (-> void)
		#mutates this iterator to refer to the next value
		#throws if iterator doesn't have next

func yieldIterators<T> { Iterable<T> iterable |
	let Iterator<T> iter = iterable.iterate()
	yieldwhile {
		iter
	} {
		if iter.has_next?
			iter = iter.next
			true
		else
			false
	}
}

func printNames { Iterable<String> names |
	for names println
}

func printNames2 { Iterable<String> names |
	for (yieldIterators names) { Iterator<String> iter | println iter.value }
}

func printNames3 { Iterable<String> names |
	for (map (yieldIterators names) ::value) println
}

func replaceNames { SomeCollection<String> names, String searchName, String newName |
	for (yieldIterators names) { Iterator<String> iter |
		if iter.value == searchName
			names.replace(iter, newName)
	}
}

