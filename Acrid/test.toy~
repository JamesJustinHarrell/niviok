#test comment test

/* test comment test */

1 0 #niviok version 1.0

() #imports

( #sieve

( #expose
	((std))
	((stdio))
)

() #using

( #statement-declaration list

#child nodes below are "hidable" nodes

(false
(declare-first header function any false
	(function
		(
			(in any title -))
		any
		(compound () () () (
			(println "")
			(println ((extract-member title concat) " :"))
		)))))

(false
(declare-first headerize function any false
	(function
		(
			(in any title -)
			(in any func -))
		any
		(compound () () () (
			(header ((extract-member "calling " concat) title))
			(func)
			(println "")
			(println ((extract-member "done with " concat) title))
		)))))

(false
(declare-first main function any false
	(function () any
		(compound () () () (
			(headerize "doStuff" doStuff)
			(headerize "testNonProducers" testNonProducers)
			(headerize "testSometimesProducers" testSometimesProducers)
			(headerize "testAlwaysProducers" testAlwaysProducers)
		)))))

(false
(declare-first Test constant Interface false
	(interface () (
		(normal (property number false Int))
		(normal (property text true String))
		))))

(false
(declare-first createObject function any false
	(function () any
		(compound () () () (
			(declare-assign mText variable String false "initial text")
			
			(object (
				(Test () (
					(
						property_getter
						number
						any
						(function()any 123)
					)
					(
						property_getter
						text
						any
						(function()any mText)
					)
					(
						property_setter
						text
						any
						(function(
							(in String newval any)
						)any
							(assign mText false newval))
					)
				))
			))
		)))))

(false
(declare-first doStuff function any false
	(function () any
		(compound () () () (
			(conditional
				true (println "this is a test")
				any )
			(declare-assign str constant String false
				((extract-member "ðŸ¿° Hello," concat) " World ðŸ¿±"))
			(println str)
			(println (extract-member str length))

/* xxx enumerator-loop was removed
			(enumerator-loop - (range 1 20 false) ((any x)) -
				(println ((extract-member x add) 10000)))
*/
			(declare-assign ðŸ¿°ðŸ¿± constant String false
				"astral characters in identifiers")
			(println ðŸ¿°ðŸ¿±)

			(declare-assign obj constant Test false
				(createObject))
			
			(println (extract-member obj number))
			(println (extract-member obj text))
			(set-property obj text "text set through set-property node")
			(println (extract-member obj text))
			
			(declare-assign gen constant any false
				(generator any (compound () () () (
					(println "printed by generator")
					(yield "yielded from generator")
					))))
			
			(println ((extract-member gen yield)))
			
			(try-catch
				/* try */ nonexistantidentikey
				/* exception-handlers */ (
					(Object -  - (println "exception caught"))
				)
				/* else */ (println "no exception")
				/* finally */ (println "finally!") )
		)))))

(false
(declare-first testNonProducers function any false
	(function () any

	123

/* xxx return node was removed
		(compound () () (
			(declare-first testReturn function any false
				(function () any
					(compound () () () (
						123
						(return 456)
						789))))
		) (
			(println (testReturn))
		))
*/

)))

(false
(declare-first testSometimesProducers function any false
	(function () any
		(compound () () () (
			(header "assign, block, call")
			(declare-empty foo variable any)
			(assign foo false (compound () () () (123)))
			(println foo)
			
/* xxx enable when Bridge.getBreederFace is implemented
			(header "cast")
			(println (cast 123 (Object false)))
*/
			(header "conditional")
			(println
				(conditional
					false 000
					(conditional
						true 111
						(222))))
			(println (conditional true 123 -))
			(println (conditional false 123 -))
		)))))

(false
(declare-first testAlwaysProducers function any false
	(function () any
		(compound () () () (
			(header "testBooleanLogic")
			(testBooleanLogic)
			
			(header "function")
			(println ((function()any "some stuff")))

			(header "identifier")
			(println true)
			
			(header "integer")
			(println 98765)
			
			(header "rational")
			(println 123.456)
			
			(header "string")
			(println "This is some text.")
			
		)))))

(false
(declare-first testBooleanLogic function any false
	(function () any
		(compound () () () (
			/*
			for "and", "nand", "or", and "nor" node tests:
			first come values that should shortcut,
			then values that should not shortcut
			*/
			(declare-assign t constant any false
				true)
			(declare-assign f constant any false
				false)
		
			(header "and")
			(println (and f t))
			(println (and t t))
			
			(header "nand")
			(println (nand f t))
			(println (nand t t))
			
			(header "or")
			(println (or t f))
			(println (or f f))
			
			(header "nor")
			(println (nor t f))
			(println (nor f f))

			(header "xor")
			(println (xor t f))
			(println (xor t t))
			
			(header "xnor")
			(println (xnor t f))
			(println (xnor t t))

		)))))

) #close statement-declaration list

) #close sieve
