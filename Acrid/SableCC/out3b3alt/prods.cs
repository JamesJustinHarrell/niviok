/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Acrid.Fujin.SableCC.analysis;

namespace Acrid.Fujin.SableCC.node {

public abstract class PDocument : Node
{
}

public abstract class PDocumentinside : Node
{
}

public abstract class PPlanereference : Node
{
}

public abstract class PDeclarefirstlist : Node
{
}

public abstract class PAdd : Node
{
}

public abstract class PArgumentlist : Node
{
}

public abstract class PBlock : Node
{
}

public abstract class PBraceblock : Node
{
}

public abstract class PBraceblockinside : Node
{
}

public abstract class PTabblock : Node
{
}

public abstract class PTabblockinside : Node
{
}

public abstract class PBracetabblock : Node
{
}

public abstract class PBooleanlogic : Node
{
}

public abstract class PBooleanfunction : Node
{
}

public abstract class PCall : Node
{
}

public abstract class PDeclareassign : Node
{
}

public abstract class PDeclareempty : Node
{
}

public abstract class PDeclarefirst : Node
{
}

public abstract class PDeclarefirstnormal : Node
{
}

public abstract class PExpose : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExtractmember : Node
{
}

public abstract class PForrange : Node
{
}

public abstract class PFunction : Node
{
}

public abstract class PType : Node
{
}

public abstract class PFunctiondeclaration : Node
{
}

public abstract class PIfelse : Node
{
}

public abstract class PIfexpr : Node
{
}

public abstract class PIf : Node
{
}

public abstract class PElif : Node
{
}

public abstract class PElse : Node
{
}

public abstract class PImport : Node
{
}

public abstract class PMult : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PParameterlist : Node
{
}

public abstract class PParenthetical : Node
{
}

public abstract class PPrimary : Node
{
}

public abstract class PScopealteration : Node
{
}

public abstract class PSimple : Node
{
}

public abstract class PTest : Node
{
}

public abstract class PComparisonfunction : Node
{
}

public abstract class PUsing : Node
{
}


public sealed class ADocument : PDocument
{
    private TNewline _a_;
    private TypedList _import_;
    private TypedList _scopealteration_;
    private PDocumentinside _documentinside_;
    private TNewline _b_;

    public ADocument ()
    {
        this._import_ = new TypedList(new Import_Cast(this));
        this._scopealteration_ = new TypedList(new Scopealteration_Cast(this));
    }

    public ADocument (
            TNewline _a_,
            IList _import_,
            IList _scopealteration_,
            PDocumentinside _documentinside_,
            TNewline _b_
    )
    {
        SetA (_a_);
        this._import_ = new TypedList(new Import_Cast(this));
        this._import_.Clear();
        this._import_.AddAll(_import_);
        this._scopealteration_ = new TypedList(new Scopealteration_Cast(this));
        this._scopealteration_.Clear();
        this._scopealteration_.AddAll(_scopealteration_);
        SetDocumentinside (_documentinside_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ADocument (
            (TNewline)CloneNode (_a_),
            CloneList (_import_),
            CloneList (_scopealteration_),
            (PDocumentinside)CloneNode (_documentinside_),
            (TNewline)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADocument(this);
    }

    public TNewline GetA ()
    {
        return _a_;
    }

    public void SetA (TNewline node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public IList GetImport ()
    {
        return _import_;
    }

    public void setImport (IList list)
    {
        _import_.Clear();
        _import_.AddAll(list);
    }
    public IList GetScopealteration ()
    {
        return _scopealteration_;
    }

    public void setScopealteration (IList list)
    {
        _scopealteration_.Clear();
        _scopealteration_.AddAll(list);
    }
    public PDocumentinside GetDocumentinside ()
    {
        return _documentinside_;
    }

    public void SetDocumentinside (PDocumentinside node)
    {
        if(_documentinside_ != null)
        {
            _documentinside_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _documentinside_ = node;
    }
    public TNewline GetB ()
    {
        return _b_;
    }

    public void SetB (TNewline node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_import_)
            + ToString (_scopealteration_)
            + ToString (_documentinside_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _import_.Contains(child) )
        {
            _import_.Remove(child);
            return;
        }
        if ( _scopealteration_.Contains(child) )
        {
            _scopealteration_.Remove(child);
            return;
        }
        if ( _documentinside_ == child )
        {
            _documentinside_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((TNewline) newChild);
            return;
        }
        for ( int i = 0; i < _import_.Count; i++ )
        {
            Node n = (Node)_import_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _import_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _import_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _scopealteration_.Count; i++ )
        {
            Node n = (Node)_scopealteration_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _scopealteration_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _scopealteration_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _documentinside_ == oldChild )
        {
            SetDocumentinside ((PDocumentinside) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((TNewline) newChild);
            return;
        }
    }

    private class Import_Cast : Cast
    {
        ADocument obj;

        internal Import_Cast (ADocument obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PImport node = (PImport) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PImport node = (PImport) o;
            node.Parent(null);
            return node;
        }
    }
    private class Scopealteration_Cast : Cast
    {
        ADocument obj;

        internal Scopealteration_Cast (ADocument obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PScopealteration node = (PScopealteration) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PScopealteration node = (PScopealteration) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AADocumentinside : PDocumentinside
{
    private PDeclarefirstlist _declarefirstlist_;

    public AADocumentinside ()
    {
    }

    public AADocumentinside (
            PDeclarefirstlist _declarefirstlist_
    )
    {
        SetDeclarefirstlist (_declarefirstlist_);
    }

    public override Object Clone()
    {
        return new AADocumentinside (
            (PDeclarefirstlist)CloneNode (_declarefirstlist_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAADocumentinside(this);
    }

    public PDeclarefirstlist GetDeclarefirstlist ()
    {
        return _declarefirstlist_;
    }

    public void SetDeclarefirstlist (PDeclarefirstlist node)
    {
        if(_declarefirstlist_ != null)
        {
            _declarefirstlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirstlist_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarefirstlist_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarefirstlist_ == child )
        {
            _declarefirstlist_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarefirstlist_ == oldChild )
        {
            SetDeclarefirstlist ((PDeclarefirstlist) newChild);
            return;
        }
    }

}
public sealed class ABDocumentinside : PDocumentinside
{
    private TypedList _planereference_;
    private TypedList _scopealteration_;
    private PDeclarefirstlist _declarefirstlist_;

    public ABDocumentinside ()
    {
        this._planereference_ = new TypedList(new Planereference_Cast(this));
        this._scopealteration_ = new TypedList(new Scopealteration_Cast(this));
    }

    public ABDocumentinside (
            IList _planereference_,
            IList _scopealteration_,
            PDeclarefirstlist _declarefirstlist_
    )
    {
        this._planereference_ = new TypedList(new Planereference_Cast(this));
        this._planereference_.Clear();
        this._planereference_.AddAll(_planereference_);
        this._scopealteration_ = new TypedList(new Scopealteration_Cast(this));
        this._scopealteration_.Clear();
        this._scopealteration_.AddAll(_scopealteration_);
        SetDeclarefirstlist (_declarefirstlist_);
    }

    public override Object Clone()
    {
        return new ABDocumentinside (
            CloneList (_planereference_),
            CloneList (_scopealteration_),
            (PDeclarefirstlist)CloneNode (_declarefirstlist_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABDocumentinside(this);
    }

    public IList GetPlanereference ()
    {
        return _planereference_;
    }

    public void setPlanereference (IList list)
    {
        _planereference_.Clear();
        _planereference_.AddAll(list);
    }
    public IList GetScopealteration ()
    {
        return _scopealteration_;
    }

    public void setScopealteration (IList list)
    {
        _scopealteration_.Clear();
        _scopealteration_.AddAll(list);
    }
    public PDeclarefirstlist GetDeclarefirstlist ()
    {
        return _declarefirstlist_;
    }

    public void SetDeclarefirstlist (PDeclarefirstlist node)
    {
        if(_declarefirstlist_ != null)
        {
            _declarefirstlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirstlist_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_planereference_)
            + ToString (_scopealteration_)
            + ToString (_declarefirstlist_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _planereference_.Contains(child) )
        {
            _planereference_.Remove(child);
            return;
        }
        if ( _scopealteration_.Contains(child) )
        {
            _scopealteration_.Remove(child);
            return;
        }
        if ( _declarefirstlist_ == child )
        {
            _declarefirstlist_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _planereference_.Count; i++ )
        {
            Node n = (Node)_planereference_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _planereference_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _planereference_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _scopealteration_.Count; i++ )
        {
            Node n = (Node)_scopealteration_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _scopealteration_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _scopealteration_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _declarefirstlist_ == oldChild )
        {
            SetDeclarefirstlist ((PDeclarefirstlist) newChild);
            return;
        }
    }

    private class Planereference_Cast : Cast
    {
        ABDocumentinside obj;

        internal Planereference_Cast (ABDocumentinside obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PPlanereference node = (PPlanereference) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PPlanereference node = (PPlanereference) o;
            node.Parent(null);
            return node;
        }
    }
    private class Scopealteration_Cast : Cast
    {
        ABDocumentinside obj;

        internal Scopealteration_Cast (ABDocumentinside obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PScopealteration node = (PScopealteration) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PScopealteration node = (PScopealteration) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class APlanereference : PPlanereference
{
    private TKeywordPlane _keyword_plane_;
    private TString _string_;
    private TNewline _newline_;

    public APlanereference ()
    {
    }

    public APlanereference (
            TKeywordPlane _keyword_plane_,
            TString _string_,
            TNewline _newline_
    )
    {
        SetKeywordPlane (_keyword_plane_);
        SetString (_string_);
        SetNewline (_newline_);
    }

    public override Object Clone()
    {
        return new APlanereference (
            (TKeywordPlane)CloneNode (_keyword_plane_),
            (TString)CloneNode (_string_),
            (TNewline)CloneNode (_newline_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlanereference(this);
    }

    public TKeywordPlane GetKeywordPlane ()
    {
        return _keyword_plane_;
    }

    public void SetKeywordPlane (TKeywordPlane node)
    {
        if(_keyword_plane_ != null)
        {
            _keyword_plane_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_plane_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_plane_)
            + ToString (_string_)
            + ToString (_newline_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_plane_ == child )
        {
            _keyword_plane_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_plane_ == oldChild )
        {
            SetKeywordPlane ((TKeywordPlane) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
    }

}
public sealed class AADeclarefirstlist : PDeclarefirstlist
{
    private PDeclarefirst _declarefirst_;

    public AADeclarefirstlist ()
    {
    }

    public AADeclarefirstlist (
            PDeclarefirst _declarefirst_
    )
    {
        SetDeclarefirst (_declarefirst_);
    }

    public override Object Clone()
    {
        return new AADeclarefirstlist (
            (PDeclarefirst)CloneNode (_declarefirst_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAADeclarefirstlist(this);
    }

    public PDeclarefirst GetDeclarefirst ()
    {
        return _declarefirst_;
    }

    public void SetDeclarefirst (PDeclarefirst node)
    {
        if(_declarefirst_ != null)
        {
            _declarefirst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirst_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarefirst_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarefirst_ == child )
        {
            _declarefirst_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarefirst_ == oldChild )
        {
            SetDeclarefirst ((PDeclarefirst) newChild);
            return;
        }
    }

}
public sealed class ABDeclarefirstlist : PDeclarefirstlist
{
    private PDeclarefirstlist _declarefirstlist_;
    private TNewline _newline_;
    private PDeclarefirst _declarefirst_;

    public ABDeclarefirstlist ()
    {
    }

    public ABDeclarefirstlist (
            PDeclarefirstlist _declarefirstlist_,
            TNewline _newline_,
            PDeclarefirst _declarefirst_
    )
    {
        SetDeclarefirstlist (_declarefirstlist_);
        SetNewline (_newline_);
        SetDeclarefirst (_declarefirst_);
    }

    public override Object Clone()
    {
        return new ABDeclarefirstlist (
            (PDeclarefirstlist)CloneNode (_declarefirstlist_),
            (TNewline)CloneNode (_newline_),
            (PDeclarefirst)CloneNode (_declarefirst_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABDeclarefirstlist(this);
    }

    public PDeclarefirstlist GetDeclarefirstlist ()
    {
        return _declarefirstlist_;
    }

    public void SetDeclarefirstlist (PDeclarefirstlist node)
    {
        if(_declarefirstlist_ != null)
        {
            _declarefirstlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirstlist_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }
    public PDeclarefirst GetDeclarefirst ()
    {
        return _declarefirst_;
    }

    public void SetDeclarefirst (PDeclarefirst node)
    {
        if(_declarefirst_ != null)
        {
            _declarefirst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirst_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarefirstlist_)
            + ToString (_newline_)
            + ToString (_declarefirst_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarefirstlist_ == child )
        {
            _declarefirstlist_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
        if ( _declarefirst_ == child )
        {
            _declarefirst_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarefirstlist_ == oldChild )
        {
            SetDeclarefirstlist ((PDeclarefirstlist) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
        if ( _declarefirst_ == oldChild )
        {
            SetDeclarefirst ((PDeclarefirst) newChild);
            return;
        }
    }

}
public sealed class AAAdd : PAdd
{
    private PMult _mult_;

    public AAAdd ()
    {
    }

    public AAAdd (
            PMult _mult_
    )
    {
        SetMult (_mult_);
    }

    public override Object Clone()
    {
        return new AAAdd (
            (PMult)CloneNode (_mult_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAAdd(this);
    }

    public PMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (PMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_mult_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _mult_ == oldChild )
        {
            SetMult ((PMult) newChild);
            return;
        }
    }

}
public sealed class ABAdd : PAdd
{
    private PAdd _add_;
    private TOperatorPlus _operator_plus_;
    private PMult _mult_;

    public ABAdd ()
    {
    }

    public ABAdd (
            PAdd _add_,
            TOperatorPlus _operator_plus_,
            PMult _mult_
    )
    {
        SetAdd (_add_);
        SetOperatorPlus (_operator_plus_);
        SetMult (_mult_);
    }

    public override Object Clone()
    {
        return new ABAdd (
            (PAdd)CloneNode (_add_),
            (TOperatorPlus)CloneNode (_operator_plus_),
            (PMult)CloneNode (_mult_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABAdd(this);
    }

    public PAdd GetAdd ()
    {
        return _add_;
    }

    public void SetAdd (PAdd node)
    {
        if(_add_ != null)
        {
            _add_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _add_ = node;
    }
    public TOperatorPlus GetOperatorPlus ()
    {
        return _operator_plus_;
    }

    public void SetOperatorPlus (TOperatorPlus node)
    {
        if(_operator_plus_ != null)
        {
            _operator_plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_plus_ = node;
    }
    public PMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (PMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_add_)
            + ToString (_operator_plus_)
            + ToString (_mult_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _add_ == child )
        {
            _add_ = null;
            return;
        }
        if ( _operator_plus_ == child )
        {
            _operator_plus_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _add_ == oldChild )
        {
            SetAdd ((PAdd) newChild);
            return;
        }
        if ( _operator_plus_ == oldChild )
        {
            SetOperatorPlus ((TOperatorPlus) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((PMult) newChild);
            return;
        }
    }

}
public sealed class ACAdd : PAdd
{
    private PAdd _add_;
    private TOperatorMinus _operator_minus_;
    private PMult _mult_;

    public ACAdd ()
    {
    }

    public ACAdd (
            PAdd _add_,
            TOperatorMinus _operator_minus_,
            PMult _mult_
    )
    {
        SetAdd (_add_);
        SetOperatorMinus (_operator_minus_);
        SetMult (_mult_);
    }

    public override Object Clone()
    {
        return new ACAdd (
            (PAdd)CloneNode (_add_),
            (TOperatorMinus)CloneNode (_operator_minus_),
            (PMult)CloneNode (_mult_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACAdd(this);
    }

    public PAdd GetAdd ()
    {
        return _add_;
    }

    public void SetAdd (PAdd node)
    {
        if(_add_ != null)
        {
            _add_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _add_ = node;
    }
    public TOperatorMinus GetOperatorMinus ()
    {
        return _operator_minus_;
    }

    public void SetOperatorMinus (TOperatorMinus node)
    {
        if(_operator_minus_ != null)
        {
            _operator_minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_minus_ = node;
    }
    public PMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (PMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_add_)
            + ToString (_operator_minus_)
            + ToString (_mult_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _add_ == child )
        {
            _add_ = null;
            return;
        }
        if ( _operator_minus_ == child )
        {
            _operator_minus_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _add_ == oldChild )
        {
            SetAdd ((PAdd) newChild);
            return;
        }
        if ( _operator_minus_ == oldChild )
        {
            SetOperatorMinus ((TOperatorMinus) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((PMult) newChild);
            return;
        }
    }

}
public sealed class AAArgumentlist : PArgumentlist
{
    private PExpression _expression_;

    public AAArgumentlist ()
    {
    }

    public AAArgumentlist (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AAArgumentlist (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAArgumentlist(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABArgumentlist : PArgumentlist
{
    private PArgumentlist _argumentlist_;
    private TOperatorComma _operator_comma_;
    private PExpression _expression_;

    public ABArgumentlist ()
    {
    }

    public ABArgumentlist (
            PArgumentlist _argumentlist_,
            TOperatorComma _operator_comma_,
            PExpression _expression_
    )
    {
        SetArgumentlist (_argumentlist_);
        SetOperatorComma (_operator_comma_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ABArgumentlist (
            (PArgumentlist)CloneNode (_argumentlist_),
            (TOperatorComma)CloneNode (_operator_comma_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABArgumentlist(this);
    }

    public PArgumentlist GetArgumentlist ()
    {
        return _argumentlist_;
    }

    public void SetArgumentlist (PArgumentlist node)
    {
        if(_argumentlist_ != null)
        {
            _argumentlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argumentlist_ = node;
    }
    public TOperatorComma GetOperatorComma ()
    {
        return _operator_comma_;
    }

    public void SetOperatorComma (TOperatorComma node)
    {
        if(_operator_comma_ != null)
        {
            _operator_comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_comma_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_argumentlist_)
            + ToString (_operator_comma_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _argumentlist_ == child )
        {
            _argumentlist_ = null;
            return;
        }
        if ( _operator_comma_ == child )
        {
            _operator_comma_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _argumentlist_ == oldChild )
        {
            SetArgumentlist ((PArgumentlist) newChild);
            return;
        }
        if ( _operator_comma_ == oldChild )
        {
            SetOperatorComma ((TOperatorComma) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AABlock : PBlock
{
    private PBraceblock _braceblock_;

    public AABlock ()
    {
    }

    public AABlock (
            PBraceblock _braceblock_
    )
    {
        SetBraceblock (_braceblock_);
    }

    public override Object Clone()
    {
        return new AABlock (
            (PBraceblock)CloneNode (_braceblock_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAABlock(this);
    }

    public PBraceblock GetBraceblock ()
    {
        return _braceblock_;
    }

    public void SetBraceblock (PBraceblock node)
    {
        if(_braceblock_ != null)
        {
            _braceblock_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _braceblock_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_braceblock_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _braceblock_ == child )
        {
            _braceblock_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _braceblock_ == oldChild )
        {
            SetBraceblock ((PBraceblock) newChild);
            return;
        }
    }

}
public sealed class ABBlock : PBlock
{
    private PTabblock _tabblock_;

    public ABBlock ()
    {
    }

    public ABBlock (
            PTabblock _tabblock_
    )
    {
        SetTabblock (_tabblock_);
    }

    public override Object Clone()
    {
        return new ABBlock (
            (PTabblock)CloneNode (_tabblock_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABBlock(this);
    }

    public PTabblock GetTabblock ()
    {
        return _tabblock_;
    }

    public void SetTabblock (PTabblock node)
    {
        if(_tabblock_ != null)
        {
            _tabblock_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tabblock_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_tabblock_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _tabblock_ == child )
        {
            _tabblock_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _tabblock_ == oldChild )
        {
            SetTabblock ((PTabblock) newChild);
            return;
        }
    }

}
public sealed class ACBlock : PBlock
{
    private PBracetabblock _bracetabblock_;

    public ACBlock ()
    {
    }

    public ACBlock (
            PBracetabblock _bracetabblock_
    )
    {
        SetBracetabblock (_bracetabblock_);
    }

    public override Object Clone()
    {
        return new ACBlock (
            (PBracetabblock)CloneNode (_bracetabblock_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACBlock(this);
    }

    public PBracetabblock GetBracetabblock ()
    {
        return _bracetabblock_;
    }

    public void SetBracetabblock (PBracetabblock node)
    {
        if(_bracetabblock_ != null)
        {
            _bracetabblock_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bracetabblock_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bracetabblock_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bracetabblock_ == child )
        {
            _bracetabblock_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bracetabblock_ == oldChild )
        {
            SetBracetabblock ((PBracetabblock) newChild);
            return;
        }
    }

}
public sealed class ABraceblock : PBraceblock
{
    private TOperatorOpeningBrace _operator_opening_brace_;
    private PBraceblockinside _braceblockinside_;
    private TOperatorClosingBrace _operator_closing_brace_;

    public ABraceblock ()
    {
    }

    public ABraceblock (
            TOperatorOpeningBrace _operator_opening_brace_,
            PBraceblockinside _braceblockinside_,
            TOperatorClosingBrace _operator_closing_brace_
    )
    {
        SetOperatorOpeningBrace (_operator_opening_brace_);
        SetBraceblockinside (_braceblockinside_);
        SetOperatorClosingBrace (_operator_closing_brace_);
    }

    public override Object Clone()
    {
        return new ABraceblock (
            (TOperatorOpeningBrace)CloneNode (_operator_opening_brace_),
            (PBraceblockinside)CloneNode (_braceblockinside_),
            (TOperatorClosingBrace)CloneNode (_operator_closing_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABraceblock(this);
    }

    public TOperatorOpeningBrace GetOperatorOpeningBrace ()
    {
        return _operator_opening_brace_;
    }

    public void SetOperatorOpeningBrace (TOperatorOpeningBrace node)
    {
        if(_operator_opening_brace_ != null)
        {
            _operator_opening_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_opening_brace_ = node;
    }
    public PBraceblockinside GetBraceblockinside ()
    {
        return _braceblockinside_;
    }

    public void SetBraceblockinside (PBraceblockinside node)
    {
        if(_braceblockinside_ != null)
        {
            _braceblockinside_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _braceblockinside_ = node;
    }
    public TOperatorClosingBrace GetOperatorClosingBrace ()
    {
        return _operator_closing_brace_;
    }

    public void SetOperatorClosingBrace (TOperatorClosingBrace node)
    {
        if(_operator_closing_brace_ != null)
        {
            _operator_closing_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_closing_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operator_opening_brace_)
            + ToString (_braceblockinside_)
            + ToString (_operator_closing_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operator_opening_brace_ == child )
        {
            _operator_opening_brace_ = null;
            return;
        }
        if ( _braceblockinside_ == child )
        {
            _braceblockinside_ = null;
            return;
        }
        if ( _operator_closing_brace_ == child )
        {
            _operator_closing_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operator_opening_brace_ == oldChild )
        {
            SetOperatorOpeningBrace ((TOperatorOpeningBrace) newChild);
            return;
        }
        if ( _braceblockinside_ == oldChild )
        {
            SetBraceblockinside ((PBraceblockinside) newChild);
            return;
        }
        if ( _operator_closing_brace_ == oldChild )
        {
            SetOperatorClosingBrace ((TOperatorClosingBrace) newChild);
            return;
        }
    }

}
public sealed class ABraceblockinside : PBraceblockinside
{
    private PPrimary _primary_;

    public ABraceblockinside ()
    {
    }

    public ABraceblockinside (
            PPrimary _primary_
    )
    {
        SetPrimary (_primary_);
    }

    public override Object Clone()
    {
        return new ABraceblockinside (
            (PPrimary)CloneNode (_primary_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABraceblockinside(this);
    }

    public PPrimary GetPrimary ()
    {
        return _primary_;
    }

    public void SetPrimary (PPrimary node)
    {
        if(_primary_ != null)
        {
            _primary_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _primary_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_primary_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _primary_ == child )
        {
            _primary_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _primary_ == oldChild )
        {
            SetPrimary ((PPrimary) newChild);
            return;
        }
    }

}
public sealed class ATabblock : PTabblock
{
    private TNewline _a_;
    private TIndentOpen _indent_open_;
    private PTabblockinside _tabblockinside_;
    private TNewline _b_;
    private TIndentClose _indent_close_;

    public ATabblock ()
    {
    }

    public ATabblock (
            TNewline _a_,
            TIndentOpen _indent_open_,
            PTabblockinside _tabblockinside_,
            TNewline _b_,
            TIndentClose _indent_close_
    )
    {
        SetA (_a_);
        SetIndentOpen (_indent_open_);
        SetTabblockinside (_tabblockinside_);
        SetB (_b_);
        SetIndentClose (_indent_close_);
    }

    public override Object Clone()
    {
        return new ATabblock (
            (TNewline)CloneNode (_a_),
            (TIndentOpen)CloneNode (_indent_open_),
            (PTabblockinside)CloneNode (_tabblockinside_),
            (TNewline)CloneNode (_b_),
            (TIndentClose)CloneNode (_indent_close_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATabblock(this);
    }

    public TNewline GetA ()
    {
        return _a_;
    }

    public void SetA (TNewline node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TIndentOpen GetIndentOpen ()
    {
        return _indent_open_;
    }

    public void SetIndentOpen (TIndentOpen node)
    {
        if(_indent_open_ != null)
        {
            _indent_open_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _indent_open_ = node;
    }
    public PTabblockinside GetTabblockinside ()
    {
        return _tabblockinside_;
    }

    public void SetTabblockinside (PTabblockinside node)
    {
        if(_tabblockinside_ != null)
        {
            _tabblockinside_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tabblockinside_ = node;
    }
    public TNewline GetB ()
    {
        return _b_;
    }

    public void SetB (TNewline node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }
    public TIndentClose GetIndentClose ()
    {
        return _indent_close_;
    }

    public void SetIndentClose (TIndentClose node)
    {
        if(_indent_close_ != null)
        {
            _indent_close_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _indent_close_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_indent_open_)
            + ToString (_tabblockinside_)
            + ToString (_b_)
            + ToString (_indent_close_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _indent_open_ == child )
        {
            _indent_open_ = null;
            return;
        }
        if ( _tabblockinside_ == child )
        {
            _tabblockinside_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
        if ( _indent_close_ == child )
        {
            _indent_close_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((TNewline) newChild);
            return;
        }
        if ( _indent_open_ == oldChild )
        {
            SetIndentOpen ((TIndentOpen) newChild);
            return;
        }
        if ( _tabblockinside_ == oldChild )
        {
            SetTabblockinside ((PTabblockinside) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((TNewline) newChild);
            return;
        }
        if ( _indent_close_ == oldChild )
        {
            SetIndentClose ((TIndentClose) newChild);
            return;
        }
    }

}
public sealed class AATabblockinside : PTabblockinside
{
    private PExpression _expression_;

    public AATabblockinside ()
    {
    }

    public AATabblockinside (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AATabblockinside (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAATabblockinside(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABTabblockinside : PTabblockinside
{
    private PTabblockinside _tabblockinside_;
    private TNewline _newline_;
    private PExpression _expression_;

    public ABTabblockinside ()
    {
    }

    public ABTabblockinside (
            PTabblockinside _tabblockinside_,
            TNewline _newline_,
            PExpression _expression_
    )
    {
        SetTabblockinside (_tabblockinside_);
        SetNewline (_newline_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ABTabblockinside (
            (PTabblockinside)CloneNode (_tabblockinside_),
            (TNewline)CloneNode (_newline_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABTabblockinside(this);
    }

    public PTabblockinside GetTabblockinside ()
    {
        return _tabblockinside_;
    }

    public void SetTabblockinside (PTabblockinside node)
    {
        if(_tabblockinside_ != null)
        {
            _tabblockinside_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tabblockinside_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_tabblockinside_)
            + ToString (_newline_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _tabblockinside_ == child )
        {
            _tabblockinside_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _tabblockinside_ == oldChild )
        {
            SetTabblockinside ((PTabblockinside) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABracetabblock : PBracetabblock
{
    private TOperatorOpeningBrace _operator_opening_brace_;
    private TNewline _a_;
    private PTabblock _tabblock_;
    private TNewline _b_;
    private TOperatorClosingBrace _operator_closing_brace_;

    public ABracetabblock ()
    {
    }

    public ABracetabblock (
            TOperatorOpeningBrace _operator_opening_brace_,
            TNewline _a_,
            PTabblock _tabblock_,
            TNewline _b_,
            TOperatorClosingBrace _operator_closing_brace_
    )
    {
        SetOperatorOpeningBrace (_operator_opening_brace_);
        SetA (_a_);
        SetTabblock (_tabblock_);
        SetB (_b_);
        SetOperatorClosingBrace (_operator_closing_brace_);
    }

    public override Object Clone()
    {
        return new ABracetabblock (
            (TOperatorOpeningBrace)CloneNode (_operator_opening_brace_),
            (TNewline)CloneNode (_a_),
            (PTabblock)CloneNode (_tabblock_),
            (TNewline)CloneNode (_b_),
            (TOperatorClosingBrace)CloneNode (_operator_closing_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABracetabblock(this);
    }

    public TOperatorOpeningBrace GetOperatorOpeningBrace ()
    {
        return _operator_opening_brace_;
    }

    public void SetOperatorOpeningBrace (TOperatorOpeningBrace node)
    {
        if(_operator_opening_brace_ != null)
        {
            _operator_opening_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_opening_brace_ = node;
    }
    public TNewline GetA ()
    {
        return _a_;
    }

    public void SetA (TNewline node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public PTabblock GetTabblock ()
    {
        return _tabblock_;
    }

    public void SetTabblock (PTabblock node)
    {
        if(_tabblock_ != null)
        {
            _tabblock_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tabblock_ = node;
    }
    public TNewline GetB ()
    {
        return _b_;
    }

    public void SetB (TNewline node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }
    public TOperatorClosingBrace GetOperatorClosingBrace ()
    {
        return _operator_closing_brace_;
    }

    public void SetOperatorClosingBrace (TOperatorClosingBrace node)
    {
        if(_operator_closing_brace_ != null)
        {
            _operator_closing_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_closing_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operator_opening_brace_)
            + ToString (_a_)
            + ToString (_tabblock_)
            + ToString (_b_)
            + ToString (_operator_closing_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operator_opening_brace_ == child )
        {
            _operator_opening_brace_ = null;
            return;
        }
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _tabblock_ == child )
        {
            _tabblock_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
        if ( _operator_closing_brace_ == child )
        {
            _operator_closing_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operator_opening_brace_ == oldChild )
        {
            SetOperatorOpeningBrace ((TOperatorOpeningBrace) newChild);
            return;
        }
        if ( _a_ == oldChild )
        {
            SetA ((TNewline) newChild);
            return;
        }
        if ( _tabblock_ == oldChild )
        {
            SetTabblock ((PTabblock) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((TNewline) newChild);
            return;
        }
        if ( _operator_closing_brace_ == oldChild )
        {
            SetOperatorClosingBrace ((TOperatorClosingBrace) newChild);
            return;
        }
    }

}
public sealed class ABooleanlogic : PBooleanlogic
{
    private PSimple _a_;
    private PBooleanfunction _booleanfunction_;
    private PSimple _b_;

    public ABooleanlogic ()
    {
    }

    public ABooleanlogic (
            PSimple _a_,
            PBooleanfunction _booleanfunction_,
            PSimple _b_
    )
    {
        SetA (_a_);
        SetBooleanfunction (_booleanfunction_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ABooleanlogic (
            (PSimple)CloneNode (_a_),
            (PBooleanfunction)CloneNode (_booleanfunction_),
            (PSimple)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanlogic(this);
    }

    public PSimple GetA ()
    {
        return _a_;
    }

    public void SetA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public PBooleanfunction GetBooleanfunction ()
    {
        return _booleanfunction_;
    }

    public void SetBooleanfunction (PBooleanfunction node)
    {
        if(_booleanfunction_ != null)
        {
            _booleanfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _booleanfunction_ = node;
    }
    public PSimple GetB ()
    {
        return _b_;
    }

    public void SetB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_booleanfunction_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _booleanfunction_ == child )
        {
            _booleanfunction_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PSimple) newChild);
            return;
        }
        if ( _booleanfunction_ == oldChild )
        {
            SetBooleanfunction ((PBooleanfunction) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PSimple) newChild);
            return;
        }
    }

}
public sealed class AABooleanfunction : PBooleanfunction
{
    private TKeywordAnd _keyword_and_;

    public AABooleanfunction ()
    {
    }

    public AABooleanfunction (
            TKeywordAnd _keyword_and_
    )
    {
        SetKeywordAnd (_keyword_and_);
    }

    public override Object Clone()
    {
        return new AABooleanfunction (
            (TKeywordAnd)CloneNode (_keyword_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAABooleanfunction(this);
    }

    public TKeywordAnd GetKeywordAnd ()
    {
        return _keyword_and_;
    }

    public void SetKeywordAnd (TKeywordAnd node)
    {
        if(_keyword_and_ != null)
        {
            _keyword_and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_and_ == child )
        {
            _keyword_and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_and_ == oldChild )
        {
            SetKeywordAnd ((TKeywordAnd) newChild);
            return;
        }
    }

}
public sealed class ABBooleanfunction : PBooleanfunction
{
    private TKeywordNand _keyword_nand_;

    public ABBooleanfunction ()
    {
    }

    public ABBooleanfunction (
            TKeywordNand _keyword_nand_
    )
    {
        SetKeywordNand (_keyword_nand_);
    }

    public override Object Clone()
    {
        return new ABBooleanfunction (
            (TKeywordNand)CloneNode (_keyword_nand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABBooleanfunction(this);
    }

    public TKeywordNand GetKeywordNand ()
    {
        return _keyword_nand_;
    }

    public void SetKeywordNand (TKeywordNand node)
    {
        if(_keyword_nand_ != null)
        {
            _keyword_nand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_nand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_nand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_nand_ == child )
        {
            _keyword_nand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_nand_ == oldChild )
        {
            SetKeywordNand ((TKeywordNand) newChild);
            return;
        }
    }

}
public sealed class ACBooleanfunction : PBooleanfunction
{
    private TKeywordOr _keyword_or_;

    public ACBooleanfunction ()
    {
    }

    public ACBooleanfunction (
            TKeywordOr _keyword_or_
    )
    {
        SetKeywordOr (_keyword_or_);
    }

    public override Object Clone()
    {
        return new ACBooleanfunction (
            (TKeywordOr)CloneNode (_keyword_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACBooleanfunction(this);
    }

    public TKeywordOr GetKeywordOr ()
    {
        return _keyword_or_;
    }

    public void SetKeywordOr (TKeywordOr node)
    {
        if(_keyword_or_ != null)
        {
            _keyword_or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_or_ == child )
        {
            _keyword_or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_or_ == oldChild )
        {
            SetKeywordOr ((TKeywordOr) newChild);
            return;
        }
    }

}
public sealed class ADBooleanfunction : PBooleanfunction
{
    private TKeywordNor _keyword_nor_;

    public ADBooleanfunction ()
    {
    }

    public ADBooleanfunction (
            TKeywordNor _keyword_nor_
    )
    {
        SetKeywordNor (_keyword_nor_);
    }

    public override Object Clone()
    {
        return new ADBooleanfunction (
            (TKeywordNor)CloneNode (_keyword_nor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADBooleanfunction(this);
    }

    public TKeywordNor GetKeywordNor ()
    {
        return _keyword_nor_;
    }

    public void SetKeywordNor (TKeywordNor node)
    {
        if(_keyword_nor_ != null)
        {
            _keyword_nor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_nor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_nor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_nor_ == child )
        {
            _keyword_nor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_nor_ == oldChild )
        {
            SetKeywordNor ((TKeywordNor) newChild);
            return;
        }
    }

}
public sealed class AEBooleanfunction : PBooleanfunction
{
    private TKeywordXor _keyword_xor_;

    public AEBooleanfunction ()
    {
    }

    public AEBooleanfunction (
            TKeywordXor _keyword_xor_
    )
    {
        SetKeywordXor (_keyword_xor_);
    }

    public override Object Clone()
    {
        return new AEBooleanfunction (
            (TKeywordXor)CloneNode (_keyword_xor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEBooleanfunction(this);
    }

    public TKeywordXor GetKeywordXor ()
    {
        return _keyword_xor_;
    }

    public void SetKeywordXor (TKeywordXor node)
    {
        if(_keyword_xor_ != null)
        {
            _keyword_xor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_xor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_xor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_xor_ == child )
        {
            _keyword_xor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_xor_ == oldChild )
        {
            SetKeywordXor ((TKeywordXor) newChild);
            return;
        }
    }

}
public sealed class AFBooleanfunction : PBooleanfunction
{
    private TKeywordXnor _keyword_xnor_;

    public AFBooleanfunction ()
    {
    }

    public AFBooleanfunction (
            TKeywordXnor _keyword_xnor_
    )
    {
        SetKeywordXnor (_keyword_xnor_);
    }

    public override Object Clone()
    {
        return new AFBooleanfunction (
            (TKeywordXnor)CloneNode (_keyword_xnor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFBooleanfunction(this);
    }

    public TKeywordXnor GetKeywordXnor ()
    {
        return _keyword_xnor_;
    }

    public void SetKeywordXnor (TKeywordXnor node)
    {
        if(_keyword_xnor_ != null)
        {
            _keyword_xnor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_xnor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_xnor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_xnor_ == child )
        {
            _keyword_xnor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_xnor_ == oldChild )
        {
            SetKeywordXnor ((TKeywordXnor) newChild);
            return;
        }
    }

}
public sealed class ACall : PCall
{
    private PSimple _simple_;
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private PArgumentlist _argumentlist_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;

    public ACall ()
    {
    }

    public ACall (
            PSimple _simple_,
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            PArgumentlist _argumentlist_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_
    )
    {
        SetSimple (_simple_);
        SetOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        SetArgumentlist (_argumentlist_);
        SetOperatorClosingParenthesis (_operator_closing_parenthesis_);
    }

    public override Object Clone()
    {
        return new ACall (
            (PSimple)CloneNode (_simple_),
            (TOperatorOpeningParenthesis)CloneNode (_operator_opening_parenthesis_),
            (PArgumentlist)CloneNode (_argumentlist_),
            (TOperatorClosingParenthesis)CloneNode (_operator_closing_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACall(this);
    }

    public PSimple GetSimple ()
    {
        return _simple_;
    }

    public void SetSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_ = node;
    }
    public TOperatorOpeningParenthesis GetOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void SetOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public PArgumentlist GetArgumentlist ()
    {
        return _argumentlist_;
    }

    public void SetArgumentlist (PArgumentlist node)
    {
        if(_argumentlist_ != null)
        {
            _argumentlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argumentlist_ = node;
    }
    public TOperatorClosingParenthesis GetOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void SetOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_simple_)
            + ToString (_operator_opening_parenthesis_)
            + ToString (_argumentlist_)
            + ToString (_operator_closing_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _argumentlist_ == child )
        {
            _argumentlist_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _simple_ == oldChild )
        {
            SetSimple ((PSimple) newChild);
            return;
        }
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            SetOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _argumentlist_ == oldChild )
        {
            SetArgumentlist ((PArgumentlist) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            SetOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
    }

}
public sealed class ADeclareassign : PDeclareassign
{
    private TKeywordDecl _keyword_decl_;
    private PSimple _simple_;
    private TIdentifier _identifier_;
    private TOperatorAssign _operator_assign_;
    private PExpression _expression_;

    public ADeclareassign ()
    {
    }

    public ADeclareassign (
            TKeywordDecl _keyword_decl_,
            PSimple _simple_,
            TIdentifier _identifier_,
            TOperatorAssign _operator_assign_,
            PExpression _expression_
    )
    {
        SetKeywordDecl (_keyword_decl_);
        SetSimple (_simple_);
        SetIdentifier (_identifier_);
        SetOperatorAssign (_operator_assign_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ADeclareassign (
            (TKeywordDecl)CloneNode (_keyword_decl_),
            (PSimple)CloneNode (_simple_),
            (TIdentifier)CloneNode (_identifier_),
            (TOperatorAssign)CloneNode (_operator_assign_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareassign(this);
    }

    public TKeywordDecl GetKeywordDecl ()
    {
        return _keyword_decl_;
    }

    public void SetKeywordDecl (TKeywordDecl node)
    {
        if(_keyword_decl_ != null)
        {
            _keyword_decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_decl_ = node;
    }
    public PSimple GetSimple ()
    {
        return _simple_;
    }

    public void SetSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TOperatorAssign GetOperatorAssign ()
    {
        return _operator_assign_;
    }

    public void SetOperatorAssign (TOperatorAssign node)
    {
        if(_operator_assign_ != null)
        {
            _operator_assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_decl_)
            + ToString (_simple_)
            + ToString (_identifier_)
            + ToString (_operator_assign_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_decl_ == child )
        {
            _keyword_decl_ = null;
            return;
        }
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _operator_assign_ == child )
        {
            _operator_assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_decl_ == oldChild )
        {
            SetKeywordDecl ((TKeywordDecl) newChild);
            return;
        }
        if ( _simple_ == oldChild )
        {
            SetSimple ((PSimple) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _operator_assign_ == oldChild )
        {
            SetOperatorAssign ((TOperatorAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ADeclareempty : PDeclareempty
{
    private TKeywordDecl _keyword_decl_;
    private PSimple _simple_;
    private TIdentifier _identifier_;

    public ADeclareempty ()
    {
    }

    public ADeclareempty (
            TKeywordDecl _keyword_decl_,
            PSimple _simple_,
            TIdentifier _identifier_
    )
    {
        SetKeywordDecl (_keyword_decl_);
        SetSimple (_simple_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new ADeclareempty (
            (TKeywordDecl)CloneNode (_keyword_decl_),
            (PSimple)CloneNode (_simple_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareempty(this);
    }

    public TKeywordDecl GetKeywordDecl ()
    {
        return _keyword_decl_;
    }

    public void SetKeywordDecl (TKeywordDecl node)
    {
        if(_keyword_decl_ != null)
        {
            _keyword_decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_decl_ = node;
    }
    public PSimple GetSimple ()
    {
        return _simple_;
    }

    public void SetSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_decl_)
            + ToString (_simple_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_decl_ == child )
        {
            _keyword_decl_ = null;
            return;
        }
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_decl_ == oldChild )
        {
            SetKeywordDecl ((TKeywordDecl) newChild);
            return;
        }
        if ( _simple_ == oldChild )
        {
            SetSimple ((PSimple) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AADeclarefirst : PDeclarefirst
{
    private PDeclarefirstnormal _declarefirstnormal_;

    public AADeclarefirst ()
    {
    }

    public AADeclarefirst (
            PDeclarefirstnormal _declarefirstnormal_
    )
    {
        SetDeclarefirstnormal (_declarefirstnormal_);
    }

    public override Object Clone()
    {
        return new AADeclarefirst (
            (PDeclarefirstnormal)CloneNode (_declarefirstnormal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAADeclarefirst(this);
    }

    public PDeclarefirstnormal GetDeclarefirstnormal ()
    {
        return _declarefirstnormal_;
    }

    public void SetDeclarefirstnormal (PDeclarefirstnormal node)
    {
        if(_declarefirstnormal_ != null)
        {
            _declarefirstnormal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirstnormal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarefirstnormal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarefirstnormal_ == child )
        {
            _declarefirstnormal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarefirstnormal_ == oldChild )
        {
            SetDeclarefirstnormal ((PDeclarefirstnormal) newChild);
            return;
        }
    }

}
public sealed class ABDeclarefirst : PDeclarefirst
{
    private PFunctiondeclaration _functiondeclaration_;

    public ABDeclarefirst ()
    {
    }

    public ABDeclarefirst (
            PFunctiondeclaration _functiondeclaration_
    )
    {
        SetFunctiondeclaration (_functiondeclaration_);
    }

    public override Object Clone()
    {
        return new ABDeclarefirst (
            (PFunctiondeclaration)CloneNode (_functiondeclaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABDeclarefirst(this);
    }

    public PFunctiondeclaration GetFunctiondeclaration ()
    {
        return _functiondeclaration_;
    }

    public void SetFunctiondeclaration (PFunctiondeclaration node)
    {
        if(_functiondeclaration_ != null)
        {
            _functiondeclaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functiondeclaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functiondeclaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functiondeclaration_ == child )
        {
            _functiondeclaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functiondeclaration_ == oldChild )
        {
            SetFunctiondeclaration ((PFunctiondeclaration) newChild);
            return;
        }
    }

}
public sealed class ADeclarefirstnormal : PDeclarefirstnormal
{
    private TKeywordDeclfirst _keyword_declfirst_;
    private TIdentifier _identifier_;
    private TOperatorAssign _operator_assign_;
    private PExpression _expression_;

    public ADeclarefirstnormal ()
    {
    }

    public ADeclarefirstnormal (
            TKeywordDeclfirst _keyword_declfirst_,
            TIdentifier _identifier_,
            TOperatorAssign _operator_assign_,
            PExpression _expression_
    )
    {
        SetKeywordDeclfirst (_keyword_declfirst_);
        SetIdentifier (_identifier_);
        SetOperatorAssign (_operator_assign_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ADeclarefirstnormal (
            (TKeywordDeclfirst)CloneNode (_keyword_declfirst_),
            (TIdentifier)CloneNode (_identifier_),
            (TOperatorAssign)CloneNode (_operator_assign_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarefirstnormal(this);
    }

    public TKeywordDeclfirst GetKeywordDeclfirst ()
    {
        return _keyword_declfirst_;
    }

    public void SetKeywordDeclfirst (TKeywordDeclfirst node)
    {
        if(_keyword_declfirst_ != null)
        {
            _keyword_declfirst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_declfirst_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TOperatorAssign GetOperatorAssign ()
    {
        return _operator_assign_;
    }

    public void SetOperatorAssign (TOperatorAssign node)
    {
        if(_operator_assign_ != null)
        {
            _operator_assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_declfirst_)
            + ToString (_identifier_)
            + ToString (_operator_assign_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_declfirst_ == child )
        {
            _keyword_declfirst_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _operator_assign_ == child )
        {
            _operator_assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_declfirst_ == oldChild )
        {
            SetKeywordDeclfirst ((TKeywordDeclfirst) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _operator_assign_ == oldChild )
        {
            SetOperatorAssign ((TOperatorAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AExpose : PExpose
{
    private TKeywordExpose _keyword_expose_;
    private TIdentifier _identifier_;
    private TNewline _newline_;

    public AExpose ()
    {
    }

    public AExpose (
            TKeywordExpose _keyword_expose_,
            TIdentifier _identifier_,
            TNewline _newline_
    )
    {
        SetKeywordExpose (_keyword_expose_);
        SetIdentifier (_identifier_);
        SetNewline (_newline_);
    }

    public override Object Clone()
    {
        return new AExpose (
            (TKeywordExpose)CloneNode (_keyword_expose_),
            (TIdentifier)CloneNode (_identifier_),
            (TNewline)CloneNode (_newline_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpose(this);
    }

    public TKeywordExpose GetKeywordExpose ()
    {
        return _keyword_expose_;
    }

    public void SetKeywordExpose (TKeywordExpose node)
    {
        if(_keyword_expose_ != null)
        {
            _keyword_expose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_expose_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_expose_)
            + ToString (_identifier_)
            + ToString (_newline_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_expose_ == child )
        {
            _keyword_expose_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_expose_ == oldChild )
        {
            SetKeywordExpose ((TKeywordExpose) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
    }

}
public sealed class AAExpression : PExpression
{
    private PAdd _add_;

    public AAExpression ()
    {
    }

    public AAExpression (
            PAdd _add_
    )
    {
        SetAdd (_add_);
    }

    public override Object Clone()
    {
        return new AAExpression (
            (PAdd)CloneNode (_add_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAExpression(this);
    }

    public PAdd GetAdd ()
    {
        return _add_;
    }

    public void SetAdd (PAdd node)
    {
        if(_add_ != null)
        {
            _add_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _add_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_add_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _add_ == child )
        {
            _add_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _add_ == oldChild )
        {
            SetAdd ((PAdd) newChild);
            return;
        }
    }

}
public sealed class ABExpression : PExpression
{
    private PBooleanlogic _booleanlogic_;

    public ABExpression ()
    {
    }

    public ABExpression (
            PBooleanlogic _booleanlogic_
    )
    {
        SetBooleanlogic (_booleanlogic_);
    }

    public override Object Clone()
    {
        return new ABExpression (
            (PBooleanlogic)CloneNode (_booleanlogic_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABExpression(this);
    }

    public PBooleanlogic GetBooleanlogic ()
    {
        return _booleanlogic_;
    }

    public void SetBooleanlogic (PBooleanlogic node)
    {
        if(_booleanlogic_ != null)
        {
            _booleanlogic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _booleanlogic_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_booleanlogic_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _booleanlogic_ == child )
        {
            _booleanlogic_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _booleanlogic_ == oldChild )
        {
            SetBooleanlogic ((PBooleanlogic) newChild);
            return;
        }
    }

}
public sealed class ACExpression : PExpression
{
    private PDeclareassign _declareassign_;

    public ACExpression ()
    {
    }

    public ACExpression (
            PDeclareassign _declareassign_
    )
    {
        SetDeclareassign (_declareassign_);
    }

    public override Object Clone()
    {
        return new ACExpression (
            (PDeclareassign)CloneNode (_declareassign_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACExpression(this);
    }

    public PDeclareassign GetDeclareassign ()
    {
        return _declareassign_;
    }

    public void SetDeclareassign (PDeclareassign node)
    {
        if(_declareassign_ != null)
        {
            _declareassign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declareassign_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declareassign_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declareassign_ == child )
        {
            _declareassign_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declareassign_ == oldChild )
        {
            SetDeclareassign ((PDeclareassign) newChild);
            return;
        }
    }

}
public sealed class ADExpression : PExpression
{
    private PDeclareempty _declareempty_;

    public ADExpression ()
    {
    }

    public ADExpression (
            PDeclareempty _declareempty_
    )
    {
        SetDeclareempty (_declareempty_);
    }

    public override Object Clone()
    {
        return new ADExpression (
            (PDeclareempty)CloneNode (_declareempty_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADExpression(this);
    }

    public PDeclareempty GetDeclareempty ()
    {
        return _declareempty_;
    }

    public void SetDeclareempty (PDeclareempty node)
    {
        if(_declareempty_ != null)
        {
            _declareempty_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declareempty_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declareempty_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declareempty_ == child )
        {
            _declareempty_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declareempty_ == oldChild )
        {
            SetDeclareempty ((PDeclareempty) newChild);
            return;
        }
    }

}
public sealed class AEExpression : PExpression
{
    private PDeclarefirst _declarefirst_;

    public AEExpression ()
    {
    }

    public AEExpression (
            PDeclarefirst _declarefirst_
    )
    {
        SetDeclarefirst (_declarefirst_);
    }

    public override Object Clone()
    {
        return new AEExpression (
            (PDeclarefirst)CloneNode (_declarefirst_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEExpression(this);
    }

    public PDeclarefirst GetDeclarefirst ()
    {
        return _declarefirst_;
    }

    public void SetDeclarefirst (PDeclarefirst node)
    {
        if(_declarefirst_ != null)
        {
            _declarefirst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirst_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarefirst_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarefirst_ == child )
        {
            _declarefirst_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarefirst_ == oldChild )
        {
            SetDeclarefirst ((PDeclarefirst) newChild);
            return;
        }
    }

}
public sealed class AFExpression : PExpression
{
    private PForrange _forrange_;

    public AFExpression ()
    {
    }

    public AFExpression (
            PForrange _forrange_
    )
    {
        SetForrange (_forrange_);
    }

    public override Object Clone()
    {
        return new AFExpression (
            (PForrange)CloneNode (_forrange_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFExpression(this);
    }

    public PForrange GetForrange ()
    {
        return _forrange_;
    }

    public void SetForrange (PForrange node)
    {
        if(_forrange_ != null)
        {
            _forrange_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _forrange_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_forrange_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _forrange_ == child )
        {
            _forrange_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _forrange_ == oldChild )
        {
            SetForrange ((PForrange) newChild);
            return;
        }
    }

}
public sealed class AGExpression : PExpression
{
    private PFunction _function_;

    public AGExpression ()
    {
    }

    public AGExpression (
            PFunction _function_
    )
    {
        SetFunction (_function_);
    }

    public override Object Clone()
    {
        return new AGExpression (
            (PFunction)CloneNode (_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGExpression(this);
    }

    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
    }

}
public sealed class AHExpression : PExpression
{
    private PIfelse _ifelse_;

    public AHExpression ()
    {
    }

    public AHExpression (
            PIfelse _ifelse_
    )
    {
        SetIfelse (_ifelse_);
    }

    public override Object Clone()
    {
        return new AHExpression (
            (PIfelse)CloneNode (_ifelse_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHExpression(this);
    }

    public PIfelse GetIfelse ()
    {
        return _ifelse_;
    }

    public void SetIfelse (PIfelse node)
    {
        if(_ifelse_ != null)
        {
            _ifelse_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifelse_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ifelse_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ifelse_ == child )
        {
            _ifelse_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ifelse_ == oldChild )
        {
            SetIfelse ((PIfelse) newChild);
            return;
        }
    }

}
public sealed class AIExpression : PExpression
{
    private PTest _test_;

    public AIExpression ()
    {
    }

    public AIExpression (
            PTest _test_
    )
    {
        SetTest (_test_);
    }

    public override Object Clone()
    {
        return new AIExpression (
            (PTest)CloneNode (_test_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIExpression(this);
    }

    public PTest GetTest ()
    {
        return _test_;
    }

    public void SetTest (PTest node)
    {
        if(_test_ != null)
        {
            _test_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _test_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_test_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _test_ == child )
        {
            _test_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _test_ == oldChild )
        {
            SetTest ((PTest) newChild);
            return;
        }
    }

}
public sealed class AExtractmember : PExtractmember
{
    private PSimple _simple_;
    private TOperatorExtractMember _operator_extract_member_;
    private TIdentifier _identifier_;

    public AExtractmember ()
    {
    }

    public AExtractmember (
            PSimple _simple_,
            TOperatorExtractMember _operator_extract_member_,
            TIdentifier _identifier_
    )
    {
        SetSimple (_simple_);
        SetOperatorExtractMember (_operator_extract_member_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AExtractmember (
            (PSimple)CloneNode (_simple_),
            (TOperatorExtractMember)CloneNode (_operator_extract_member_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExtractmember(this);
    }

    public PSimple GetSimple ()
    {
        return _simple_;
    }

    public void SetSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_ = node;
    }
    public TOperatorExtractMember GetOperatorExtractMember ()
    {
        return _operator_extract_member_;
    }

    public void SetOperatorExtractMember (TOperatorExtractMember node)
    {
        if(_operator_extract_member_ != null)
        {
            _operator_extract_member_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_extract_member_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_simple_)
            + ToString (_operator_extract_member_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
        if ( _operator_extract_member_ == child )
        {
            _operator_extract_member_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _simple_ == oldChild )
        {
            SetSimple ((PSimple) newChild);
            return;
        }
        if ( _operator_extract_member_ == oldChild )
        {
            SetOperatorExtractMember ((TOperatorExtractMember) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AForrange : PForrange
{
    private TKeywordFor _keyword_for_;
    private TIdentifier _identifier_;
    private TKeywordFrom _keyword_from_;
    private PSimple _a_;
    private TKeywordTo _keyword_to_;
    private PSimple _b_;
    private PBlock _block_;

    public AForrange ()
    {
    }

    public AForrange (
            TKeywordFor _keyword_for_,
            TIdentifier _identifier_,
            TKeywordFrom _keyword_from_,
            PSimple _a_,
            TKeywordTo _keyword_to_,
            PSimple _b_,
            PBlock _block_
    )
    {
        SetKeywordFor (_keyword_for_);
        SetIdentifier (_identifier_);
        SetKeywordFrom (_keyword_from_);
        SetA (_a_);
        SetKeywordTo (_keyword_to_);
        SetB (_b_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AForrange (
            (TKeywordFor)CloneNode (_keyword_for_),
            (TIdentifier)CloneNode (_identifier_),
            (TKeywordFrom)CloneNode (_keyword_from_),
            (PSimple)CloneNode (_a_),
            (TKeywordTo)CloneNode (_keyword_to_),
            (PSimple)CloneNode (_b_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForrange(this);
    }

    public TKeywordFor GetKeywordFor ()
    {
        return _keyword_for_;
    }

    public void SetKeywordFor (TKeywordFor node)
    {
        if(_keyword_for_ != null)
        {
            _keyword_for_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_for_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TKeywordFrom GetKeywordFrom ()
    {
        return _keyword_from_;
    }

    public void SetKeywordFrom (TKeywordFrom node)
    {
        if(_keyword_from_ != null)
        {
            _keyword_from_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_from_ = node;
    }
    public PSimple GetA ()
    {
        return _a_;
    }

    public void SetA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TKeywordTo GetKeywordTo ()
    {
        return _keyword_to_;
    }

    public void SetKeywordTo (TKeywordTo node)
    {
        if(_keyword_to_ != null)
        {
            _keyword_to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_to_ = node;
    }
    public PSimple GetB ()
    {
        return _b_;
    }

    public void SetB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_for_)
            + ToString (_identifier_)
            + ToString (_keyword_from_)
            + ToString (_a_)
            + ToString (_keyword_to_)
            + ToString (_b_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_for_ == child )
        {
            _keyword_for_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _keyword_from_ == child )
        {
            _keyword_from_ = null;
            return;
        }
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _keyword_to_ == child )
        {
            _keyword_to_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_for_ == oldChild )
        {
            SetKeywordFor ((TKeywordFor) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _keyword_from_ == oldChild )
        {
            SetKeywordFrom ((TKeywordFrom) newChild);
            return;
        }
        if ( _a_ == oldChild )
        {
            SetA ((PSimple) newChild);
            return;
        }
        if ( _keyword_to_ == oldChild )
        {
            SetKeywordTo ((TKeywordTo) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PSimple) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AFunction : PFunction
{
    private TKeywordFunc _keyword_func_;
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;
    private PType _type_;
    private PBlock _block_;

    public AFunction ()
    {
    }

    public AFunction (
            TKeywordFunc _keyword_func_,
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_,
            PType _type_,
            PBlock _block_
    )
    {
        SetKeywordFunc (_keyword_func_);
        SetOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        SetOperatorClosingParenthesis (_operator_closing_parenthesis_);
        SetType (_type_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AFunction (
            (TKeywordFunc)CloneNode (_keyword_func_),
            (TOperatorOpeningParenthesis)CloneNode (_operator_opening_parenthesis_),
            (TOperatorClosingParenthesis)CloneNode (_operator_closing_parenthesis_),
            (PType)CloneNode (_type_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunction(this);
    }

    public TKeywordFunc GetKeywordFunc ()
    {
        return _keyword_func_;
    }

    public void SetKeywordFunc (TKeywordFunc node)
    {
        if(_keyword_func_ != null)
        {
            _keyword_func_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_func_ = node;
    }
    public TOperatorOpeningParenthesis GetOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void SetOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public TOperatorClosingParenthesis GetOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void SetOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_func_)
            + ToString (_operator_opening_parenthesis_)
            + ToString (_operator_closing_parenthesis_)
            + ToString (_type_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_func_ == child )
        {
            _keyword_func_ = null;
            return;
        }
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_func_ == oldChild )
        {
            SetKeywordFunc ((TKeywordFunc) newChild);
            return;
        }
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            SetOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            SetOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AAType : PType
{
    private TKeywordDyn _keyword_dyn_;

    public AAType ()
    {
    }

    public AAType (
            TKeywordDyn _keyword_dyn_
    )
    {
        SetKeywordDyn (_keyword_dyn_);
    }

    public override Object Clone()
    {
        return new AAType (
            (TKeywordDyn)CloneNode (_keyword_dyn_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAType(this);
    }

    public TKeywordDyn GetKeywordDyn ()
    {
        return _keyword_dyn_;
    }

    public void SetKeywordDyn (TKeywordDyn node)
    {
        if(_keyword_dyn_ != null)
        {
            _keyword_dyn_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_dyn_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_dyn_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_dyn_ == child )
        {
            _keyword_dyn_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_dyn_ == oldChild )
        {
            SetKeywordDyn ((TKeywordDyn) newChild);
            return;
        }
    }

}
public sealed class ABType : PType
{
    private TKeywordVoid _keyword_void_;

    public ABType ()
    {
    }

    public ABType (
            TKeywordVoid _keyword_void_
    )
    {
        SetKeywordVoid (_keyword_void_);
    }

    public override Object Clone()
    {
        return new ABType (
            (TKeywordVoid)CloneNode (_keyword_void_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABType(this);
    }

    public TKeywordVoid GetKeywordVoid ()
    {
        return _keyword_void_;
    }

    public void SetKeywordVoid (TKeywordVoid node)
    {
        if(_keyword_void_ != null)
        {
            _keyword_void_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_void_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_void_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_void_ == child )
        {
            _keyword_void_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_void_ == oldChild )
        {
            SetKeywordVoid ((TKeywordVoid) newChild);
            return;
        }
    }

}
public sealed class AFunctiondeclaration : PFunctiondeclaration
{
    private TKeywordFunc _keyword_func_;
    private TIdentifier _identifier_;
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private PParameterlist _parameterlist_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;
    private PBlock _block_;

    public AFunctiondeclaration ()
    {
    }

    public AFunctiondeclaration (
            TKeywordFunc _keyword_func_,
            TIdentifier _identifier_,
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            PParameterlist _parameterlist_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_,
            PBlock _block_
    )
    {
        SetKeywordFunc (_keyword_func_);
        SetIdentifier (_identifier_);
        SetOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        SetParameterlist (_parameterlist_);
        SetOperatorClosingParenthesis (_operator_closing_parenthesis_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AFunctiondeclaration (
            (TKeywordFunc)CloneNode (_keyword_func_),
            (TIdentifier)CloneNode (_identifier_),
            (TOperatorOpeningParenthesis)CloneNode (_operator_opening_parenthesis_),
            (PParameterlist)CloneNode (_parameterlist_),
            (TOperatorClosingParenthesis)CloneNode (_operator_closing_parenthesis_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctiondeclaration(this);
    }

    public TKeywordFunc GetKeywordFunc ()
    {
        return _keyword_func_;
    }

    public void SetKeywordFunc (TKeywordFunc node)
    {
        if(_keyword_func_ != null)
        {
            _keyword_func_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_func_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TOperatorOpeningParenthesis GetOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void SetOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public PParameterlist GetParameterlist ()
    {
        return _parameterlist_;
    }

    public void SetParameterlist (PParameterlist node)
    {
        if(_parameterlist_ != null)
        {
            _parameterlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameterlist_ = node;
    }
    public TOperatorClosingParenthesis GetOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void SetOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_func_)
            + ToString (_identifier_)
            + ToString (_operator_opening_parenthesis_)
            + ToString (_parameterlist_)
            + ToString (_operator_closing_parenthesis_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_func_ == child )
        {
            _keyword_func_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _parameterlist_ == child )
        {
            _parameterlist_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_func_ == oldChild )
        {
            SetKeywordFunc ((TKeywordFunc) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            SetOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _parameterlist_ == oldChild )
        {
            SetParameterlist ((PParameterlist) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            SetOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AIfelse : PIfelse
{
    private PIf _if_;
    private PElif _elif_;
    private PElse _else_;

    public AIfelse ()
    {
    }

    public AIfelse (
            PIf _if_,
            PElif _elif_,
            PElse _else_
    )
    {
        SetIf (_if_);
        SetElif (_elif_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new AIfelse (
            (PIf)CloneNode (_if_),
            (PElif)CloneNode (_elif_),
            (PElse)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfelse(this);
    }

    public PIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (PIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public PElif GetElif ()
    {
        return _elif_;
    }

    public void SetElif (PElif node)
    {
        if(_elif_ != null)
        {
            _elif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elif_ = node;
    }
    public PElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (PElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_elif_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _elif_ == child )
        {
            _elif_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((PIf) newChild);
            return;
        }
        if ( _elif_ == oldChild )
        {
            SetElif ((PElif) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PElse) newChild);
            return;
        }
    }

}
public sealed class AAIfexpr : PIfexpr
{
    private PSimple _simple_;

    public AAIfexpr ()
    {
    }

    public AAIfexpr (
            PSimple _simple_
    )
    {
        SetSimple (_simple_);
    }

    public override Object Clone()
    {
        return new AAIfexpr (
            (PSimple)CloneNode (_simple_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAIfexpr(this);
    }

    public PSimple GetSimple ()
    {
        return _simple_;
    }

    public void SetSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_simple_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _simple_ == oldChild )
        {
            SetSimple ((PSimple) newChild);
            return;
        }
    }

}
public sealed class ABIfexpr : PIfexpr
{
    private PTest _test_;

    public ABIfexpr ()
    {
    }

    public ABIfexpr (
            PTest _test_
    )
    {
        SetTest (_test_);
    }

    public override Object Clone()
    {
        return new ABIfexpr (
            (PTest)CloneNode (_test_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABIfexpr(this);
    }

    public PTest GetTest ()
    {
        return _test_;
    }

    public void SetTest (PTest node)
    {
        if(_test_ != null)
        {
            _test_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _test_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_test_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _test_ == child )
        {
            _test_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _test_ == oldChild )
        {
            SetTest ((PTest) newChild);
            return;
        }
    }

}
public sealed class AIf : PIf
{
    private TKeywordIf _keyword_if_;
    private PIfexpr _ifexpr_;
    private PBlock _block_;

    public AIf ()
    {
    }

    public AIf (
            TKeywordIf _keyword_if_,
            PIfexpr _ifexpr_,
            PBlock _block_
    )
    {
        SetKeywordIf (_keyword_if_);
        SetIfexpr (_ifexpr_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AIf (
            (TKeywordIf)CloneNode (_keyword_if_),
            (PIfexpr)CloneNode (_ifexpr_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIf(this);
    }

    public TKeywordIf GetKeywordIf ()
    {
        return _keyword_if_;
    }

    public void SetKeywordIf (TKeywordIf node)
    {
        if(_keyword_if_ != null)
        {
            _keyword_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_if_ = node;
    }
    public PIfexpr GetIfexpr ()
    {
        return _ifexpr_;
    }

    public void SetIfexpr (PIfexpr node)
    {
        if(_ifexpr_ != null)
        {
            _ifexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifexpr_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_if_)
            + ToString (_ifexpr_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_if_ == child )
        {
            _keyword_if_ = null;
            return;
        }
        if ( _ifexpr_ == child )
        {
            _ifexpr_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_if_ == oldChild )
        {
            SetKeywordIf ((TKeywordIf) newChild);
            return;
        }
        if ( _ifexpr_ == oldChild )
        {
            SetIfexpr ((PIfexpr) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AAElif : PElif
{
    private TKeywordElif _keyword_elif_;
    private PIfexpr _ifexpr_;
    private PBlock _block_;

    public AAElif ()
    {
    }

    public AAElif (
            TKeywordElif _keyword_elif_,
            PIfexpr _ifexpr_,
            PBlock _block_
    )
    {
        SetKeywordElif (_keyword_elif_);
        SetIfexpr (_ifexpr_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AAElif (
            (TKeywordElif)CloneNode (_keyword_elif_),
            (PIfexpr)CloneNode (_ifexpr_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAElif(this);
    }

    public TKeywordElif GetKeywordElif ()
    {
        return _keyword_elif_;
    }

    public void SetKeywordElif (TKeywordElif node)
    {
        if(_keyword_elif_ != null)
        {
            _keyword_elif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_elif_ = node;
    }
    public PIfexpr GetIfexpr ()
    {
        return _ifexpr_;
    }

    public void SetIfexpr (PIfexpr node)
    {
        if(_ifexpr_ != null)
        {
            _ifexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifexpr_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_elif_)
            + ToString (_ifexpr_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_elif_ == child )
        {
            _keyword_elif_ = null;
            return;
        }
        if ( _ifexpr_ == child )
        {
            _ifexpr_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_elif_ == oldChild )
        {
            SetKeywordElif ((TKeywordElif) newChild);
            return;
        }
        if ( _ifexpr_ == oldChild )
        {
            SetIfexpr ((PIfexpr) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class ABElif : PElif
{
    private PElif _elif_;
    private TKeywordElif _keyword_elif_;
    private PIfexpr _ifexpr_;
    private PBlock _block_;

    public ABElif ()
    {
    }

    public ABElif (
            PElif _elif_,
            TKeywordElif _keyword_elif_,
            PIfexpr _ifexpr_,
            PBlock _block_
    )
    {
        SetElif (_elif_);
        SetKeywordElif (_keyword_elif_);
        SetIfexpr (_ifexpr_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new ABElif (
            (PElif)CloneNode (_elif_),
            (TKeywordElif)CloneNode (_keyword_elif_),
            (PIfexpr)CloneNode (_ifexpr_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABElif(this);
    }

    public PElif GetElif ()
    {
        return _elif_;
    }

    public void SetElif (PElif node)
    {
        if(_elif_ != null)
        {
            _elif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elif_ = node;
    }
    public TKeywordElif GetKeywordElif ()
    {
        return _keyword_elif_;
    }

    public void SetKeywordElif (TKeywordElif node)
    {
        if(_keyword_elif_ != null)
        {
            _keyword_elif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_elif_ = node;
    }
    public PIfexpr GetIfexpr ()
    {
        return _ifexpr_;
    }

    public void SetIfexpr (PIfexpr node)
    {
        if(_ifexpr_ != null)
        {
            _ifexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifexpr_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elif_)
            + ToString (_keyword_elif_)
            + ToString (_ifexpr_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elif_ == child )
        {
            _elif_ = null;
            return;
        }
        if ( _keyword_elif_ == child )
        {
            _keyword_elif_ = null;
            return;
        }
        if ( _ifexpr_ == child )
        {
            _ifexpr_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elif_ == oldChild )
        {
            SetElif ((PElif) newChild);
            return;
        }
        if ( _keyword_elif_ == oldChild )
        {
            SetKeywordElif ((TKeywordElif) newChild);
            return;
        }
        if ( _ifexpr_ == oldChild )
        {
            SetIfexpr ((PIfexpr) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AElse : PElse
{
    private TKeywordElse _keyword_else_;
    private PBlock _block_;

    public AElse ()
    {
    }

    public AElse (
            TKeywordElse _keyword_else_,
            PBlock _block_
    )
    {
        SetKeywordElse (_keyword_else_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AElse (
            (TKeywordElse)CloneNode (_keyword_else_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElse(this);
    }

    public TKeywordElse GetKeywordElse ()
    {
        return _keyword_else_;
    }

    public void SetKeywordElse (TKeywordElse node)
    {
        if(_keyword_else_ != null)
        {
            _keyword_else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_else_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_else_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_else_ == child )
        {
            _keyword_else_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_else_ == oldChild )
        {
            SetKeywordElse ((TKeywordElse) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AImport : PImport
{
    private TKeywordImport _keyword_import_;
    private TString _string_;
    private TNewline _newline_;

    public AImport ()
    {
    }

    public AImport (
            TKeywordImport _keyword_import_,
            TString _string_,
            TNewline _newline_
    )
    {
        SetKeywordImport (_keyword_import_);
        SetString (_string_);
        SetNewline (_newline_);
    }

    public override Object Clone()
    {
        return new AImport (
            (TKeywordImport)CloneNode (_keyword_import_),
            (TString)CloneNode (_string_),
            (TNewline)CloneNode (_newline_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAImport(this);
    }

    public TKeywordImport GetKeywordImport ()
    {
        return _keyword_import_;
    }

    public void SetKeywordImport (TKeywordImport node)
    {
        if(_keyword_import_ != null)
        {
            _keyword_import_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_import_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_import_)
            + ToString (_string_)
            + ToString (_newline_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_import_ == child )
        {
            _keyword_import_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_import_ == oldChild )
        {
            SetKeywordImport ((TKeywordImport) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
    }

}
public sealed class AAMult : PMult
{
    private PSimple _simple_;

    public AAMult ()
    {
    }

    public AAMult (
            PSimple _simple_
    )
    {
        SetSimple (_simple_);
    }

    public override Object Clone()
    {
        return new AAMult (
            (PSimple)CloneNode (_simple_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAMult(this);
    }

    public PSimple GetSimple ()
    {
        return _simple_;
    }

    public void SetSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_simple_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _simple_ == oldChild )
        {
            SetSimple ((PSimple) newChild);
            return;
        }
    }

}
public sealed class ABMult : PMult
{
    private PSimple _a_;
    private TOperatorTimes _operator_times_;
    private PSimple _b_;

    public ABMult ()
    {
    }

    public ABMult (
            PSimple _a_,
            TOperatorTimes _operator_times_,
            PSimple _b_
    )
    {
        SetA (_a_);
        SetOperatorTimes (_operator_times_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ABMult (
            (PSimple)CloneNode (_a_),
            (TOperatorTimes)CloneNode (_operator_times_),
            (PSimple)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABMult(this);
    }

    public PSimple GetA ()
    {
        return _a_;
    }

    public void SetA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TOperatorTimes GetOperatorTimes ()
    {
        return _operator_times_;
    }

    public void SetOperatorTimes (TOperatorTimes node)
    {
        if(_operator_times_ != null)
        {
            _operator_times_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_times_ = node;
    }
    public PSimple GetB ()
    {
        return _b_;
    }

    public void SetB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_operator_times_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _operator_times_ == child )
        {
            _operator_times_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PSimple) newChild);
            return;
        }
        if ( _operator_times_ == oldChild )
        {
            SetOperatorTimes ((TOperatorTimes) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PSimple) newChild);
            return;
        }
    }

}
public sealed class ACMult : PMult
{
    private PSimple _a_;
    private TOperatorDivide _operator_divide_;
    private PSimple _b_;

    public ACMult ()
    {
    }

    public ACMult (
            PSimple _a_,
            TOperatorDivide _operator_divide_,
            PSimple _b_
    )
    {
        SetA (_a_);
        SetOperatorDivide (_operator_divide_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ACMult (
            (PSimple)CloneNode (_a_),
            (TOperatorDivide)CloneNode (_operator_divide_),
            (PSimple)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACMult(this);
    }

    public PSimple GetA ()
    {
        return _a_;
    }

    public void SetA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TOperatorDivide GetOperatorDivide ()
    {
        return _operator_divide_;
    }

    public void SetOperatorDivide (TOperatorDivide node)
    {
        if(_operator_divide_ != null)
        {
            _operator_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_divide_ = node;
    }
    public PSimple GetB ()
    {
        return _b_;
    }

    public void SetB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_operator_divide_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _operator_divide_ == child )
        {
            _operator_divide_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PSimple) newChild);
            return;
        }
        if ( _operator_divide_ == oldChild )
        {
            SetOperatorDivide ((TOperatorDivide) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PSimple) newChild);
            return;
        }
    }

}
public sealed class AParameter : PParameter
{
    private TIdentifier _identifier_;

    public AParameter ()
    {
    }

    public AParameter (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AParameter (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameter(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AAParameterlist : PParameterlist
{
    private PParameter _parameter_;

    public AAParameterlist ()
    {
    }

    public AAParameterlist (
            PParameter _parameter_
    )
    {
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new AAParameterlist (
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAParameterlist(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class ABParameterlist : PParameterlist
{
    private PParameterlist _parameterlist_;
    private TOperatorComma _operator_comma_;
    private PParameter _parameter_;

    public ABParameterlist ()
    {
    }

    public ABParameterlist (
            PParameterlist _parameterlist_,
            TOperatorComma _operator_comma_,
            PParameter _parameter_
    )
    {
        SetParameterlist (_parameterlist_);
        SetOperatorComma (_operator_comma_);
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new ABParameterlist (
            (PParameterlist)CloneNode (_parameterlist_),
            (TOperatorComma)CloneNode (_operator_comma_),
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABParameterlist(this);
    }

    public PParameterlist GetParameterlist ()
    {
        return _parameterlist_;
    }

    public void SetParameterlist (PParameterlist node)
    {
        if(_parameterlist_ != null)
        {
            _parameterlist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameterlist_ = node;
    }
    public TOperatorComma GetOperatorComma ()
    {
        return _operator_comma_;
    }

    public void SetOperatorComma (TOperatorComma node)
    {
        if(_operator_comma_ != null)
        {
            _operator_comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_comma_ = node;
    }
    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameterlist_)
            + ToString (_operator_comma_)
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameterlist_ == child )
        {
            _parameterlist_ = null;
            return;
        }
        if ( _operator_comma_ == child )
        {
            _operator_comma_ = null;
            return;
        }
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameterlist_ == oldChild )
        {
            SetParameterlist ((PParameterlist) newChild);
            return;
        }
        if ( _operator_comma_ == oldChild )
        {
            SetOperatorComma ((TOperatorComma) newChild);
            return;
        }
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class AParenthetical : PParenthetical
{
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private PExpression _expression_;
    private TNewline _newline_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;

    public AParenthetical ()
    {
    }

    public AParenthetical (
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            PExpression _expression_,
            TNewline _newline_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_
    )
    {
        SetOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        SetExpression (_expression_);
        SetNewline (_newline_);
        SetOperatorClosingParenthesis (_operator_closing_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParenthetical (
            (TOperatorOpeningParenthesis)CloneNode (_operator_opening_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TNewline)CloneNode (_newline_),
            (TOperatorClosingParenthesis)CloneNode (_operator_closing_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthetical(this);
    }

    public TOperatorOpeningParenthesis GetOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void SetOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }
    public TOperatorClosingParenthesis GetOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void SetOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operator_opening_parenthesis_)
            + ToString (_expression_)
            + ToString (_newline_)
            + ToString (_operator_closing_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            SetOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            SetOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
    }

}
public sealed class AAPrimary : PPrimary
{
    private TIdentifier _identifier_;

    public AAPrimary ()
    {
    }

    public AAPrimary (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AAPrimary (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAPrimary(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class ABPrimary : PPrimary
{
    private TInteger _integer_;

    public ABPrimary ()
    {
    }

    public ABPrimary (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new ABPrimary (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABPrimary(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class ACPrimary : PPrimary
{
    private TRational _rational_;

    public ACPrimary ()
    {
    }

    public ACPrimary (
            TRational _rational_
    )
    {
        SetRational (_rational_);
    }

    public override Object Clone()
    {
        return new ACPrimary (
            (TRational)CloneNode (_rational_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACPrimary(this);
    }

    public TRational GetRational ()
    {
        return _rational_;
    }

    public void SetRational (TRational node)
    {
        if(_rational_ != null)
        {
            _rational_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rational_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rational_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rational_ == child )
        {
            _rational_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rational_ == oldChild )
        {
            SetRational ((TRational) newChild);
            return;
        }
    }

}
public sealed class ADPrimary : PPrimary
{
    private TString _string_;

    public ADPrimary ()
    {
    }

    public ADPrimary (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new ADPrimary (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADPrimary(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AEPrimary : PPrimary
{
    private PParenthetical _parenthetical_;

    public AEPrimary ()
    {
    }

    public AEPrimary (
            PParenthetical _parenthetical_
    )
    {
        SetParenthetical (_parenthetical_);
    }

    public override Object Clone()
    {
        return new AEPrimary (
            (PParenthetical)CloneNode (_parenthetical_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEPrimary(this);
    }

    public PParenthetical GetParenthetical ()
    {
        return _parenthetical_;
    }

    public void SetParenthetical (PParenthetical node)
    {
        if(_parenthetical_ != null)
        {
            _parenthetical_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parenthetical_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parenthetical_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parenthetical_ == child )
        {
            _parenthetical_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parenthetical_ == oldChild )
        {
            SetParenthetical ((PParenthetical) newChild);
            return;
        }
    }

}
public sealed class AAScopealteration : PScopealteration
{
    private PExpose _expose_;

    public AAScopealteration ()
    {
    }

    public AAScopealteration (
            PExpose _expose_
    )
    {
        SetExpose (_expose_);
    }

    public override Object Clone()
    {
        return new AAScopealteration (
            (PExpose)CloneNode (_expose_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAScopealteration(this);
    }

    public PExpose GetExpose ()
    {
        return _expose_;
    }

    public void SetExpose (PExpose node)
    {
        if(_expose_ != null)
        {
            _expose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expose_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expose_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expose_ == child )
        {
            _expose_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expose_ == oldChild )
        {
            SetExpose ((PExpose) newChild);
            return;
        }
    }

}
public sealed class ABScopealteration : PScopealteration
{
    private PUsing _using_;

    public ABScopealteration ()
    {
    }

    public ABScopealteration (
            PUsing _using_
    )
    {
        SetUsing (_using_);
    }

    public override Object Clone()
    {
        return new ABScopealteration (
            (PUsing)CloneNode (_using_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABScopealteration(this);
    }

    public PUsing GetUsing ()
    {
        return _using_;
    }

    public void SetUsing (PUsing node)
    {
        if(_using_ != null)
        {
            _using_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _using_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_using_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _using_ == child )
        {
            _using_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _using_ == oldChild )
        {
            SetUsing ((PUsing) newChild);
            return;
        }
    }

}
public sealed class AASimple : PSimple
{
    private PBlock _block_;

    public AASimple ()
    {
    }

    public AASimple (
            PBlock _block_
    )
    {
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AASimple (
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAASimple(this);
    }

    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class ABSimple : PSimple
{
    private PCall _call_;

    public ABSimple ()
    {
    }

    public ABSimple (
            PCall _call_
    )
    {
        SetCall (_call_);
    }

    public override Object Clone()
    {
        return new ABSimple (
            (PCall)CloneNode (_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABSimple(this);
    }

    public PCall GetCall ()
    {
        return _call_;
    }

    public void SetCall (PCall node)
    {
        if(_call_ != null)
        {
            _call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _call_ == child )
        {
            _call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _call_ == oldChild )
        {
            SetCall ((PCall) newChild);
            return;
        }
    }

}
public sealed class ACSimple : PSimple
{
    private PExtractmember _extractmember_;

    public ACSimple ()
    {
    }

    public ACSimple (
            PExtractmember _extractmember_
    )
    {
        SetExtractmember (_extractmember_);
    }

    public override Object Clone()
    {
        return new ACSimple (
            (PExtractmember)CloneNode (_extractmember_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACSimple(this);
    }

    public PExtractmember GetExtractmember ()
    {
        return _extractmember_;
    }

    public void SetExtractmember (PExtractmember node)
    {
        if(_extractmember_ != null)
        {
            _extractmember_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _extractmember_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_extractmember_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _extractmember_ == child )
        {
            _extractmember_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _extractmember_ == oldChild )
        {
            SetExtractmember ((PExtractmember) newChild);
            return;
        }
    }

}
public sealed class ADSimple : PSimple
{
    private PPrimary _primary_;

    public ADSimple ()
    {
    }

    public ADSimple (
            PPrimary _primary_
    )
    {
        SetPrimary (_primary_);
    }

    public override Object Clone()
    {
        return new ADSimple (
            (PPrimary)CloneNode (_primary_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADSimple(this);
    }

    public PPrimary GetPrimary ()
    {
        return _primary_;
    }

    public void SetPrimary (PPrimary node)
    {
        if(_primary_ != null)
        {
            _primary_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _primary_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_primary_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _primary_ == child )
        {
            _primary_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _primary_ == oldChild )
        {
            SetPrimary ((PPrimary) newChild);
            return;
        }
    }

}
public sealed class ATest : PTest
{
    private PSimple _a_;
    private PComparisonfunction _comparisonfunction_;
    private PSimple _b_;

    public ATest ()
    {
    }

    public ATest (
            PSimple _a_,
            PComparisonfunction _comparisonfunction_,
            PSimple _b_
    )
    {
        SetA (_a_);
        SetComparisonfunction (_comparisonfunction_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ATest (
            (PSimple)CloneNode (_a_),
            (PComparisonfunction)CloneNode (_comparisonfunction_),
            (PSimple)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATest(this);
    }

    public PSimple GetA ()
    {
        return _a_;
    }

    public void SetA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public PComparisonfunction GetComparisonfunction ()
    {
        return _comparisonfunction_;
    }

    public void SetComparisonfunction (PComparisonfunction node)
    {
        if(_comparisonfunction_ != null)
        {
            _comparisonfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparisonfunction_ = node;
    }
    public PSimple GetB ()
    {
        return _b_;
    }

    public void SetB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_comparisonfunction_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _comparisonfunction_ == child )
        {
            _comparisonfunction_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PSimple) newChild);
            return;
        }
        if ( _comparisonfunction_ == oldChild )
        {
            SetComparisonfunction ((PComparisonfunction) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PSimple) newChild);
            return;
        }
    }

}
public sealed class AAComparisonfunction : PComparisonfunction
{
    private TKeywordLt _keyword_lt_;

    public AAComparisonfunction ()
    {
    }

    public AAComparisonfunction (
            TKeywordLt _keyword_lt_
    )
    {
        SetKeywordLt (_keyword_lt_);
    }

    public override Object Clone()
    {
        return new AAComparisonfunction (
            (TKeywordLt)CloneNode (_keyword_lt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAComparisonfunction(this);
    }

    public TKeywordLt GetKeywordLt ()
    {
        return _keyword_lt_;
    }

    public void SetKeywordLt (TKeywordLt node)
    {
        if(_keyword_lt_ != null)
        {
            _keyword_lt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_lt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_lt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_lt_ == child )
        {
            _keyword_lt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_lt_ == oldChild )
        {
            SetKeywordLt ((TKeywordLt) newChild);
            return;
        }
    }

}
public sealed class ABComparisonfunction : PComparisonfunction
{
    private TKeywordLte _keyword_lte_;

    public ABComparisonfunction ()
    {
    }

    public ABComparisonfunction (
            TKeywordLte _keyword_lte_
    )
    {
        SetKeywordLte (_keyword_lte_);
    }

    public override Object Clone()
    {
        return new ABComparisonfunction (
            (TKeywordLte)CloneNode (_keyword_lte_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABComparisonfunction(this);
    }

    public TKeywordLte GetKeywordLte ()
    {
        return _keyword_lte_;
    }

    public void SetKeywordLte (TKeywordLte node)
    {
        if(_keyword_lte_ != null)
        {
            _keyword_lte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_lte_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_lte_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_lte_ == child )
        {
            _keyword_lte_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_lte_ == oldChild )
        {
            SetKeywordLte ((TKeywordLte) newChild);
            return;
        }
    }

}
public sealed class ACComparisonfunction : PComparisonfunction
{
    private TKeywordEql _keyword_eql_;

    public ACComparisonfunction ()
    {
    }

    public ACComparisonfunction (
            TKeywordEql _keyword_eql_
    )
    {
        SetKeywordEql (_keyword_eql_);
    }

    public override Object Clone()
    {
        return new ACComparisonfunction (
            (TKeywordEql)CloneNode (_keyword_eql_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACComparisonfunction(this);
    }

    public TKeywordEql GetKeywordEql ()
    {
        return _keyword_eql_;
    }

    public void SetKeywordEql (TKeywordEql node)
    {
        if(_keyword_eql_ != null)
        {
            _keyword_eql_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_eql_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_eql_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_eql_ == child )
        {
            _keyword_eql_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_eql_ == oldChild )
        {
            SetKeywordEql ((TKeywordEql) newChild);
            return;
        }
    }

}
public sealed class ADComparisonfunction : PComparisonfunction
{
    private TKeywordGte _keyword_gte_;

    public ADComparisonfunction ()
    {
    }

    public ADComparisonfunction (
            TKeywordGte _keyword_gte_
    )
    {
        SetKeywordGte (_keyword_gte_);
    }

    public override Object Clone()
    {
        return new ADComparisonfunction (
            (TKeywordGte)CloneNode (_keyword_gte_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADComparisonfunction(this);
    }

    public TKeywordGte GetKeywordGte ()
    {
        return _keyword_gte_;
    }

    public void SetKeywordGte (TKeywordGte node)
    {
        if(_keyword_gte_ != null)
        {
            _keyword_gte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_gte_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_gte_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_gte_ == child )
        {
            _keyword_gte_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_gte_ == oldChild )
        {
            SetKeywordGte ((TKeywordGte) newChild);
            return;
        }
    }

}
public sealed class AEComparisonfunction : PComparisonfunction
{
    private TKeywordGt _keyword_gt_;

    public AEComparisonfunction ()
    {
    }

    public AEComparisonfunction (
            TKeywordGt _keyword_gt_
    )
    {
        SetKeywordGt (_keyword_gt_);
    }

    public override Object Clone()
    {
        return new AEComparisonfunction (
            (TKeywordGt)CloneNode (_keyword_gt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEComparisonfunction(this);
    }

    public TKeywordGt GetKeywordGt ()
    {
        return _keyword_gt_;
    }

    public void SetKeywordGt (TKeywordGt node)
    {
        if(_keyword_gt_ != null)
        {
            _keyword_gt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_gt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_gt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_gt_ == child )
        {
            _keyword_gt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_gt_ == oldChild )
        {
            SetKeywordGt ((TKeywordGt) newChild);
            return;
        }
    }

}
public sealed class AFComparisonfunction : PComparisonfunction
{
    private TKeywordDne _keyword_dne_;

    public AFComparisonfunction ()
    {
    }

    public AFComparisonfunction (
            TKeywordDne _keyword_dne_
    )
    {
        SetKeywordDne (_keyword_dne_);
    }

    public override Object Clone()
    {
        return new AFComparisonfunction (
            (TKeywordDne)CloneNode (_keyword_dne_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFComparisonfunction(this);
    }

    public TKeywordDne GetKeywordDne ()
    {
        return _keyword_dne_;
    }

    public void SetKeywordDne (TKeywordDne node)
    {
        if(_keyword_dne_ != null)
        {
            _keyword_dne_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_dne_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_dne_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_dne_ == child )
        {
            _keyword_dne_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_dne_ == oldChild )
        {
            SetKeywordDne ((TKeywordDne) newChild);
            return;
        }
    }

}
public sealed class AUsing : PUsing
{
    private TKeywordUsing _keyword_using_;
    private TIdentifier _identifier_;
    private TNewline _newline_;

    public AUsing ()
    {
    }

    public AUsing (
            TKeywordUsing _keyword_using_,
            TIdentifier _identifier_,
            TNewline _newline_
    )
    {
        SetKeywordUsing (_keyword_using_);
        SetIdentifier (_identifier_);
        SetNewline (_newline_);
    }

    public override Object Clone()
    {
        return new AUsing (
            (TKeywordUsing)CloneNode (_keyword_using_),
            (TIdentifier)CloneNode (_identifier_),
            (TNewline)CloneNode (_newline_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUsing(this);
    }

    public TKeywordUsing GetKeywordUsing ()
    {
        return _keyword_using_;
    }

    public void SetKeywordUsing (TKeywordUsing node)
    {
        if(_keyword_using_ != null)
        {
            _keyword_using_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_using_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TNewline GetNewline ()
    {
        return _newline_;
    }

    public void SetNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _newline_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_using_)
            + ToString (_identifier_)
            + ToString (_newline_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_using_ == child )
        {
            _keyword_using_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_using_ == oldChild )
        {
            SetKeywordUsing ((TKeywordUsing) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            SetNewline ((TNewline) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PDocument _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PDocument _base_,
        EOF _eof_)
    {
        SetPDocument(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PDocument) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PDocument GetPDocument()
    {
        return _base_;
    }
    public void SetPDocument(PDocument node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPDocument((PDocument) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
