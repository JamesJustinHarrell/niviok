/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Dextr.Sablecc.analysis;

namespace Dextr.Sablecc.node {


public sealed class TOperatorMinus : Token
{
    public TOperatorMinus(string text)
    {
        Text = text;
    }

    public TOperatorMinus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorMinus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorMinus(this);
    }
}

public sealed class TOperatorPlus : Token
{
    public TOperatorPlus(string text)
    {
        Text = text;
    }

    public TOperatorPlus(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorPlus(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorPlus(this);
    }
}

public sealed class TOperatorClosingParenthesis : Token
{
    public TOperatorClosingParenthesis(string text)
    {
        Text = text;
    }

    public TOperatorClosingParenthesis(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorClosingParenthesis(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorClosingParenthesis(this);
    }
}

public sealed class TKeywordLt : Token
{
    public TKeywordLt(string text)
    {
        Text = text;
    }

    public TKeywordLt(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordLt(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordLt(this);
    }
}

public sealed class TKeywordFor : Token
{
    public TKeywordFor(string text)
    {
        Text = text;
    }

    public TKeywordFor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordFor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordFor(this);
    }
}

public sealed class TKeywordOr : Token
{
    public TKeywordOr(string text)
    {
        Text = text;
    }

    public TKeywordOr(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordOr(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordOr(this);
    }
}

public sealed class TKeywordDyn : Token
{
    public TKeywordDyn(string text)
    {
        Text = text;
    }

    public TKeywordDyn(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordDyn(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordDyn(this);
    }
}

public sealed class TOperatorTimes : Token
{
    public TOperatorTimes(string text)
    {
        Text = text;
    }

    public TOperatorTimes(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorTimes(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorTimes(this);
    }
}

public sealed class TKeywordImport : Token
{
    public TKeywordImport(string text)
    {
        Text = text;
    }

    public TKeywordImport(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordImport(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordImport(this);
    }
}

public sealed class TKeywordNand : Token
{
    public TKeywordNand(string text)
    {
        Text = text;
    }

    public TKeywordNand(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordNand(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordNand(this);
    }
}

public sealed class TKeywordGte : Token
{
    public TKeywordGte(string text)
    {
        Text = text;
    }

    public TKeywordGte(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordGte(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordGte(this);
    }
}

public sealed class TKeywordDne : Token
{
    public TKeywordDne(string text)
    {
        Text = text;
    }

    public TKeywordDne(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordDne(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordDne(this);
    }
}

public sealed class TKeywordPlane : Token
{
    public TKeywordPlane(string text)
    {
        Text = text;
    }

    public TKeywordPlane(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordPlane(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordPlane(this);
    }
}

public sealed class TOperatorClosingBrace : Token
{
    public TOperatorClosingBrace(string text)
    {
        Text = text;
    }

    public TOperatorClosingBrace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorClosingBrace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorClosingBrace(this);
    }
}

public sealed class TKeywordFrom : Token
{
    public TKeywordFrom(string text)
    {
        Text = text;
    }

    public TKeywordFrom(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordFrom(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordFrom(this);
    }
}

public sealed class TKeywordElse : Token
{
    public TKeywordElse(string text)
    {
        Text = text;
    }

    public TKeywordElse(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordElse(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordElse(this);
    }
}

public sealed class TKeywordElif : Token
{
    public TKeywordElif(string text)
    {
        Text = text;
    }

    public TKeywordElif(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordElif(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordElif(this);
    }
}

public sealed class TOperatorDivide : Token
{
    public TOperatorDivide(string text)
    {
        Text = text;
    }

    public TOperatorDivide(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorDivide(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorDivide(this);
    }
}

public sealed class TKeywordDeclfirst : Token
{
    public TKeywordDeclfirst(string text)
    {
        Text = text;
    }

    public TKeywordDeclfirst(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordDeclfirst(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordDeclfirst(this);
    }
}

public sealed class TKeywordGt : Token
{
    public TKeywordGt(string text)
    {
        Text = text;
    }

    public TKeywordGt(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordGt(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordGt(this);
    }
}

public sealed class TOperatorOpeningBrace : Token
{
    public TOperatorOpeningBrace(string text)
    {
        Text = text;
    }

    public TOperatorOpeningBrace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorOpeningBrace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorOpeningBrace(this);
    }
}

public sealed class TKeywordIf : Token
{
    public TKeywordIf(string text)
    {
        Text = text;
    }

    public TKeywordIf(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordIf(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordIf(this);
    }
}

public sealed class TOperatorOpeningParenthesis : Token
{
    public TOperatorOpeningParenthesis(string text)
    {
        Text = text;
    }

    public TOperatorOpeningParenthesis(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorOpeningParenthesis(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorOpeningParenthesis(this);
    }
}

public sealed class TKeywordVoid : Token
{
    public TKeywordVoid(string text)
    {
        Text = text;
    }

    public TKeywordVoid(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordVoid(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordVoid(this);
    }
}

public sealed class TKeywordAnd : Token
{
    public TKeywordAnd(string text)
    {
        Text = text;
    }

    public TKeywordAnd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordAnd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordAnd(this);
    }
}

public sealed class TKeywordXnor : Token
{
    public TKeywordXnor(string text)
    {
        Text = text;
    }

    public TKeywordXnor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordXnor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordXnor(this);
    }
}

public sealed class TKeywordXor : Token
{
    public TKeywordXor(string text)
    {
        Text = text;
    }

    public TKeywordXor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordXor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordXor(this);
    }
}

public sealed class TKeywordNor : Token
{
    public TKeywordNor(string text)
    {
        Text = text;
    }

    public TKeywordNor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordNor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordNor(this);
    }
}

public sealed class TKeywordEql : Token
{
    public TKeywordEql(string text)
    {
        Text = text;
    }

    public TKeywordEql(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordEql(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordEql(this);
    }
}

public sealed class TKeywordTo : Token
{
    public TKeywordTo(string text)
    {
        Text = text;
    }

    public TKeywordTo(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordTo(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordTo(this);
    }
}

public sealed class TOperatorAssign : Token
{
    public TOperatorAssign(string text)
    {
        Text = text;
    }

    public TOperatorAssign(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorAssign(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorAssign(this);
    }
}

public sealed class TKeywordDecl : Token
{
    public TKeywordDecl(string text)
    {
        Text = text;
    }

    public TKeywordDecl(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordDecl(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordDecl(this);
    }
}

public sealed class TKeywordFunc : Token
{
    public TKeywordFunc(string text)
    {
        Text = text;
    }

    public TKeywordFunc(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordFunc(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordFunc(this);
    }
}

public sealed class TKeywordLte : Token
{
    public TKeywordLte(string text)
    {
        Text = text;
    }

    public TKeywordLte(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordLte(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordLte(this);
    }
}

public sealed class TKeywordUsing : Token
{
    public TKeywordUsing(string text)
    {
        Text = text;
    }

    public TKeywordUsing(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordUsing(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordUsing(this);
    }
}

public sealed class TKeywordExpose : Token
{
    public TKeywordExpose(string text)
    {
        Text = text;
    }

    public TKeywordExpose(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKeywordExpose(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKeywordExpose(this);
    }
}

public sealed class TOperatorExtractMember : Token
{
    public TOperatorExtractMember(string text)
    {
        Text = text;
    }

    public TOperatorExtractMember(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorExtractMember(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorExtractMember(this);
    }
}

public sealed class TOperatorComma : Token
{
    public TOperatorComma(string text)
    {
        Text = text;
    }

    public TOperatorComma(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOperatorComma(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOperatorComma(this);
    }
}

public sealed class TNewline : Token
{
    public TNewline(string text)
    {
        Text = text;
    }

    public TNewline(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TNewline(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTNewline(this);
    }
}

public sealed class TIdentifier : Token
{
    public TIdentifier(string text)
    {
        Text = text;
    }

    public TIdentifier(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIdentifier(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIdentifier(this);
    }
}

public sealed class TInteger : Token
{
    public TInteger(string text)
    {
        Text = text;
    }

    public TInteger(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TInteger(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTInteger(this);
    }
}

public sealed class TRational : Token
{
    public TRational(string text)
    {
        Text = text;
    }

    public TRational(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRational(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRational(this);
    }
}

public sealed class TString : Token
{
    public TString(string text)
    {
        Text = text;
    }

    public TString(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TString(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTString(this);
    }
}

public sealed class TTab : Token
{
    public TTab(string text)
    {
        Text = text;
    }

    public TTab(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTab(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTab(this);
    }
}

public sealed class TSpace : Token
{
    public TSpace(string text)
    {
        Text = text;
    }

    public TSpace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSpace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSpace(this);
    }
}

public sealed class TLineComment : Token
{
    public TLineComment(string text)
    {
        Text = text;
    }

    public TLineComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TLineComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTLineComment(this);
    }
}

public sealed class TMultilineComment : Token
{
    public TMultilineComment(string text)
    {
        Text = text;
    }

    public TMultilineComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TMultilineComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTMultilineComment(this);
    }
}

public sealed class TIndentOpen : Token
{
    public TIndentOpen(string text)
    {
        Text = text;
    }

    public TIndentOpen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIndentOpen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIndentOpen(this);
    }
}

public sealed class TIndentClose : Token
{
    public TIndentClose(string text)
    {
        Text = text;
    }

    public TIndentClose(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIndentClose(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIndentClose(this);
    }
}


public abstract class Token : Node
{
    private string text;
    private int line;
    private int pos;

    public virtual string Text
    {
      get { return text; }
      set { text = value; }
    }

    public int Line
    {
      get { return line; }
      set { line = value; }
    }

    public int Pos
    {
      get { return pos; }
      set { pos = value; }
    }

    public override string ToString()
    {
        return text + " ";
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }
}

public sealed class EOF : Token
{
    public EOF()
    {
        Text = "";
    }

    public EOF(int line, int pos)
    {
        Text = "";
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
        return new EOF(Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseEOF(this);
    }
}
}
