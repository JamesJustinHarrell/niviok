/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.lexer;

import java.io.*;
import java.util.*;
import Dextr.Sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TOperatorMinus(line, pos); }
    Token new1(int line, int pos) { return new TOperatorPlus(line, pos); }
    Token new2(int line, int pos) { return new TOperatorClosingParenthesis(line, pos); }
    Token new3(int line, int pos) { return new TKeywordLt(line, pos); }
    Token new4(int line, int pos) { return new TKeywordFor(line, pos); }
    Token new5(int line, int pos) { return new TKeywordOr(line, pos); }
    Token new6(int line, int pos) { return new TKeywordDyn(line, pos); }
    Token new7(int line, int pos) { return new TOperatorTimes(line, pos); }
    Token new8(int line, int pos) { return new TKeywordImport(line, pos); }
    Token new9(int line, int pos) { return new TKeywordNand(line, pos); }
    Token new10(int line, int pos) { return new TKeywordGte(line, pos); }
    Token new11(int line, int pos) { return new TKeywordDne(line, pos); }
    Token new12(int line, int pos) { return new TKeywordPlane(line, pos); }
    Token new13(int line, int pos) { return new TOperatorClosingBrace(line, pos); }
    Token new14(int line, int pos) { return new TKeywordFrom(line, pos); }
    Token new15(int line, int pos) { return new TKeywordElse(line, pos); }
    Token new16(int line, int pos) { return new TKeywordElif(line, pos); }
    Token new17(int line, int pos) { return new TOperatorDivide(line, pos); }
    Token new18(int line, int pos) { return new TKeywordDeclfirst(line, pos); }
    Token new19(int line, int pos) { return new TKeywordGt(line, pos); }
    Token new20(int line, int pos) { return new TOperatorOpeningBrace(line, pos); }
    Token new21(int line, int pos) { return new TKeywordIf(line, pos); }
    Token new22(int line, int pos) { return new TOperatorOpeningParenthesis(line, pos); }
    Token new23(int line, int pos) { return new TKeywordVoid(line, pos); }
    Token new24(int line, int pos) { return new TKeywordAnd(line, pos); }
    Token new25(int line, int pos) { return new TKeywordXnor(line, pos); }
    Token new26(int line, int pos) { return new TKeywordXor(line, pos); }
    Token new27(int line, int pos) { return new TKeywordNor(line, pos); }
    Token new28(int line, int pos) { return new TKeywordEql(line, pos); }
    Token new29(int line, int pos) { return new TKeywordTo(line, pos); }
    Token new30(int line, int pos) { return new TOperatorAssign(line, pos); }
    Token new31(int line, int pos) { return new TKeywordDecl(line, pos); }
    Token new32(int line, int pos) { return new TKeywordFunc(line, pos); }
    Token new33(int line, int pos) { return new TKeywordLte(line, pos); }
    Token new34(int line, int pos) { return new TKeywordUsing(line, pos); }
    Token new35(int line, int pos) { return new TKeywordExpose(line, pos); }
    Token new36(int line, int pos) { return new TOperatorExtractMember(line, pos); }
    Token new37(int line, int pos) { return new TOperatorComma(line, pos); }
    Token new38(String text, int line, int pos) { return new TNewline(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TInteger(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TRational(text, line, pos); }
    Token new42(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TTab(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TSpace(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TLineComment(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TMultilineComment(text, line, pos); }
    Token new47(int line, int pos) { return new TIndentOpen(line, pos); }
    Token new48(int line, int pos) { return new TIndentClose(line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }


    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable; /* = {
      {
        {
          {9, 9, 1},
          {10, 10, 2},
          {11, 12, 3},
          {13, 13, 2},
          {14, 31, 3},
          {32, 32, 4},
          {33, 33, 3},
          {34, 34, 5},
          {35, 35, 6},
          {36, 38, 3},
          {40, 40, 7},
          {41, 41, 8},
          {42, 42, 9},
          {43, 43, 10},
          {44, 44, 11},
          {45, 45, 12},
          {46, 46, 13},
          {47, 47, 14},
          {48, 57, 15},
          {58, 59, 3},
          {61, 61, 16},
          {63, 90, 3},
          {92, 92, 3},
          {94, 96, 3},
          {97, 97, 17},
          {98, 99, 3},
          {100, 100, 18},
          {101, 101, 19},
          {102, 102, 20},
          {103, 103, 21},
          {104, 104, 3},
          {105, 105, 22},
          {106, 107, 3},
          {108, 108, 23},
          {109, 109, 3},
          {110, 110, 24},
          {111, 111, 25},
          {112, 112, 26},
          {113, 115, 3},
          {116, 116, 27},
          {117, 117, 28},
          {118, 118, 29},
          {119, 119, 3},
          {120, 120, 30},
          {121, 122, 3},
          {123, 123, 31},
          {124, 124, 3},
          {125, 125, 32},
          {126, 65535, 3},
        },
        {
        },
        {
        },
        {
          {11, 12, 33},
          {14, 31, 33},
          {33, 33, 33},
          {36, 38, 33},
          {48, 57, 34},
          {58, 59, 33},
          {63, 90, 33},
          {92, 92, 33},
          {94, 122, 33},
          {124, 124, 33},
          {126, 65535, 33},
        },
        {
        },
        {
          {9, 33, 35},
          {34, 34, 36},
          {35, 47, 35},
          {58, 65535, 35},
        },
        {
          {9, 9, 37},
          {11, 12, 37},
          {14, 65535, 37},
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
          {42, 42, 38},
        },
        {
          {46, 46, 39},
          {48, 57, 15},
        },
        {
        },
        {
          {11, 92, -5},
          {94, 109, 33},
          {110, 110, 40},
          {111, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 100, 33},
          {101, 101, 41},
          {102, 109, 33},
          {110, 110, 42},
          {111, 120, 33},
          {121, 121, 43},
          {122, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 107, 33},
          {108, 108, 44},
          {109, 112, 33},
          {113, 113, 45},
          {114, 119, 33},
          {120, 120, 46},
          {121, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 110, 33},
          {111, 111, 47},
          {112, 113, 33},
          {114, 114, 48},
          {115, 116, 33},
          {117, 117, 49},
          {118, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 115, 33},
          {116, 116, 50},
          {117, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 101, 33},
          {102, 102, 51},
          {103, 108, 33},
          {109, 109, 52},
          {110, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 115, -23},
          {116, 116, 53},
          {117, 65535, -23},
        },
        {
          {11, 92, -5},
          {94, 96, 33},
          {97, 97, 54},
          {98, 110, 33},
          {111, 111, 55},
          {112, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 113, 33},
          {114, 114, 56},
          {115, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 107, -21},
          {108, 108, 57},
          {109, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 110, -22},
          {111, 111, 58},
          {112, 65535, -26},
        },
        {
          {11, 92, -5},
          {94, 114, 33},
          {115, 115, 59},
          {116, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 110, -22},
          {111, 111, 60},
          {112, 65535, -26},
        },
        {
          {11, 109, -19},
          {110, 110, 61},
          {111, 111, 62},
          {112, 119, 33},
          {120, 120, 63},
          {121, 65535, -21},
        },
        {
        },
        {
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {9, 65535, -7},
        },
        {
        },
        {
          {9, 65535, -8},
        },
        {
          {9, 9, 64},
          {10, 10, 65},
          {11, 12, 64},
          {13, 13, 65},
          {14, 41, 64},
          {43, 65535, 64},
        },
        {
          {48, 57, 66},
        },
        {
          {11, 92, -5},
          {94, 99, 33},
          {100, 100, 67},
          {101, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 98, 33},
          {99, 99, 68},
          {100, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 100, -20},
          {101, 101, 69},
          {102, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 109, -19},
          {110, 110, 70},
          {111, 65535, -19},
        },
        {
          {11, 92, -5},
          {94, 104, 33},
          {105, 105, 71},
          {106, 114, 33},
          {115, 115, 72},
          {116, 65535, -30},
        },
        {
          {11, 107, -21},
          {108, 108, 73},
          {109, 65535, -28},
        },
        {
          {11, 92, -5},
          {94, 111, 33},
          {112, 112, 74},
          {113, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 113, -27},
          {114, 114, 75},
          {115, 65535, -27},
        },
        {
          {11, 110, -22},
          {111, 111, 76},
          {112, 65535, -26},
        },
        {
          {11, 109, -19},
          {110, 110, 77},
          {111, 65535, -19},
        },
        {
          {11, 100, -20},
          {101, 101, 78},
          {102, 65535, -44},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 111, -48},
          {112, 112, 79},
          {113, 65535, -48},
        },
        {
          {11, 100, -20},
          {101, 101, 80},
          {102, 65535, -44},
        },
        {
          {11, 109, -19},
          {110, 110, 81},
          {111, 65535, -19},
        },
        {
          {11, 113, -27},
          {114, 114, 82},
          {115, 65535, -27},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 96, -26},
          {97, 97, 83},
          {98, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 104, -46},
          {105, 105, 84},
          {106, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 104, -46},
          {105, 105, 85},
          {106, 65535, -61},
        },
        {
          {11, 110, -22},
          {111, 111, 86},
          {112, 65535, -26},
        },
        {
          {11, 113, -27},
          {114, 114, 87},
          {115, 65535, -27},
        },
        {
          {11, 92, -5},
          {94, 119, 33},
          {120, 120, 88},
          {121, 65535, -21},
        },
        {
          {9, 41, -40},
          {42, 42, 89},
          {43, 65535, 64},
        },
        {
          {9, 41, 65},
          {42, 42, 90},
          {43, 65535, 65},
        },
        {
          {48, 57, 66},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 107, -21},
          {108, 108, 91},
          {109, 65535, -28},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 101, -24},
          {102, 102, 92},
          {103, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 100, -20},
          {101, 101, 93},
          {102, 65535, -44},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 110, -22},
          {111, 111, 94},
          {112, 65535, -26},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 92, -5},
          {94, 108, 33},
          {109, 109, 95},
          {110, 65535, -24},
        },
        {
          {11, 98, -43},
          {99, 99, 96},
          {100, 65535, -43},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 110, -22},
          {111, 111, 97},
          {112, 65535, -26},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 99, -42},
          {100, 100, 98},
          {101, 65535, -42},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 109, -19},
          {110, 110, 99},
          {111, 65535, -19},
        },
        {
          {11, 109, -19},
          {110, 110, 100},
          {111, 65535, -19},
        },
        {
          {11, 99, -42},
          {100, 100, 101},
          {101, 65535, -42},
        },
        {
          {11, 113, -27},
          {114, 114, 102},
          {115, 65535, -27},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 59, -5},
          {63, 72, 33},
          {73, 73, 103},
          {74, 90, 33},
          {92, 65535, -5},
        },
        {
          {9, 9, 104},
          {10, 10, 105},
          {11, 12, 104},
          {13, 13, 105},
          {14, 41, 104},
          {42, 42, 89},
          {43, 46, 104},
          {47, 47, 106},
          {48, 65535, 104},
        },
        {
          {9, 41, 105},
          {42, 42, 90},
          {43, 46, 105},
          {47, 47, 107},
          {48, 65535, 105},
        },
        {
          {11, 101, -24},
          {102, 102, 108},
          {103, 65535, -73},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 114, -30},
          {115, 115, 109},
          {116, 65535, -30},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 113, -27},
          {114, 114, 110},
          {115, 65535, -27},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 100, -20},
          {101, 101, 111},
          {102, 65535, -44},
        },
        {
          {11, 92, -5},
          {94, 102, 33},
          {103, 103, 112},
          {104, 122, 33},
          {124, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 109, -19},
          {110, 110, 113},
          {111, 65535, -19},
        },
        {
          {9, 9, 114},
          {10, 10, 115},
          {11, 12, 114},
          {13, 13, 115},
          {14, 41, 114},
          {42, 42, 116},
          {43, 65535, 114},
        },
        {
          {9, 41, 115},
          {42, 42, 117},
          {43, 65535, 115},
        },
        {
        },
        {
        },
        {
          {11, 104, -46},
          {105, 105, 118},
          {106, 65535, -61},
        },
        {
          {11, 100, -20},
          {101, 101, 119},
          {102, 65535, -44},
        },
        {
          {11, 115, -23},
          {116, 116, 120},
          {117, 65535, -23},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 99, -42},
          {100, 100, 121},
          {101, 65535, -42},
        },
        {
          {9, 65535, -106},
        },
        {
          {9, 65535, -107},
        },
        {
          {9, 41, -91},
          {42, 42, 116},
          {43, 65535, -91},
        },
        {
          {9, 41, 105},
          {42, 42, 117},
          {43, 65535, -92},
        },
        {
          {11, 113, -27},
          {114, 114, 122},
          {115, 65535, -27},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 100, -20},
          {101, 101, 123},
          {102, 65535, -44},
        },
        {
          {11, 114, -30},
          {115, 115, 124},
          {116, 65535, -30},
        },
        {
          {11, 109, -19},
          {110, 110, 125},
          {111, 65535, -19},
        },
        {
          {11, 115, -23},
          {116, 116, 126},
          {117, 65535, -23},
        },
        {
          {11, 115, -23},
          {116, 116, 127},
          {117, 65535, -23},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 59, -5},
          {63, 66, 33},
          {67, 67, 128},
          {68, 78, 33},
          {79, 79, 129},
          {80, 90, 33},
          {92, 65535, -5},
        },
        {
          {11, 107, -21},
          {108, 108, 130},
          {109, 65535, -28},
        },
        {
          {11, 111, -48},
          {112, 112, 131},
          {113, 65535, -48},
        },
        {
          {11, 110, -22},
          {111, 111, 132},
          {112, 65535, -26},
        },
        {
          {11, 100, -20},
          {101, 101, 133},
          {102, 65535, -44},
        },
        {
          {11, 114, -30},
          {115, 115, 134},
          {116, 65535, -30},
        },
        {
          {11, 109, -19},
          {110, 110, 135},
          {111, 65535, -19},
        },
        {
          {11, 100, -20},
          {101, 101, 136},
          {102, 65535, -44},
        },
        {
          {11, 65535, -5},
        },
        {
          {11, 65535, -5},
        },
      },
    };
    */

    private static int[][] accept; /* = {
      {
  -1, 43, 38, 39, 44, -1, 45, 22, 2, 7, 1, 37, 0, 36, 17, 40, 30, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 20, 13, 39, 39, -1, 42, 45, -1, -1, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 19, 21, 39, 3, 39, 39, 5, 39, 29, 39, 39, 39, 39, 39, -1, -1, 41, 24, 39, 11, 6, 39, 39, 28, 39, 4, 39, 39, 10, 39, 33, 39, 27, 39, 39, 39, 39, 26, 39, -1, -1, 31, 16, 15, 39, 14, 32, 39, 9, 39, 39, 23, 25, 39, -1, -1, 45, 46, 39, 39, 39, 12, 34, 39, -1, -1, -1, -1, 39, 35, 8, 39, 39, 39, 39, 39, 18, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 

      },
    };
    */

    static
    {
        try
        {
            BufferedReader r = new BufferedReader (new InputStreamReader (
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = Integer.parseInt(r.readLine());
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = Integer.parseInt(r.readLine());
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = Integer.parseInt(r.readLine());
                        }
                    }
                }
            }

            // read accept
            length = Integer.parseInt(r.readLine());
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = Integer.parseInt(r.readLine());
                }
            }

            r.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
