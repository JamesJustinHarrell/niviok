/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.analysis;

import java.util.*;
import Dextr.Sablecc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPDocument().apply(this);
        outStart(node);
    }

    public void inADocument(ADocument node)
    {
        defaultIn(node);
    }

    public void outADocument(ADocument node)
    {
        defaultOut(node);
    }

    public void caseADocument(ADocument node)
    {
        inADocument(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getDocumentinside() != null)
        {
            node.getDocumentinside().apply(this);
        }
        {
            Object temp[] = node.getScopealteration().toArray();
            for(int i = temp.length - 1; i >= 0;  i--)
            {
                ((PScopealteration) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getImport().toArray();
            for(int i = temp.length - 1; i >= 0;  i--)
            {
                ((PImport) temp[i]).apply(this);
            }
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outADocument(node);
    }
    public void inAADocumentinside(AADocumentinside node)
    {
        defaultIn(node);
    }

    public void outAADocumentinside(AADocumentinside node)
    {
        defaultOut(node);
    }

    public void caseAADocumentinside(AADocumentinside node)
    {
        inAADocumentinside(node);
        if(node.getDeclarefirstlist() != null)
        {
            node.getDeclarefirstlist().apply(this);
        }
        outAADocumentinside(node);
    }
    public void inABDocumentinside(ABDocumentinside node)
    {
        defaultIn(node);
    }

    public void outABDocumentinside(ABDocumentinside node)
    {
        defaultOut(node);
    }

    public void caseABDocumentinside(ABDocumentinside node)
    {
        inABDocumentinside(node);
        if(node.getDeclarefirstlist() != null)
        {
            node.getDeclarefirstlist().apply(this);
        }
        {
            Object temp[] = node.getScopealteration().toArray();
            for(int i = temp.length - 1; i >= 0;  i--)
            {
                ((PScopealteration) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getPlanereference().toArray();
            for(int i = temp.length - 1; i >= 0;  i--)
            {
                ((PPlanereference) temp[i]).apply(this);
            }
        }
        outABDocumentinside(node);
    }
    public void inAPlanereference(APlanereference node)
    {
        defaultIn(node);
    }

    public void outAPlanereference(APlanereference node)
    {
        defaultOut(node);
    }

    public void caseAPlanereference(APlanereference node)
    {
        inAPlanereference(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getKeywordPlane() != null)
        {
            node.getKeywordPlane().apply(this);
        }
        outAPlanereference(node);
    }
    public void inAADeclarefirstlist(AADeclarefirstlist node)
    {
        defaultIn(node);
    }

    public void outAADeclarefirstlist(AADeclarefirstlist node)
    {
        defaultOut(node);
    }

    public void caseAADeclarefirstlist(AADeclarefirstlist node)
    {
        inAADeclarefirstlist(node);
        if(node.getDeclarefirst() != null)
        {
            node.getDeclarefirst().apply(this);
        }
        outAADeclarefirstlist(node);
    }
    public void inABDeclarefirstlist(ABDeclarefirstlist node)
    {
        defaultIn(node);
    }

    public void outABDeclarefirstlist(ABDeclarefirstlist node)
    {
        defaultOut(node);
    }

    public void caseABDeclarefirstlist(ABDeclarefirstlist node)
    {
        inABDeclarefirstlist(node);
        if(node.getDeclarefirst() != null)
        {
            node.getDeclarefirst().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getDeclarefirstlist() != null)
        {
            node.getDeclarefirstlist().apply(this);
        }
        outABDeclarefirstlist(node);
    }
    public void inAAAdd(AAAdd node)
    {
        defaultIn(node);
    }

    public void outAAAdd(AAAdd node)
    {
        defaultOut(node);
    }

    public void caseAAAdd(AAAdd node)
    {
        inAAAdd(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAAAdd(node);
    }
    public void inABAdd(ABAdd node)
    {
        defaultIn(node);
    }

    public void outABAdd(ABAdd node)
    {
        defaultOut(node);
    }

    public void caseABAdd(ABAdd node)
    {
        inABAdd(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getOperatorPlus() != null)
        {
            node.getOperatorPlus().apply(this);
        }
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        outABAdd(node);
    }
    public void inACAdd(ACAdd node)
    {
        defaultIn(node);
    }

    public void outACAdd(ACAdd node)
    {
        defaultOut(node);
    }

    public void caseACAdd(ACAdd node)
    {
        inACAdd(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getOperatorMinus() != null)
        {
            node.getOperatorMinus().apply(this);
        }
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        outACAdd(node);
    }
    public void inAAArgumentlist(AAArgumentlist node)
    {
        defaultIn(node);
    }

    public void outAAArgumentlist(AAArgumentlist node)
    {
        defaultOut(node);
    }

    public void caseAAArgumentlist(AAArgumentlist node)
    {
        inAAArgumentlist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAArgumentlist(node);
    }
    public void inABArgumentlist(ABArgumentlist node)
    {
        defaultIn(node);
    }

    public void outABArgumentlist(ABArgumentlist node)
    {
        defaultOut(node);
    }

    public void caseABArgumentlist(ABArgumentlist node)
    {
        inABArgumentlist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperatorComma() != null)
        {
            node.getOperatorComma().apply(this);
        }
        if(node.getArgumentlist() != null)
        {
            node.getArgumentlist().apply(this);
        }
        outABArgumentlist(node);
    }
    public void inAABlock(AABlock node)
    {
        defaultIn(node);
    }

    public void outAABlock(AABlock node)
    {
        defaultOut(node);
    }

    public void caseAABlock(AABlock node)
    {
        inAABlock(node);
        if(node.getBraceblock() != null)
        {
            node.getBraceblock().apply(this);
        }
        outAABlock(node);
    }
    public void inABBlock(ABBlock node)
    {
        defaultIn(node);
    }

    public void outABBlock(ABBlock node)
    {
        defaultOut(node);
    }

    public void caseABBlock(ABBlock node)
    {
        inABBlock(node);
        if(node.getTabblock() != null)
        {
            node.getTabblock().apply(this);
        }
        outABBlock(node);
    }
    public void inACBlock(ACBlock node)
    {
        defaultIn(node);
    }

    public void outACBlock(ACBlock node)
    {
        defaultOut(node);
    }

    public void caseACBlock(ACBlock node)
    {
        inACBlock(node);
        if(node.getBracetabblock() != null)
        {
            node.getBracetabblock().apply(this);
        }
        outACBlock(node);
    }
    public void inABraceblock(ABraceblock node)
    {
        defaultIn(node);
    }

    public void outABraceblock(ABraceblock node)
    {
        defaultOut(node);
    }

    public void caseABraceblock(ABraceblock node)
    {
        inABraceblock(node);
        if(node.getOperatorClosingBrace() != null)
        {
            node.getOperatorClosingBrace().apply(this);
        }
        if(node.getBraceblockinside() != null)
        {
            node.getBraceblockinside().apply(this);
        }
        if(node.getOperatorOpeningBrace() != null)
        {
            node.getOperatorOpeningBrace().apply(this);
        }
        outABraceblock(node);
    }
    public void inABraceblockinside(ABraceblockinside node)
    {
        defaultIn(node);
    }

    public void outABraceblockinside(ABraceblockinside node)
    {
        defaultOut(node);
    }

    public void caseABraceblockinside(ABraceblockinside node)
    {
        inABraceblockinside(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outABraceblockinside(node);
    }
    public void inATabblock(ATabblock node)
    {
        defaultIn(node);
    }

    public void outATabblock(ATabblock node)
    {
        defaultOut(node);
    }

    public void caseATabblock(ATabblock node)
    {
        inATabblock(node);
        if(node.getIndentClose() != null)
        {
            node.getIndentClose().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getTabblockinside() != null)
        {
            node.getTabblockinside().apply(this);
        }
        if(node.getIndentOpen() != null)
        {
            node.getIndentOpen().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outATabblock(node);
    }
    public void inAATabblockinside(AATabblockinside node)
    {
        defaultIn(node);
    }

    public void outAATabblockinside(AATabblockinside node)
    {
        defaultOut(node);
    }

    public void caseAATabblockinside(AATabblockinside node)
    {
        inAATabblockinside(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAATabblockinside(node);
    }
    public void inABTabblockinside(ABTabblockinside node)
    {
        defaultIn(node);
    }

    public void outABTabblockinside(ABTabblockinside node)
    {
        defaultOut(node);
    }

    public void caseABTabblockinside(ABTabblockinside node)
    {
        inABTabblockinside(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getTabblockinside() != null)
        {
            node.getTabblockinside().apply(this);
        }
        outABTabblockinside(node);
    }
    public void inABracetabblock(ABracetabblock node)
    {
        defaultIn(node);
    }

    public void outABracetabblock(ABracetabblock node)
    {
        defaultOut(node);
    }

    public void caseABracetabblock(ABracetabblock node)
    {
        inABracetabblock(node);
        if(node.getOperatorClosingBrace() != null)
        {
            node.getOperatorClosingBrace().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getTabblock() != null)
        {
            node.getTabblock().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getOperatorOpeningBrace() != null)
        {
            node.getOperatorOpeningBrace().apply(this);
        }
        outABracetabblock(node);
    }
    public void inABooleanlogic(ABooleanlogic node)
    {
        defaultIn(node);
    }

    public void outABooleanlogic(ABooleanlogic node)
    {
        defaultOut(node);
    }

    public void caseABooleanlogic(ABooleanlogic node)
    {
        inABooleanlogic(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getBooleanfunction() != null)
        {
            node.getBooleanfunction().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outABooleanlogic(node);
    }
    public void inAABooleanfunction(AABooleanfunction node)
    {
        defaultIn(node);
    }

    public void outAABooleanfunction(AABooleanfunction node)
    {
        defaultOut(node);
    }

    public void caseAABooleanfunction(AABooleanfunction node)
    {
        inAABooleanfunction(node);
        if(node.getKeywordAnd() != null)
        {
            node.getKeywordAnd().apply(this);
        }
        outAABooleanfunction(node);
    }
    public void inABBooleanfunction(ABBooleanfunction node)
    {
        defaultIn(node);
    }

    public void outABBooleanfunction(ABBooleanfunction node)
    {
        defaultOut(node);
    }

    public void caseABBooleanfunction(ABBooleanfunction node)
    {
        inABBooleanfunction(node);
        if(node.getKeywordNand() != null)
        {
            node.getKeywordNand().apply(this);
        }
        outABBooleanfunction(node);
    }
    public void inACBooleanfunction(ACBooleanfunction node)
    {
        defaultIn(node);
    }

    public void outACBooleanfunction(ACBooleanfunction node)
    {
        defaultOut(node);
    }

    public void caseACBooleanfunction(ACBooleanfunction node)
    {
        inACBooleanfunction(node);
        if(node.getKeywordOr() != null)
        {
            node.getKeywordOr().apply(this);
        }
        outACBooleanfunction(node);
    }
    public void inADBooleanfunction(ADBooleanfunction node)
    {
        defaultIn(node);
    }

    public void outADBooleanfunction(ADBooleanfunction node)
    {
        defaultOut(node);
    }

    public void caseADBooleanfunction(ADBooleanfunction node)
    {
        inADBooleanfunction(node);
        if(node.getKeywordNor() != null)
        {
            node.getKeywordNor().apply(this);
        }
        outADBooleanfunction(node);
    }
    public void inAEBooleanfunction(AEBooleanfunction node)
    {
        defaultIn(node);
    }

    public void outAEBooleanfunction(AEBooleanfunction node)
    {
        defaultOut(node);
    }

    public void caseAEBooleanfunction(AEBooleanfunction node)
    {
        inAEBooleanfunction(node);
        if(node.getKeywordXor() != null)
        {
            node.getKeywordXor().apply(this);
        }
        outAEBooleanfunction(node);
    }
    public void inAFBooleanfunction(AFBooleanfunction node)
    {
        defaultIn(node);
    }

    public void outAFBooleanfunction(AFBooleanfunction node)
    {
        defaultOut(node);
    }

    public void caseAFBooleanfunction(AFBooleanfunction node)
    {
        inAFBooleanfunction(node);
        if(node.getKeywordXnor() != null)
        {
            node.getKeywordXnor().apply(this);
        }
        outAFBooleanfunction(node);
    }
    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getOperatorClosingParenthesis() != null)
        {
            node.getOperatorClosingParenthesis().apply(this);
        }
        if(node.getArgumentlist() != null)
        {
            node.getArgumentlist().apply(this);
        }
        if(node.getOperatorOpeningParenthesis() != null)
        {
            node.getOperatorOpeningParenthesis().apply(this);
        }
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outACall(node);
    }
    public void inADeclareassign(ADeclareassign node)
    {
        defaultIn(node);
    }

    public void outADeclareassign(ADeclareassign node)
    {
        defaultOut(node);
    }

    public void caseADeclareassign(ADeclareassign node)
    {
        inADeclareassign(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperatorAssign() != null)
        {
            node.getOperatorAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        if(node.getKeywordDecl() != null)
        {
            node.getKeywordDecl().apply(this);
        }
        outADeclareassign(node);
    }
    public void inADeclareempty(ADeclareempty node)
    {
        defaultIn(node);
    }

    public void outADeclareempty(ADeclareempty node)
    {
        defaultOut(node);
    }

    public void caseADeclareempty(ADeclareempty node)
    {
        inADeclareempty(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        if(node.getKeywordDecl() != null)
        {
            node.getKeywordDecl().apply(this);
        }
        outADeclareempty(node);
    }
    public void inAADeclarefirst(AADeclarefirst node)
    {
        defaultIn(node);
    }

    public void outAADeclarefirst(AADeclarefirst node)
    {
        defaultOut(node);
    }

    public void caseAADeclarefirst(AADeclarefirst node)
    {
        inAADeclarefirst(node);
        if(node.getDeclarefirstnormal() != null)
        {
            node.getDeclarefirstnormal().apply(this);
        }
        outAADeclarefirst(node);
    }
    public void inABDeclarefirst(ABDeclarefirst node)
    {
        defaultIn(node);
    }

    public void outABDeclarefirst(ABDeclarefirst node)
    {
        defaultOut(node);
    }

    public void caseABDeclarefirst(ABDeclarefirst node)
    {
        inABDeclarefirst(node);
        if(node.getFunctiondeclaration() != null)
        {
            node.getFunctiondeclaration().apply(this);
        }
        outABDeclarefirst(node);
    }
    public void inADeclarefirstnormal(ADeclarefirstnormal node)
    {
        defaultIn(node);
    }

    public void outADeclarefirstnormal(ADeclarefirstnormal node)
    {
        defaultOut(node);
    }

    public void caseADeclarefirstnormal(ADeclarefirstnormal node)
    {
        inADeclarefirstnormal(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperatorAssign() != null)
        {
            node.getOperatorAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKeywordDeclfirst() != null)
        {
            node.getKeywordDeclfirst().apply(this);
        }
        outADeclarefirstnormal(node);
    }
    public void inAExpose(AExpose node)
    {
        defaultIn(node);
    }

    public void outAExpose(AExpose node)
    {
        defaultOut(node);
    }

    public void caseAExpose(AExpose node)
    {
        inAExpose(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKeywordExpose() != null)
        {
            node.getKeywordExpose().apply(this);
        }
        outAExpose(node);
    }
    public void inAAExpression(AAExpression node)
    {
        defaultIn(node);
    }

    public void outAAExpression(AAExpression node)
    {
        defaultOut(node);
    }

    public void caseAAExpression(AAExpression node)
    {
        inAAExpression(node);
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        outAAExpression(node);
    }
    public void inABExpression(ABExpression node)
    {
        defaultIn(node);
    }

    public void outABExpression(ABExpression node)
    {
        defaultOut(node);
    }

    public void caseABExpression(ABExpression node)
    {
        inABExpression(node);
        if(node.getBooleanlogic() != null)
        {
            node.getBooleanlogic().apply(this);
        }
        outABExpression(node);
    }
    public void inACExpression(ACExpression node)
    {
        defaultIn(node);
    }

    public void outACExpression(ACExpression node)
    {
        defaultOut(node);
    }

    public void caseACExpression(ACExpression node)
    {
        inACExpression(node);
        if(node.getDeclareassign() != null)
        {
            node.getDeclareassign().apply(this);
        }
        outACExpression(node);
    }
    public void inADExpression(ADExpression node)
    {
        defaultIn(node);
    }

    public void outADExpression(ADExpression node)
    {
        defaultOut(node);
    }

    public void caseADExpression(ADExpression node)
    {
        inADExpression(node);
        if(node.getDeclareempty() != null)
        {
            node.getDeclareempty().apply(this);
        }
        outADExpression(node);
    }
    public void inAEExpression(AEExpression node)
    {
        defaultIn(node);
    }

    public void outAEExpression(AEExpression node)
    {
        defaultOut(node);
    }

    public void caseAEExpression(AEExpression node)
    {
        inAEExpression(node);
        if(node.getDeclarefirst() != null)
        {
            node.getDeclarefirst().apply(this);
        }
        outAEExpression(node);
    }
    public void inAFExpression(AFExpression node)
    {
        defaultIn(node);
    }

    public void outAFExpression(AFExpression node)
    {
        defaultOut(node);
    }

    public void caseAFExpression(AFExpression node)
    {
        inAFExpression(node);
        if(node.getForrange() != null)
        {
            node.getForrange().apply(this);
        }
        outAFExpression(node);
    }
    public void inAGExpression(AGExpression node)
    {
        defaultIn(node);
    }

    public void outAGExpression(AGExpression node)
    {
        defaultOut(node);
    }

    public void caseAGExpression(AGExpression node)
    {
        inAGExpression(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAGExpression(node);
    }
    public void inAHExpression(AHExpression node)
    {
        defaultIn(node);
    }

    public void outAHExpression(AHExpression node)
    {
        defaultOut(node);
    }

    public void caseAHExpression(AHExpression node)
    {
        inAHExpression(node);
        if(node.getIfelse() != null)
        {
            node.getIfelse().apply(this);
        }
        outAHExpression(node);
    }
    public void inAIExpression(AIExpression node)
    {
        defaultIn(node);
    }

    public void outAIExpression(AIExpression node)
    {
        defaultOut(node);
    }

    public void caseAIExpression(AIExpression node)
    {
        inAIExpression(node);
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        outAIExpression(node);
    }
    public void inAExtractmember(AExtractmember node)
    {
        defaultIn(node);
    }

    public void outAExtractmember(AExtractmember node)
    {
        defaultOut(node);
    }

    public void caseAExtractmember(AExtractmember node)
    {
        inAExtractmember(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getOperatorExtractMember() != null)
        {
            node.getOperatorExtractMember().apply(this);
        }
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outAExtractmember(node);
    }
    public void inAForrange(AForrange node)
    {
        defaultIn(node);
    }

    public void outAForrange(AForrange node)
    {
        defaultOut(node);
    }

    public void caseAForrange(AForrange node)
    {
        inAForrange(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getKeywordTo() != null)
        {
            node.getKeywordTo().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getKeywordFrom() != null)
        {
            node.getKeywordFrom().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKeywordFor() != null)
        {
            node.getKeywordFor().apply(this);
        }
        outAForrange(node);
    }
    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getOperatorClosingParenthesis() != null)
        {
            node.getOperatorClosingParenthesis().apply(this);
        }
        if(node.getOperatorOpeningParenthesis() != null)
        {
            node.getOperatorOpeningParenthesis().apply(this);
        }
        if(node.getKeywordFunc() != null)
        {
            node.getKeywordFunc().apply(this);
        }
        outAFunction(node);
    }
    public void inAAType(AAType node)
    {
        defaultIn(node);
    }

    public void outAAType(AAType node)
    {
        defaultOut(node);
    }

    public void caseAAType(AAType node)
    {
        inAAType(node);
        if(node.getKeywordDyn() != null)
        {
            node.getKeywordDyn().apply(this);
        }
        outAAType(node);
    }
    public void inABType(ABType node)
    {
        defaultIn(node);
    }

    public void outABType(ABType node)
    {
        defaultOut(node);
    }

    public void caseABType(ABType node)
    {
        inABType(node);
        if(node.getKeywordVoid() != null)
        {
            node.getKeywordVoid().apply(this);
        }
        outABType(node);
    }
    public void inAFunctiondeclaration(AFunctiondeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctiondeclaration(AFunctiondeclaration node)
    {
        defaultOut(node);
    }

    public void caseAFunctiondeclaration(AFunctiondeclaration node)
    {
        inAFunctiondeclaration(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getOperatorClosingParenthesis() != null)
        {
            node.getOperatorClosingParenthesis().apply(this);
        }
        if(node.getParameterlist() != null)
        {
            node.getParameterlist().apply(this);
        }
        if(node.getOperatorOpeningParenthesis() != null)
        {
            node.getOperatorOpeningParenthesis().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKeywordFunc() != null)
        {
            node.getKeywordFunc().apply(this);
        }
        outAFunctiondeclaration(node);
    }
    public void inAIfelse(AIfelse node)
    {
        defaultIn(node);
    }

    public void outAIfelse(AIfelse node)
    {
        defaultOut(node);
    }

    public void caseAIfelse(AIfelse node)
    {
        inAIfelse(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElif() != null)
        {
            node.getElif().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfelse(node);
    }
    public void inAAIfexpr(AAIfexpr node)
    {
        defaultIn(node);
    }

    public void outAAIfexpr(AAIfexpr node)
    {
        defaultOut(node);
    }

    public void caseAAIfexpr(AAIfexpr node)
    {
        inAAIfexpr(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outAAIfexpr(node);
    }
    public void inABIfexpr(ABIfexpr node)
    {
        defaultIn(node);
    }

    public void outABIfexpr(ABIfexpr node)
    {
        defaultOut(node);
    }

    public void caseABIfexpr(ABIfexpr node)
    {
        inABIfexpr(node);
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        outABIfexpr(node);
    }
    public void inAIf(AIf node)
    {
        defaultIn(node);
    }

    public void outAIf(AIf node)
    {
        defaultOut(node);
    }

    public void caseAIf(AIf node)
    {
        inAIf(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        if(node.getKeywordIf() != null)
        {
            node.getKeywordIf().apply(this);
        }
        outAIf(node);
    }
    public void inAAElif(AAElif node)
    {
        defaultIn(node);
    }

    public void outAAElif(AAElif node)
    {
        defaultOut(node);
    }

    public void caseAAElif(AAElif node)
    {
        inAAElif(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        if(node.getKeywordElif() != null)
        {
            node.getKeywordElif().apply(this);
        }
        outAAElif(node);
    }
    public void inABElif(ABElif node)
    {
        defaultIn(node);
    }

    public void outABElif(ABElif node)
    {
        defaultOut(node);
    }

    public void caseABElif(ABElif node)
    {
        inABElif(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        if(node.getKeywordElif() != null)
        {
            node.getKeywordElif().apply(this);
        }
        if(node.getElif() != null)
        {
            node.getElif().apply(this);
        }
        outABElif(node);
    }
    public void inAElse(AElse node)
    {
        defaultIn(node);
    }

    public void outAElse(AElse node)
    {
        defaultOut(node);
    }

    public void caseAElse(AElse node)
    {
        inAElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getKeywordElse() != null)
        {
            node.getKeywordElse().apply(this);
        }
        outAElse(node);
    }
    public void inAImport(AImport node)
    {
        defaultIn(node);
    }

    public void outAImport(AImport node)
    {
        defaultOut(node);
    }

    public void caseAImport(AImport node)
    {
        inAImport(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getKeywordImport() != null)
        {
            node.getKeywordImport().apply(this);
        }
        outAImport(node);
    }
    public void inAAMult(AAMult node)
    {
        defaultIn(node);
    }

    public void outAAMult(AAMult node)
    {
        defaultOut(node);
    }

    public void caseAAMult(AAMult node)
    {
        inAAMult(node);
        if(node.getSimple() != null)
        {
            node.getSimple().apply(this);
        }
        outAAMult(node);
    }
    public void inABMult(ABMult node)
    {
        defaultIn(node);
    }

    public void outABMult(ABMult node)
    {
        defaultOut(node);
    }

    public void caseABMult(ABMult node)
    {
        inABMult(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getOperatorTimes() != null)
        {
            node.getOperatorTimes().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outABMult(node);
    }
    public void inACMult(ACMult node)
    {
        defaultIn(node);
    }

    public void outACMult(ACMult node)
    {
        defaultOut(node);
    }

    public void caseACMult(ACMult node)
    {
        inACMult(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getOperatorDivide() != null)
        {
            node.getOperatorDivide().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACMult(node);
    }
    public void inAParameter(AParameter node)
    {
        defaultIn(node);
    }

    public void outAParameter(AParameter node)
    {
        defaultOut(node);
    }

    public void caseAParameter(AParameter node)
    {
        inAParameter(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParameter(node);
    }
    public void inAAParameterlist(AAParameterlist node)
    {
        defaultIn(node);
    }

    public void outAAParameterlist(AAParameterlist node)
    {
        defaultOut(node);
    }

    public void caseAAParameterlist(AAParameterlist node)
    {
        inAAParameterlist(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAAParameterlist(node);
    }
    public void inABParameterlist(ABParameterlist node)
    {
        defaultIn(node);
    }

    public void outABParameterlist(ABParameterlist node)
    {
        defaultOut(node);
    }

    public void caseABParameterlist(ABParameterlist node)
    {
        inABParameterlist(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        if(node.getOperatorComma() != null)
        {
            node.getOperatorComma().apply(this);
        }
        if(node.getParameterlist() != null)
        {
            node.getParameterlist().apply(this);
        }
        outABParameterlist(node);
    }
    public void inAParenthetical(AParenthetical node)
    {
        defaultIn(node);
    }

    public void outAParenthetical(AParenthetical node)
    {
        defaultOut(node);
    }

    public void caseAParenthetical(AParenthetical node)
    {
        inAParenthetical(node);
        if(node.getOperatorClosingParenthesis() != null)
        {
            node.getOperatorClosingParenthesis().apply(this);
        }
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperatorOpeningParenthesis() != null)
        {
            node.getOperatorOpeningParenthesis().apply(this);
        }
        outAParenthetical(node);
    }
    public void inAAPrimary(AAPrimary node)
    {
        defaultIn(node);
    }

    public void outAAPrimary(AAPrimary node)
    {
        defaultOut(node);
    }

    public void caseAAPrimary(AAPrimary node)
    {
        inAAPrimary(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAPrimary(node);
    }
    public void inABPrimary(ABPrimary node)
    {
        defaultIn(node);
    }

    public void outABPrimary(ABPrimary node)
    {
        defaultOut(node);
    }

    public void caseABPrimary(ABPrimary node)
    {
        inABPrimary(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outABPrimary(node);
    }
    public void inACPrimary(ACPrimary node)
    {
        defaultIn(node);
    }

    public void outACPrimary(ACPrimary node)
    {
        defaultOut(node);
    }

    public void caseACPrimary(ACPrimary node)
    {
        inACPrimary(node);
        if(node.getRational() != null)
        {
            node.getRational().apply(this);
        }
        outACPrimary(node);
    }
    public void inADPrimary(ADPrimary node)
    {
        defaultIn(node);
    }

    public void outADPrimary(ADPrimary node)
    {
        defaultOut(node);
    }

    public void caseADPrimary(ADPrimary node)
    {
        inADPrimary(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outADPrimary(node);
    }
    public void inAEPrimary(AEPrimary node)
    {
        defaultIn(node);
    }

    public void outAEPrimary(AEPrimary node)
    {
        defaultOut(node);
    }

    public void caseAEPrimary(AEPrimary node)
    {
        inAEPrimary(node);
        if(node.getParenthetical() != null)
        {
            node.getParenthetical().apply(this);
        }
        outAEPrimary(node);
    }
    public void inAAScopealteration(AAScopealteration node)
    {
        defaultIn(node);
    }

    public void outAAScopealteration(AAScopealteration node)
    {
        defaultOut(node);
    }

    public void caseAAScopealteration(AAScopealteration node)
    {
        inAAScopealteration(node);
        if(node.getExpose() != null)
        {
            node.getExpose().apply(this);
        }
        outAAScopealteration(node);
    }
    public void inABScopealteration(ABScopealteration node)
    {
        defaultIn(node);
    }

    public void outABScopealteration(ABScopealteration node)
    {
        defaultOut(node);
    }

    public void caseABScopealteration(ABScopealteration node)
    {
        inABScopealteration(node);
        if(node.getUsing() != null)
        {
            node.getUsing().apply(this);
        }
        outABScopealteration(node);
    }
    public void inAASimple(AASimple node)
    {
        defaultIn(node);
    }

    public void outAASimple(AASimple node)
    {
        defaultOut(node);
    }

    public void caseAASimple(AASimple node)
    {
        inAASimple(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAASimple(node);
    }
    public void inABSimple(ABSimple node)
    {
        defaultIn(node);
    }

    public void outABSimple(ABSimple node)
    {
        defaultOut(node);
    }

    public void caseABSimple(ABSimple node)
    {
        inABSimple(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outABSimple(node);
    }
    public void inACSimple(ACSimple node)
    {
        defaultIn(node);
    }

    public void outACSimple(ACSimple node)
    {
        defaultOut(node);
    }

    public void caseACSimple(ACSimple node)
    {
        inACSimple(node);
        if(node.getExtractmember() != null)
        {
            node.getExtractmember().apply(this);
        }
        outACSimple(node);
    }
    public void inADSimple(ADSimple node)
    {
        defaultIn(node);
    }

    public void outADSimple(ADSimple node)
    {
        defaultOut(node);
    }

    public void caseADSimple(ADSimple node)
    {
        inADSimple(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outADSimple(node);
    }
    public void inATest(ATest node)
    {
        defaultIn(node);
    }

    public void outATest(ATest node)
    {
        defaultOut(node);
    }

    public void caseATest(ATest node)
    {
        inATest(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getComparisonfunction() != null)
        {
            node.getComparisonfunction().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outATest(node);
    }
    public void inAAComparisonfunction(AAComparisonfunction node)
    {
        defaultIn(node);
    }

    public void outAAComparisonfunction(AAComparisonfunction node)
    {
        defaultOut(node);
    }

    public void caseAAComparisonfunction(AAComparisonfunction node)
    {
        inAAComparisonfunction(node);
        if(node.getKeywordLt() != null)
        {
            node.getKeywordLt().apply(this);
        }
        outAAComparisonfunction(node);
    }
    public void inABComparisonfunction(ABComparisonfunction node)
    {
        defaultIn(node);
    }

    public void outABComparisonfunction(ABComparisonfunction node)
    {
        defaultOut(node);
    }

    public void caseABComparisonfunction(ABComparisonfunction node)
    {
        inABComparisonfunction(node);
        if(node.getKeywordLte() != null)
        {
            node.getKeywordLte().apply(this);
        }
        outABComparisonfunction(node);
    }
    public void inACComparisonfunction(ACComparisonfunction node)
    {
        defaultIn(node);
    }

    public void outACComparisonfunction(ACComparisonfunction node)
    {
        defaultOut(node);
    }

    public void caseACComparisonfunction(ACComparisonfunction node)
    {
        inACComparisonfunction(node);
        if(node.getKeywordEql() != null)
        {
            node.getKeywordEql().apply(this);
        }
        outACComparisonfunction(node);
    }
    public void inADComparisonfunction(ADComparisonfunction node)
    {
        defaultIn(node);
    }

    public void outADComparisonfunction(ADComparisonfunction node)
    {
        defaultOut(node);
    }

    public void caseADComparisonfunction(ADComparisonfunction node)
    {
        inADComparisonfunction(node);
        if(node.getKeywordGte() != null)
        {
            node.getKeywordGte().apply(this);
        }
        outADComparisonfunction(node);
    }
    public void inAEComparisonfunction(AEComparisonfunction node)
    {
        defaultIn(node);
    }

    public void outAEComparisonfunction(AEComparisonfunction node)
    {
        defaultOut(node);
    }

    public void caseAEComparisonfunction(AEComparisonfunction node)
    {
        inAEComparisonfunction(node);
        if(node.getKeywordGt() != null)
        {
            node.getKeywordGt().apply(this);
        }
        outAEComparisonfunction(node);
    }
    public void inAFComparisonfunction(AFComparisonfunction node)
    {
        defaultIn(node);
    }

    public void outAFComparisonfunction(AFComparisonfunction node)
    {
        defaultOut(node);
    }

    public void caseAFComparisonfunction(AFComparisonfunction node)
    {
        inAFComparisonfunction(node);
        if(node.getKeywordDne() != null)
        {
            node.getKeywordDne().apply(this);
        }
        outAFComparisonfunction(node);
    }
    public void inAUsing(AUsing node)
    {
        defaultIn(node);
    }

    public void outAUsing(AUsing node)
    {
        defaultOut(node);
    }

    public void caseAUsing(AUsing node)
    {
        inAUsing(node);
        if(node.getNewline() != null)
        {
            node.getNewline().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getKeywordUsing() != null)
        {
            node.getKeywordUsing().apply(this);
        }
        outAUsing(node);
    }
}
