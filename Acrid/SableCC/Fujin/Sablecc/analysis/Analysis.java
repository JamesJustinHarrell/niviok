/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.analysis;

import Dextr.Sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseADocument(ADocument node);
    void caseAADocumentinside(AADocumentinside node);
    void caseABDocumentinside(ABDocumentinside node);
    void caseAPlanereference(APlanereference node);
    void caseAADeclarefirstlist(AADeclarefirstlist node);
    void caseABDeclarefirstlist(ABDeclarefirstlist node);
    void caseAAAdd(AAAdd node);
    void caseABAdd(ABAdd node);
    void caseACAdd(ACAdd node);
    void caseAAArgumentlist(AAArgumentlist node);
    void caseABArgumentlist(ABArgumentlist node);
    void caseAABlock(AABlock node);
    void caseABBlock(ABBlock node);
    void caseACBlock(ACBlock node);
    void caseABraceblock(ABraceblock node);
    void caseABraceblockinside(ABraceblockinside node);
    void caseATabblock(ATabblock node);
    void caseAATabblockinside(AATabblockinside node);
    void caseABTabblockinside(ABTabblockinside node);
    void caseABracetabblock(ABracetabblock node);
    void caseABooleanlogic(ABooleanlogic node);
    void caseAABooleanfunction(AABooleanfunction node);
    void caseABBooleanfunction(ABBooleanfunction node);
    void caseACBooleanfunction(ACBooleanfunction node);
    void caseADBooleanfunction(ADBooleanfunction node);
    void caseAEBooleanfunction(AEBooleanfunction node);
    void caseAFBooleanfunction(AFBooleanfunction node);
    void caseACall(ACall node);
    void caseADeclareassign(ADeclareassign node);
    void caseADeclareempty(ADeclareempty node);
    void caseAADeclarefirst(AADeclarefirst node);
    void caseABDeclarefirst(ABDeclarefirst node);
    void caseADeclarefirstnormal(ADeclarefirstnormal node);
    void caseAExpose(AExpose node);
    void caseAAExpression(AAExpression node);
    void caseABExpression(ABExpression node);
    void caseACExpression(ACExpression node);
    void caseADExpression(ADExpression node);
    void caseAEExpression(AEExpression node);
    void caseAFExpression(AFExpression node);
    void caseAGExpression(AGExpression node);
    void caseAHExpression(AHExpression node);
    void caseAIExpression(AIExpression node);
    void caseAExtractmember(AExtractmember node);
    void caseAForrange(AForrange node);
    void caseAFunction(AFunction node);
    void caseAAType(AAType node);
    void caseABType(ABType node);
    void caseAFunctiondeclaration(AFunctiondeclaration node);
    void caseAIfelse(AIfelse node);
    void caseAAIfexpr(AAIfexpr node);
    void caseABIfexpr(ABIfexpr node);
    void caseAIf(AIf node);
    void caseAAElif(AAElif node);
    void caseABElif(ABElif node);
    void caseAElse(AElse node);
    void caseAImport(AImport node);
    void caseAAMult(AAMult node);
    void caseABMult(ABMult node);
    void caseACMult(ACMult node);
    void caseAParameter(AParameter node);
    void caseAAParameterlist(AAParameterlist node);
    void caseABParameterlist(ABParameterlist node);
    void caseAParenthetical(AParenthetical node);
    void caseAAPrimary(AAPrimary node);
    void caseABPrimary(ABPrimary node);
    void caseACPrimary(ACPrimary node);
    void caseADPrimary(ADPrimary node);
    void caseAEPrimary(AEPrimary node);
    void caseAAScopealteration(AAScopealteration node);
    void caseABScopealteration(ABScopealteration node);
    void caseAASimple(AASimple node);
    void caseABSimple(ABSimple node);
    void caseACSimple(ACSimple node);
    void caseADSimple(ADSimple node);
    void caseATest(ATest node);
    void caseAAComparisonfunction(AAComparisonfunction node);
    void caseABComparisonfunction(ABComparisonfunction node);
    void caseACComparisonfunction(ACComparisonfunction node);
    void caseADComparisonfunction(ADComparisonfunction node);
    void caseAEComparisonfunction(AEComparisonfunction node);
    void caseAFComparisonfunction(AFComparisonfunction node);
    void caseAUsing(AUsing node);

    void caseTOperatorMinus(TOperatorMinus node);
    void caseTOperatorPlus(TOperatorPlus node);
    void caseTOperatorClosingParenthesis(TOperatorClosingParenthesis node);
    void caseTKeywordLt(TKeywordLt node);
    void caseTKeywordFor(TKeywordFor node);
    void caseTKeywordOr(TKeywordOr node);
    void caseTKeywordDyn(TKeywordDyn node);
    void caseTOperatorTimes(TOperatorTimes node);
    void caseTKeywordImport(TKeywordImport node);
    void caseTKeywordNand(TKeywordNand node);
    void caseTKeywordGte(TKeywordGte node);
    void caseTKeywordDne(TKeywordDne node);
    void caseTKeywordPlane(TKeywordPlane node);
    void caseTOperatorClosingBrace(TOperatorClosingBrace node);
    void caseTKeywordFrom(TKeywordFrom node);
    void caseTKeywordElse(TKeywordElse node);
    void caseTKeywordElif(TKeywordElif node);
    void caseTOperatorDivide(TOperatorDivide node);
    void caseTKeywordDeclfirst(TKeywordDeclfirst node);
    void caseTKeywordGt(TKeywordGt node);
    void caseTOperatorOpeningBrace(TOperatorOpeningBrace node);
    void caseTKeywordIf(TKeywordIf node);
    void caseTOperatorOpeningParenthesis(TOperatorOpeningParenthesis node);
    void caseTKeywordVoid(TKeywordVoid node);
    void caseTKeywordAnd(TKeywordAnd node);
    void caseTKeywordXnor(TKeywordXnor node);
    void caseTKeywordXor(TKeywordXor node);
    void caseTKeywordNor(TKeywordNor node);
    void caseTKeywordEql(TKeywordEql node);
    void caseTKeywordTo(TKeywordTo node);
    void caseTOperatorAssign(TOperatorAssign node);
    void caseTKeywordDecl(TKeywordDecl node);
    void caseTKeywordFunc(TKeywordFunc node);
    void caseTKeywordLte(TKeywordLte node);
    void caseTKeywordUsing(TKeywordUsing node);
    void caseTKeywordExpose(TKeywordExpose node);
    void caseTOperatorExtractMember(TOperatorExtractMember node);
    void caseTOperatorComma(TOperatorComma node);
    void caseTNewline(TNewline node);
    void caseTIdentifier(TIdentifier node);
    void caseTInteger(TInteger node);
    void caseTRational(TRational node);
    void caseTString(TString node);
    void caseTTab(TTab node);
    void caseTSpace(TSpace node);
    void caseTLineComment(TLineComment node);
    void caseTMultilineComment(TMultilineComment node);
    void caseTIndentOpen(TIndentOpen node);
    void caseTIndentClose(TIndentClose node);
    void caseEOF(EOF node);
}
