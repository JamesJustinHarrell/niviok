/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.analysis;

import java.util.*;
import Dextr.Sablecc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }
    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseADocument(ADocument node)
    {
        defaultCase(node);
    }
    public void caseAADocumentinside(AADocumentinside node)
    {
        defaultCase(node);
    }
    public void caseABDocumentinside(ABDocumentinside node)
    {
        defaultCase(node);
    }
    public void caseAPlanereference(APlanereference node)
    {
        defaultCase(node);
    }
    public void caseAADeclarefirstlist(AADeclarefirstlist node)
    {
        defaultCase(node);
    }
    public void caseABDeclarefirstlist(ABDeclarefirstlist node)
    {
        defaultCase(node);
    }
    public void caseAAAdd(AAAdd node)
    {
        defaultCase(node);
    }
    public void caseABAdd(ABAdd node)
    {
        defaultCase(node);
    }
    public void caseACAdd(ACAdd node)
    {
        defaultCase(node);
    }
    public void caseAAArgumentlist(AAArgumentlist node)
    {
        defaultCase(node);
    }
    public void caseABArgumentlist(ABArgumentlist node)
    {
        defaultCase(node);
    }
    public void caseAABlock(AABlock node)
    {
        defaultCase(node);
    }
    public void caseABBlock(ABBlock node)
    {
        defaultCase(node);
    }
    public void caseACBlock(ACBlock node)
    {
        defaultCase(node);
    }
    public void caseABraceblock(ABraceblock node)
    {
        defaultCase(node);
    }
    public void caseABraceblockinside(ABraceblockinside node)
    {
        defaultCase(node);
    }
    public void caseATabblock(ATabblock node)
    {
        defaultCase(node);
    }
    public void caseAATabblockinside(AATabblockinside node)
    {
        defaultCase(node);
    }
    public void caseABTabblockinside(ABTabblockinside node)
    {
        defaultCase(node);
    }
    public void caseABracetabblock(ABracetabblock node)
    {
        defaultCase(node);
    }
    public void caseABooleanlogic(ABooleanlogic node)
    {
        defaultCase(node);
    }
    public void caseAABooleanfunction(AABooleanfunction node)
    {
        defaultCase(node);
    }
    public void caseABBooleanfunction(ABBooleanfunction node)
    {
        defaultCase(node);
    }
    public void caseACBooleanfunction(ACBooleanfunction node)
    {
        defaultCase(node);
    }
    public void caseADBooleanfunction(ADBooleanfunction node)
    {
        defaultCase(node);
    }
    public void caseAEBooleanfunction(AEBooleanfunction node)
    {
        defaultCase(node);
    }
    public void caseAFBooleanfunction(AFBooleanfunction node)
    {
        defaultCase(node);
    }
    public void caseACall(ACall node)
    {
        defaultCase(node);
    }
    public void caseADeclareassign(ADeclareassign node)
    {
        defaultCase(node);
    }
    public void caseADeclareempty(ADeclareempty node)
    {
        defaultCase(node);
    }
    public void caseAADeclarefirst(AADeclarefirst node)
    {
        defaultCase(node);
    }
    public void caseABDeclarefirst(ABDeclarefirst node)
    {
        defaultCase(node);
    }
    public void caseADeclarefirstnormal(ADeclarefirstnormal node)
    {
        defaultCase(node);
    }
    public void caseAExpose(AExpose node)
    {
        defaultCase(node);
    }
    public void caseAAExpression(AAExpression node)
    {
        defaultCase(node);
    }
    public void caseABExpression(ABExpression node)
    {
        defaultCase(node);
    }
    public void caseACExpression(ACExpression node)
    {
        defaultCase(node);
    }
    public void caseADExpression(ADExpression node)
    {
        defaultCase(node);
    }
    public void caseAEExpression(AEExpression node)
    {
        defaultCase(node);
    }
    public void caseAFExpression(AFExpression node)
    {
        defaultCase(node);
    }
    public void caseAGExpression(AGExpression node)
    {
        defaultCase(node);
    }
    public void caseAHExpression(AHExpression node)
    {
        defaultCase(node);
    }
    public void caseAIExpression(AIExpression node)
    {
        defaultCase(node);
    }
    public void caseAExtractmember(AExtractmember node)
    {
        defaultCase(node);
    }
    public void caseAForrange(AForrange node)
    {
        defaultCase(node);
    }
    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }
    public void caseAAType(AAType node)
    {
        defaultCase(node);
    }
    public void caseABType(ABType node)
    {
        defaultCase(node);
    }
    public void caseAFunctiondeclaration(AFunctiondeclaration node)
    {
        defaultCase(node);
    }
    public void caseAIfelse(AIfelse node)
    {
        defaultCase(node);
    }
    public void caseAAIfexpr(AAIfexpr node)
    {
        defaultCase(node);
    }
    public void caseABIfexpr(ABIfexpr node)
    {
        defaultCase(node);
    }
    public void caseAIf(AIf node)
    {
        defaultCase(node);
    }
    public void caseAAElif(AAElif node)
    {
        defaultCase(node);
    }
    public void caseABElif(ABElif node)
    {
        defaultCase(node);
    }
    public void caseAElse(AElse node)
    {
        defaultCase(node);
    }
    public void caseAImport(AImport node)
    {
        defaultCase(node);
    }
    public void caseAAMult(AAMult node)
    {
        defaultCase(node);
    }
    public void caseABMult(ABMult node)
    {
        defaultCase(node);
    }
    public void caseACMult(ACMult node)
    {
        defaultCase(node);
    }
    public void caseAParameter(AParameter node)
    {
        defaultCase(node);
    }
    public void caseAAParameterlist(AAParameterlist node)
    {
        defaultCase(node);
    }
    public void caseABParameterlist(ABParameterlist node)
    {
        defaultCase(node);
    }
    public void caseAParenthetical(AParenthetical node)
    {
        defaultCase(node);
    }
    public void caseAAPrimary(AAPrimary node)
    {
        defaultCase(node);
    }
    public void caseABPrimary(ABPrimary node)
    {
        defaultCase(node);
    }
    public void caseACPrimary(ACPrimary node)
    {
        defaultCase(node);
    }
    public void caseADPrimary(ADPrimary node)
    {
        defaultCase(node);
    }
    public void caseAEPrimary(AEPrimary node)
    {
        defaultCase(node);
    }
    public void caseAAScopealteration(AAScopealteration node)
    {
        defaultCase(node);
    }
    public void caseABScopealteration(ABScopealteration node)
    {
        defaultCase(node);
    }
    public void caseAASimple(AASimple node)
    {
        defaultCase(node);
    }
    public void caseABSimple(ABSimple node)
    {
        defaultCase(node);
    }
    public void caseACSimple(ACSimple node)
    {
        defaultCase(node);
    }
    public void caseADSimple(ADSimple node)
    {
        defaultCase(node);
    }
    public void caseATest(ATest node)
    {
        defaultCase(node);
    }
    public void caseAAComparisonfunction(AAComparisonfunction node)
    {
        defaultCase(node);
    }
    public void caseABComparisonfunction(ABComparisonfunction node)
    {
        defaultCase(node);
    }
    public void caseACComparisonfunction(ACComparisonfunction node)
    {
        defaultCase(node);
    }
    public void caseADComparisonfunction(ADComparisonfunction node)
    {
        defaultCase(node);
    }
    public void caseAEComparisonfunction(AEComparisonfunction node)
    {
        defaultCase(node);
    }
    public void caseAFComparisonfunction(AFComparisonfunction node)
    {
        defaultCase(node);
    }
    public void caseAUsing(AUsing node)
    {
        defaultCase(node);
    }

    public void caseTOperatorMinus(TOperatorMinus node)
    {
        defaultCase(node);
    }
    public void caseTOperatorPlus(TOperatorPlus node)
    {
        defaultCase(node);
    }
    public void caseTOperatorClosingParenthesis(TOperatorClosingParenthesis node)
    {
        defaultCase(node);
    }
    public void caseTKeywordLt(TKeywordLt node)
    {
        defaultCase(node);
    }
    public void caseTKeywordFor(TKeywordFor node)
    {
        defaultCase(node);
    }
    public void caseTKeywordOr(TKeywordOr node)
    {
        defaultCase(node);
    }
    public void caseTKeywordDyn(TKeywordDyn node)
    {
        defaultCase(node);
    }
    public void caseTOperatorTimes(TOperatorTimes node)
    {
        defaultCase(node);
    }
    public void caseTKeywordImport(TKeywordImport node)
    {
        defaultCase(node);
    }
    public void caseTKeywordNand(TKeywordNand node)
    {
        defaultCase(node);
    }
    public void caseTKeywordGte(TKeywordGte node)
    {
        defaultCase(node);
    }
    public void caseTKeywordDne(TKeywordDne node)
    {
        defaultCase(node);
    }
    public void caseTKeywordPlane(TKeywordPlane node)
    {
        defaultCase(node);
    }
    public void caseTOperatorClosingBrace(TOperatorClosingBrace node)
    {
        defaultCase(node);
    }
    public void caseTKeywordFrom(TKeywordFrom node)
    {
        defaultCase(node);
    }
    public void caseTKeywordElse(TKeywordElse node)
    {
        defaultCase(node);
    }
    public void caseTKeywordElif(TKeywordElif node)
    {
        defaultCase(node);
    }
    public void caseTOperatorDivide(TOperatorDivide node)
    {
        defaultCase(node);
    }
    public void caseTKeywordDeclfirst(TKeywordDeclfirst node)
    {
        defaultCase(node);
    }
    public void caseTKeywordGt(TKeywordGt node)
    {
        defaultCase(node);
    }
    public void caseTOperatorOpeningBrace(TOperatorOpeningBrace node)
    {
        defaultCase(node);
    }
    public void caseTKeywordIf(TKeywordIf node)
    {
        defaultCase(node);
    }
    public void caseTOperatorOpeningParenthesis(TOperatorOpeningParenthesis node)
    {
        defaultCase(node);
    }
    public void caseTKeywordVoid(TKeywordVoid node)
    {
        defaultCase(node);
    }
    public void caseTKeywordAnd(TKeywordAnd node)
    {
        defaultCase(node);
    }
    public void caseTKeywordXnor(TKeywordXnor node)
    {
        defaultCase(node);
    }
    public void caseTKeywordXor(TKeywordXor node)
    {
        defaultCase(node);
    }
    public void caseTKeywordNor(TKeywordNor node)
    {
        defaultCase(node);
    }
    public void caseTKeywordEql(TKeywordEql node)
    {
        defaultCase(node);
    }
    public void caseTKeywordTo(TKeywordTo node)
    {
        defaultCase(node);
    }
    public void caseTOperatorAssign(TOperatorAssign node)
    {
        defaultCase(node);
    }
    public void caseTKeywordDecl(TKeywordDecl node)
    {
        defaultCase(node);
    }
    public void caseTKeywordFunc(TKeywordFunc node)
    {
        defaultCase(node);
    }
    public void caseTKeywordLte(TKeywordLte node)
    {
        defaultCase(node);
    }
    public void caseTKeywordUsing(TKeywordUsing node)
    {
        defaultCase(node);
    }
    public void caseTKeywordExpose(TKeywordExpose node)
    {
        defaultCase(node);
    }
    public void caseTOperatorExtractMember(TOperatorExtractMember node)
    {
        defaultCase(node);
    }
    public void caseTOperatorComma(TOperatorComma node)
    {
        defaultCase(node);
    }
    public void caseTNewline(TNewline node)
    {
        defaultCase(node);
    }
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }
    public void caseTRational(TRational node)
    {
        defaultCase(node);
    }
    public void caseTString(TString node)
    {
        defaultCase(node);
    }
    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }
    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }
    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }
    public void caseTMultilineComment(TMultilineComment node)
    {
        defaultCase(node);
    }
    public void caseTIndentOpen(TIndentOpen node)
    {
        defaultCase(node);
    }
    public void caseTIndentClose(TIndentClose node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
