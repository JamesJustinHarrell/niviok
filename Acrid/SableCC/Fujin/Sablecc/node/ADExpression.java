/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ADExpression extends PExpression
{
    private PDeclareempty _declareempty_;

    public ADExpression ()
    {
    }

    public ADExpression (
            PDeclareempty _declareempty_
    )
    {
        setDeclareempty (_declareempty_);
    }

    public Object clone()
    {
        return new ADExpression (
            (PDeclareempty)cloneNode (_declareempty_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADExpression(this);
    }

    public PDeclareempty getDeclareempty ()
    {
        return _declareempty_;
    }

    public void setDeclareempty (PDeclareempty node)
    {
        if(_declareempty_ != null)
        {
            _declareempty_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declareempty_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_declareempty_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _declareempty_ == child )
        {
            _declareempty_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _declareempty_ == oldChild )
        {
            setDeclareempty ((PDeclareempty) newChild);
            return;
        }
    }

}
