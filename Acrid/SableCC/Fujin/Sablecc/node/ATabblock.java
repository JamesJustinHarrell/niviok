/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ATabblock extends PTabblock
{
    private TNewline _a_;
    private TIndentOpen _indent_open_;
    private PTabblockinside _tabblockinside_;
    private TNewline _b_;
    private TIndentClose _indent_close_;

    public ATabblock ()
    {
    }

    public ATabblock (
            TNewline _a_,
            TIndentOpen _indent_open_,
            PTabblockinside _tabblockinside_,
            TNewline _b_,
            TIndentClose _indent_close_
    )
    {
        setA (_a_);
        setIndentOpen (_indent_open_);
        setTabblockinside (_tabblockinside_);
        setB (_b_);
        setIndentClose (_indent_close_);
    }

    public Object clone()
    {
        return new ATabblock (
            (TNewline)cloneNode (_a_),
            (TIndentOpen)cloneNode (_indent_open_),
            (PTabblockinside)cloneNode (_tabblockinside_),
            (TNewline)cloneNode (_b_),
            (TIndentClose)cloneNode (_indent_close_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATabblock(this);
    }

    public TNewline getA ()
    {
        return _a_;
    }

    public void setA (TNewline node)
    {
        if(_a_ != null)
        {
            _a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _a_ = node;
    }
    public TIndentOpen getIndentOpen ()
    {
        return _indent_open_;
    }

    public void setIndentOpen (TIndentOpen node)
    {
        if(_indent_open_ != null)
        {
            _indent_open_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _indent_open_ = node;
    }
    public PTabblockinside getTabblockinside ()
    {
        return _tabblockinside_;
    }

    public void setTabblockinside (PTabblockinside node)
    {
        if(_tabblockinside_ != null)
        {
            _tabblockinside_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _tabblockinside_ = node;
    }
    public TNewline getB ()
    {
        return _b_;
    }

    public void setB (TNewline node)
    {
        if(_b_ != null)
        {
            _b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _b_ = node;
    }
    public TIndentClose getIndentClose ()
    {
        return _indent_close_;
    }

    public void setIndentClose (TIndentClose node)
    {
        if(_indent_close_ != null)
        {
            _indent_close_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _indent_close_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_a_)
            + toString (_indent_open_)
            + toString (_tabblockinside_)
            + toString (_b_)
            + toString (_indent_close_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _indent_open_ == child )
        {
            _indent_open_ = null;
            return;
        }
        if ( _tabblockinside_ == child )
        {
            _tabblockinside_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
        if ( _indent_close_ == child )
        {
            _indent_close_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            setA ((TNewline) newChild);
            return;
        }
        if ( _indent_open_ == oldChild )
        {
            setIndentOpen ((TIndentOpen) newChild);
            return;
        }
        if ( _tabblockinside_ == oldChild )
        {
            setTabblockinside ((PTabblockinside) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            setB ((TNewline) newChild);
            return;
        }
        if ( _indent_close_ == oldChild )
        {
            setIndentClose ((TIndentClose) newChild);
            return;
        }
    }

}
