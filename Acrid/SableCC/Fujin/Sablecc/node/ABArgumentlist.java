/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ABArgumentlist extends PArgumentlist
{
    private PArgumentlist _argumentlist_;
    private TOperatorComma _operator_comma_;
    private PExpression _expression_;

    public ABArgumentlist ()
    {
    }

    public ABArgumentlist (
            PArgumentlist _argumentlist_,
            TOperatorComma _operator_comma_,
            PExpression _expression_
    )
    {
        setArgumentlist (_argumentlist_);
        setOperatorComma (_operator_comma_);
        setExpression (_expression_);
    }

    public Object clone()
    {
        return new ABArgumentlist (
            (PArgumentlist)cloneNode (_argumentlist_),
            (TOperatorComma)cloneNode (_operator_comma_),
            (PExpression)cloneNode (_expression_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABArgumentlist(this);
    }

    public PArgumentlist getArgumentlist ()
    {
        return _argumentlist_;
    }

    public void setArgumentlist (PArgumentlist node)
    {
        if(_argumentlist_ != null)
        {
            _argumentlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argumentlist_ = node;
    }
    public TOperatorComma getOperatorComma ()
    {
        return _operator_comma_;
    }

    public void setOperatorComma (TOperatorComma node)
    {
        if(_operator_comma_ != null)
        {
            _operator_comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_comma_ = node;
    }
    public PExpression getExpression ()
    {
        return _expression_;
    }

    public void setExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_argumentlist_)
            + toString (_operator_comma_)
            + toString (_expression_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _argumentlist_ == child )
        {
            _argumentlist_ = null;
            return;
        }
        if ( _operator_comma_ == child )
        {
            _operator_comma_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _argumentlist_ == oldChild )
        {
            setArgumentlist ((PArgumentlist) newChild);
            return;
        }
        if ( _operator_comma_ == oldChild )
        {
            setOperatorComma ((TOperatorComma) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            setExpression ((PExpression) newChild);
            return;
        }
    }

}
