/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class AIfelse extends PIfelse
{
    private PIf _if_;
    private PElif _elif_;
    private PElse _else_;

    public AIfelse ()
    {
    }

    public AIfelse (
            PIf _if_,
            PElif _elif_,
            PElse _else_
    )
    {
        setIf (_if_);
        setElif (_elif_);
        setElse (_else_);
    }

    public Object clone()
    {
        return new AIfelse (
            (PIf)cloneNode (_if_),
            (PElif)cloneNode (_elif_),
            (PElse)cloneNode (_else_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfelse(this);
    }

    public PIf getIf ()
    {
        return _if_;
    }

    public void setIf (PIf node)
    {
        if(_if_ != null)
        {
            _if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _if_ = node;
    }
    public PElif getElif ()
    {
        return _elif_;
    }

    public void setElif (PElif node)
    {
        if(_elif_ != null)
        {
            _elif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _elif_ = node;
    }
    public PElse getElse ()
    {
        return _else_;
    }

    public void setElse (PElse node)
    {
        if(_else_ != null)
        {
            _else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _else_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_if_)
            + toString (_elif_)
            + toString (_else_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _elif_ == child )
        {
            _elif_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            setIf ((PIf) newChild);
            return;
        }
        if ( _elif_ == oldChild )
        {
            setElif ((PElif) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            setElse ((PElse) newChild);
            return;
        }
    }

}
