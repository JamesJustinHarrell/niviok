/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class AFunction extends PFunction
{
    private TKeywordFunc _keyword_func_;
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;
    private PType _type_;
    private PBlock _block_;

    public AFunction ()
    {
    }

    public AFunction (
            TKeywordFunc _keyword_func_,
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_,
            PType _type_,
            PBlock _block_
    )
    {
        setKeywordFunc (_keyword_func_);
        setOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        setOperatorClosingParenthesis (_operator_closing_parenthesis_);
        setType (_type_);
        setBlock (_block_);
    }

    public Object clone()
    {
        return new AFunction (
            (TKeywordFunc)cloneNode (_keyword_func_),
            (TOperatorOpeningParenthesis)cloneNode (_operator_opening_parenthesis_),
            (TOperatorClosingParenthesis)cloneNode (_operator_closing_parenthesis_),
            (PType)cloneNode (_type_),
            (PBlock)cloneNode (_block_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunction(this);
    }

    public TKeywordFunc getKeywordFunc ()
    {
        return _keyword_func_;
    }

    public void setKeywordFunc (TKeywordFunc node)
    {
        if(_keyword_func_ != null)
        {
            _keyword_func_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _keyword_func_ = node;
    }
    public TOperatorOpeningParenthesis getOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void setOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public TOperatorClosingParenthesis getOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void setOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }
    public PType getType ()
    {
        return _type_;
    }

    public void setType (PType node)
    {
        if(_type_ != null)
        {
            _type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _type_ = node;
    }
    public PBlock getBlock ()
    {
        return _block_;
    }

    public void setBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _block_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_keyword_func_)
            + toString (_operator_opening_parenthesis_)
            + toString (_operator_closing_parenthesis_)
            + toString (_type_)
            + toString (_block_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _keyword_func_ == child )
        {
            _keyword_func_ = null;
            return;
        }
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_func_ == oldChild )
        {
            setKeywordFunc ((TKeywordFunc) newChild);
            return;
        }
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            setOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            setOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            setType ((PType) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            setBlock ((PBlock) newChild);
            return;
        }
    }

}
