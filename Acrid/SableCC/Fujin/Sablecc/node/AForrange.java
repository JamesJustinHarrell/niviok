/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class AForrange extends PForrange
{
    private TKeywordFor _keyword_for_;
    private TIdentifier _identifier_;
    private TKeywordFrom _keyword_from_;
    private PSimple _a_;
    private TKeywordTo _keyword_to_;
    private PSimple _b_;
    private PBlock _block_;

    public AForrange ()
    {
    }

    public AForrange (
            TKeywordFor _keyword_for_,
            TIdentifier _identifier_,
            TKeywordFrom _keyword_from_,
            PSimple _a_,
            TKeywordTo _keyword_to_,
            PSimple _b_,
            PBlock _block_
    )
    {
        setKeywordFor (_keyword_for_);
        setIdentifier (_identifier_);
        setKeywordFrom (_keyword_from_);
        setA (_a_);
        setKeywordTo (_keyword_to_);
        setB (_b_);
        setBlock (_block_);
    }

    public Object clone()
    {
        return new AForrange (
            (TKeywordFor)cloneNode (_keyword_for_),
            (TIdentifier)cloneNode (_identifier_),
            (TKeywordFrom)cloneNode (_keyword_from_),
            (PSimple)cloneNode (_a_),
            (TKeywordTo)cloneNode (_keyword_to_),
            (PSimple)cloneNode (_b_),
            (PBlock)cloneNode (_block_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForrange(this);
    }

    public TKeywordFor getKeywordFor ()
    {
        return _keyword_for_;
    }

    public void setKeywordFor (TKeywordFor node)
    {
        if(_keyword_for_ != null)
        {
            _keyword_for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _keyword_for_ = node;
    }
    public TIdentifier getIdentifier ()
    {
        return _identifier_;
    }

    public void setIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }
    public TKeywordFrom getKeywordFrom ()
    {
        return _keyword_from_;
    }

    public void setKeywordFrom (TKeywordFrom node)
    {
        if(_keyword_from_ != null)
        {
            _keyword_from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _keyword_from_ = node;
    }
    public PSimple getA ()
    {
        return _a_;
    }

    public void setA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _a_ = node;
    }
    public TKeywordTo getKeywordTo ()
    {
        return _keyword_to_;
    }

    public void setKeywordTo (TKeywordTo node)
    {
        if(_keyword_to_ != null)
        {
            _keyword_to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _keyword_to_ = node;
    }
    public PSimple getB ()
    {
        return _b_;
    }

    public void setB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _b_ = node;
    }
    public PBlock getBlock ()
    {
        return _block_;
    }

    public void setBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _block_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_keyword_for_)
            + toString (_identifier_)
            + toString (_keyword_from_)
            + toString (_a_)
            + toString (_keyword_to_)
            + toString (_b_)
            + toString (_block_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _keyword_for_ == child )
        {
            _keyword_for_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _keyword_from_ == child )
        {
            _keyword_from_ = null;
            return;
        }
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _keyword_to_ == child )
        {
            _keyword_to_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_for_ == oldChild )
        {
            setKeywordFor ((TKeywordFor) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            setIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _keyword_from_ == oldChild )
        {
            setKeywordFrom ((TKeywordFrom) newChild);
            return;
        }
        if ( _a_ == oldChild )
        {
            setA ((PSimple) newChild);
            return;
        }
        if ( _keyword_to_ == oldChild )
        {
            setKeywordTo ((TKeywordTo) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            setB ((PSimple) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            setBlock ((PBlock) newChild);
            return;
        }
    }

}
