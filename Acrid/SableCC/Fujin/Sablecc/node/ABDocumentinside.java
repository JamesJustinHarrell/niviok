/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ABDocumentinside extends PDocumentinside
{
    private final LinkedList _planereference_ = new TypedLinkedList(new Planereference_Cast());
    private final LinkedList _scopealteration_ = new TypedLinkedList(new Scopealteration_Cast());
    private PDeclarefirstlist _declarefirstlist_;

    public ABDocumentinside ()
    {
    }

    public ABDocumentinside (
            List _planereference_,
            List _scopealteration_,
            PDeclarefirstlist _declarefirstlist_
    )
    {
        this._planereference_.clear();
        this._planereference_.addAll(_planereference_);
        this._scopealteration_.clear();
        this._scopealteration_.addAll(_scopealteration_);
        setDeclarefirstlist (_declarefirstlist_);
    }

    public Object clone()
    {
        return new ABDocumentinside (
            cloneList (_planereference_),
            cloneList (_scopealteration_),
            (PDeclarefirstlist)cloneNode (_declarefirstlist_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABDocumentinside(this);
    }

    public LinkedList getPlanereference ()
    {
        return _planereference_;
    }

    public void setPlanereference (List list)
    {
        _planereference_.clear();
        _planereference_.addAll(list);
    }
    public LinkedList getScopealteration ()
    {
        return _scopealteration_;
    }

    public void setScopealteration (List list)
    {
        _scopealteration_.clear();
        _scopealteration_.addAll(list);
    }
    public PDeclarefirstlist getDeclarefirstlist ()
    {
        return _declarefirstlist_;
    }

    public void setDeclarefirstlist (PDeclarefirstlist node)
    {
        if(_declarefirstlist_ != null)
        {
            _declarefirstlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declarefirstlist_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_planereference_)
            + toString (_scopealteration_)
            + toString (_declarefirstlist_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _planereference_.remove(child))
        {
            return;
        }
        if ( _scopealteration_.remove(child))
        {
            return;
        }
        if ( _declarefirstlist_ == child )
        {
            _declarefirstlist_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _planereference_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
        for(ListIterator i = _scopealteration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
        if ( _declarefirstlist_ == oldChild )
        {
            setDeclarefirstlist ((PDeclarefirstlist) newChild);
            return;
        }
    }

    private class Planereference_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PPlanereference node = (PPlanereference) o;

            if((node.parent() != null) &&
                (node.parent() != ABDocumentinside.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ABDocumentinside.this))
            {
                node.parent(ABDocumentinside.this);
            }

            return node;
        }
    }
    private class Scopealteration_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PScopealteration node = (PScopealteration) o;

            if((node.parent() != null) &&
                (node.parent() != ABDocumentinside.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ABDocumentinside.this))
            {
                node.parent(ABDocumentinside.this);
            }

            return node;
        }
    }
}
