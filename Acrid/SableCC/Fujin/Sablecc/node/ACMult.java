/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ACMult extends PMult
{
    private PSimple _a_;
    private TOperatorDivide _operator_divide_;
    private PSimple _b_;

    public ACMult ()
    {
    }

    public ACMult (
            PSimple _a_,
            TOperatorDivide _operator_divide_,
            PSimple _b_
    )
    {
        setA (_a_);
        setOperatorDivide (_operator_divide_);
        setB (_b_);
    }

    public Object clone()
    {
        return new ACMult (
            (PSimple)cloneNode (_a_),
            (TOperatorDivide)cloneNode (_operator_divide_),
            (PSimple)cloneNode (_b_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACMult(this);
    }

    public PSimple getA ()
    {
        return _a_;
    }

    public void setA (PSimple node)
    {
        if(_a_ != null)
        {
            _a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _a_ = node;
    }
    public TOperatorDivide getOperatorDivide ()
    {
        return _operator_divide_;
    }

    public void setOperatorDivide (TOperatorDivide node)
    {
        if(_operator_divide_ != null)
        {
            _operator_divide_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_divide_ = node;
    }
    public PSimple getB ()
    {
        return _b_;
    }

    public void setB (PSimple node)
    {
        if(_b_ != null)
        {
            _b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _b_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_a_)
            + toString (_operator_divide_)
            + toString (_b_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _operator_divide_ == child )
        {
            _operator_divide_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            setA ((PSimple) newChild);
            return;
        }
        if ( _operator_divide_ == oldChild )
        {
            setOperatorDivide ((TOperatorDivide) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            setB ((PSimple) newChild);
            return;
        }
    }

}
