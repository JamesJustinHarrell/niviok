/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ACall extends PCall
{
    private PSimple _simple_;
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private PArgumentlist _argumentlist_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;

    public ACall ()
    {
    }

    public ACall (
            PSimple _simple_,
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            PArgumentlist _argumentlist_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_
    )
    {
        setSimple (_simple_);
        setOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        setArgumentlist (_argumentlist_);
        setOperatorClosingParenthesis (_operator_closing_parenthesis_);
    }

    public Object clone()
    {
        return new ACall (
            (PSimple)cloneNode (_simple_),
            (TOperatorOpeningParenthesis)cloneNode (_operator_opening_parenthesis_),
            (PArgumentlist)cloneNode (_argumentlist_),
            (TOperatorClosingParenthesis)cloneNode (_operator_closing_parenthesis_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACall(this);
    }

    public PSimple getSimple ()
    {
        return _simple_;
    }

    public void setSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simple_ = node;
    }
    public TOperatorOpeningParenthesis getOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void setOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public PArgumentlist getArgumentlist ()
    {
        return _argumentlist_;
    }

    public void setArgumentlist (PArgumentlist node)
    {
        if(_argumentlist_ != null)
        {
            _argumentlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argumentlist_ = node;
    }
    public TOperatorClosingParenthesis getOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void setOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_simple_)
            + toString (_operator_opening_parenthesis_)
            + toString (_argumentlist_)
            + toString (_operator_closing_parenthesis_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _argumentlist_ == child )
        {
            _argumentlist_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _simple_ == oldChild )
        {
            setSimple ((PSimple) newChild);
            return;
        }
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            setOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _argumentlist_ == oldChild )
        {
            setArgumentlist ((PArgumentlist) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            setOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
    }

}
