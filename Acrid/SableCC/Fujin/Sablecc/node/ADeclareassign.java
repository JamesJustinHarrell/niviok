/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class ADeclareassign extends PDeclareassign
{
    private TKeywordDecl _keyword_decl_;
    private PSimple _simple_;
    private TIdentifier _identifier_;
    private TOperatorAssign _operator_assign_;
    private PExpression _expression_;

    public ADeclareassign ()
    {
    }

    public ADeclareassign (
            TKeywordDecl _keyword_decl_,
            PSimple _simple_,
            TIdentifier _identifier_,
            TOperatorAssign _operator_assign_,
            PExpression _expression_
    )
    {
        setKeywordDecl (_keyword_decl_);
        setSimple (_simple_);
        setIdentifier (_identifier_);
        setOperatorAssign (_operator_assign_);
        setExpression (_expression_);
    }

    public Object clone()
    {
        return new ADeclareassign (
            (TKeywordDecl)cloneNode (_keyword_decl_),
            (PSimple)cloneNode (_simple_),
            (TIdentifier)cloneNode (_identifier_),
            (TOperatorAssign)cloneNode (_operator_assign_),
            (PExpression)cloneNode (_expression_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclareassign(this);
    }

    public TKeywordDecl getKeywordDecl ()
    {
        return _keyword_decl_;
    }

    public void setKeywordDecl (TKeywordDecl node)
    {
        if(_keyword_decl_ != null)
        {
            _keyword_decl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _keyword_decl_ = node;
    }
    public PSimple getSimple ()
    {
        return _simple_;
    }

    public void setSimple (PSimple node)
    {
        if(_simple_ != null)
        {
            _simple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simple_ = node;
    }
    public TIdentifier getIdentifier ()
    {
        return _identifier_;
    }

    public void setIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }
    public TOperatorAssign getOperatorAssign ()
    {
        return _operator_assign_;
    }

    public void setOperatorAssign (TOperatorAssign node)
    {
        if(_operator_assign_ != null)
        {
            _operator_assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_assign_ = node;
    }
    public PExpression getExpression ()
    {
        return _expression_;
    }

    public void setExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_keyword_decl_)
            + toString (_simple_)
            + toString (_identifier_)
            + toString (_operator_assign_)
            + toString (_expression_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _keyword_decl_ == child )
        {
            _keyword_decl_ = null;
            return;
        }
        if ( _simple_ == child )
        {
            _simple_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _operator_assign_ == child )
        {
            _operator_assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_decl_ == oldChild )
        {
            setKeywordDecl ((TKeywordDecl) newChild);
            return;
        }
        if ( _simple_ == oldChild )
        {
            setSimple ((PSimple) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            setIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _operator_assign_ == oldChild )
        {
            setOperatorAssign ((TOperatorAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            setExpression ((PExpression) newChild);
            return;
        }
    }

}
