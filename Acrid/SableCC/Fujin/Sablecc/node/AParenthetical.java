/* This file was generated by SableCC (http://www.sablecc.org/). */

package Dextr.Sablecc.node;

import java.util.*;
import Dextr.Sablecc.analysis.*;

public final class AParenthetical extends PParenthetical
{
    private TOperatorOpeningParenthesis _operator_opening_parenthesis_;
    private PExpression _expression_;
    private TNewline _newline_;
    private TOperatorClosingParenthesis _operator_closing_parenthesis_;

    public AParenthetical ()
    {
    }

    public AParenthetical (
            TOperatorOpeningParenthesis _operator_opening_parenthesis_,
            PExpression _expression_,
            TNewline _newline_,
            TOperatorClosingParenthesis _operator_closing_parenthesis_
    )
    {
        setOperatorOpeningParenthesis (_operator_opening_parenthesis_);
        setExpression (_expression_);
        setNewline (_newline_);
        setOperatorClosingParenthesis (_operator_closing_parenthesis_);
    }

    public Object clone()
    {
        return new AParenthetical (
            (TOperatorOpeningParenthesis)cloneNode (_operator_opening_parenthesis_),
            (PExpression)cloneNode (_expression_),
            (TNewline)cloneNode (_newline_),
            (TOperatorClosingParenthesis)cloneNode (_operator_closing_parenthesis_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParenthetical(this);
    }

    public TOperatorOpeningParenthesis getOperatorOpeningParenthesis ()
    {
        return _operator_opening_parenthesis_;
    }

    public void setOperatorOpeningParenthesis (TOperatorOpeningParenthesis node)
    {
        if(_operator_opening_parenthesis_ != null)
        {
            _operator_opening_parenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_opening_parenthesis_ = node;
    }
    public PExpression getExpression ()
    {
        return _expression_;
    }

    public void setExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }
    public TNewline getNewline ()
    {
        return _newline_;
    }

    public void setNewline (TNewline node)
    {
        if(_newline_ != null)
        {
            _newline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _newline_ = node;
    }
    public TOperatorClosingParenthesis getOperatorClosingParenthesis ()
    {
        return _operator_closing_parenthesis_;
    }

    public void setOperatorClosingParenthesis (TOperatorClosingParenthesis node)
    {
        if(_operator_closing_parenthesis_ != null)
        {
            _operator_closing_parenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _operator_closing_parenthesis_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_operator_opening_parenthesis_)
            + toString (_expression_)
            + toString (_newline_)
            + toString (_operator_closing_parenthesis_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _operator_opening_parenthesis_ == child )
        {
            _operator_opening_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _newline_ == child )
        {
            _newline_ = null;
            return;
        }
        if ( _operator_closing_parenthesis_ == child )
        {
            _operator_closing_parenthesis_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _operator_opening_parenthesis_ == oldChild )
        {
            setOperatorOpeningParenthesis ((TOperatorOpeningParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            setExpression ((PExpression) newChild);
            return;
        }
        if ( _newline_ == oldChild )
        {
            setNewline ((TNewline) newChild);
            return;
        }
        if ( _operator_closing_parenthesis_ == oldChild )
        {
            setOperatorClosingParenthesis ((TOperatorClosingParenthesis) newChild);
            return;
        }
    }

}
