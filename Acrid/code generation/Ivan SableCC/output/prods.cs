/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Acrid.Ivan.SableCC.analysis;

namespace Acrid.Ivan.SableCC.node {

public abstract class PDocument : Node
{
}

public abstract class PBoolean : Node
{
}

public abstract class PDirection : Node
{
}

public abstract class PMemberstatus : Node
{
}

public abstract class PMembertype : Node
{
}

public abstract class PAnd : Node
{
}

public abstract class PDeclarefirst : Node
{
}

public abstract class PConditional : Node
{
}

public abstract class PDeclareempty : Node
{
}

public abstract class PArgument : Node
{
}

public abstract class PModule : Node
{
}

public abstract class PParameterinfo : Node
{
}

public abstract class PStatusedmember : Node
{
}

public abstract class PDictionaryentry : Node
{
}

public abstract class PImportattempt : Node
{
}

public abstract class PSelect : Node
{
}

public abstract class PGenericinterface : Node
{
}

public abstract class PParameterimpl : Node
{
}

public abstract class PXor : Node
{
}

public abstract class PRaise : Node
{
}

public abstract class PGenerator : Node
{
}

public abstract class PBreed : Node
{
}

public abstract class PNand : Node
{
}

public abstract class PHidable : Node
{
}

public abstract class PFunctioninterface : Node
{
}

public abstract class PCall : Node
{
}

public abstract class PTypeselect : Node
{
}

public abstract class PTypecase : Node
{
}

public abstract class PImport : Node
{
}

public abstract class PMethod : Node
{
}

public abstract class PFunction : Node
{
}

public abstract class PXnor : Node
{
}

public abstract class PInstantiategeneric : Node
{
}

public abstract class PDictionary : Node
{
}

public abstract class PObject : Node
{
}

public abstract class PWorker : Node
{
}

public abstract class PGenericfunction : Node
{
}

public abstract class PEnum : Node
{
}

public abstract class PDeclareassign : Node
{
}

public abstract class PCompound : Node
{
}

public abstract class PInterface : Node
{
}

public abstract class PStatementdeclaration : Node
{
}

public abstract class PSetproperty : Node
{
}

public abstract class PSieve : Node
{
}

public abstract class PExtractmember : Node
{
}

public abstract class PNor : Node
{
}

public abstract class PCase : Node
{
}

public abstract class PCatcher : Node
{
}

public abstract class PTrycatch : Node
{
}

public abstract class PCallee : Node
{
}

public abstract class PCaller : Node
{
}

public abstract class PAssign : Node
{
}

public abstract class PMemberimplementation : Node
{
}

public abstract class PInterfacemember : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PEnumentry : Node
{
}

public abstract class PBreeder : Node
{
}

public abstract class PProperty : Node
{
}

public abstract class PCurry : Node
{
}

public abstract class POr : Node
{
}


public sealed class ADocument : PDocument
{
    private PModule _module_;

    public ADocument ()
    {
    }

    public ADocument (
            PModule _module_
    )
    {
        SetModule (_module_);
    }

    public override Object Clone()
    {
        return new ADocument (
            (PModule)CloneNode (_module_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADocument(this);
    }

    public PModule GetModule ()
    {
        return _module_;
    }

    public void SetModule (PModule node)
    {
        if(_module_ != null)
        {
            _module_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _module_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_module_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _module_ == child )
        {
            _module_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _module_ == oldChild )
        {
            SetModule ((PModule) newChild);
            return;
        }
    }

}
public sealed class ATrueBoolean : PBoolean
{


    public ATrueBoolean (
    )
    {
    }

    public override Object Clone()
    {
        return new ATrueBoolean (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATrueBoolean(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFalseBoolean : PBoolean
{


    public AFalseBoolean (
    )
    {
    }

    public override Object Clone()
    {
        return new AFalseBoolean (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFalseBoolean(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AInDirection : PDirection
{


    public AInDirection (
    )
    {
    }

    public override Object Clone()
    {
        return new AInDirection (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInDirection(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOutDirection : PDirection
{


    public AOutDirection (
    )
    {
    }

    public override Object Clone()
    {
        return new AOutDirection (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOutDirection(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AInoutDirection : PDirection
{


    public AInoutDirection (
    )
    {
    }

    public override Object Clone()
    {
        return new AInoutDirection (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInoutDirection(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ANewMemberstatus : PMemberstatus
{


    public ANewMemberstatus (
    )
    {
    }

    public override Object Clone()
    {
        return new ANewMemberstatus (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewMemberstatus(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ANormalMemberstatus : PMemberstatus
{


    public ANormalMemberstatus (
    )
    {
    }

    public override Object Clone()
    {
        return new ANormalMemberstatus (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANormalMemberstatus(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeprecatedMemberstatus : PMemberstatus
{


    public ADeprecatedMemberstatus (
    )
    {
    }

    public override Object Clone()
    {
        return new ADeprecatedMemberstatus (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeprecatedMemberstatus(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ABreederMembertype : PMembertype
{


    public ABreederMembertype (
    )
    {
    }

    public override Object Clone()
    {
        return new ABreederMembertype (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreederMembertype(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ACalleeMembertype : PMembertype
{


    public ACalleeMembertype (
    )
    {
    }

    public override Object Clone()
    {
        return new ACalleeMembertype (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACalleeMembertype(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AGetterMembertype : PMembertype
{


    public AGetterMembertype (
    )
    {
    }

    public override Object Clone()
    {
        return new AGetterMembertype (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGetterMembertype(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASetterMembertype : PMembertype
{


    public ASetterMembertype (
    )
    {
    }

    public override Object Clone()
    {
        return new ASetterMembertype (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASetterMembertype(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMethodMembertype : PMembertype
{


    public AMethodMembertype (
    )
    {
    }

    public override Object Clone()
    {
        return new AMethodMembertype (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodMembertype(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAnd : PAnd
{
    private PExpression _first_;
    private PExpression _second_;

    public AAnd ()
    {
    }

    public AAnd (
            PExpression _first_,
            PExpression _second_
    )
    {
        SetFirst (_first_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new AAnd (
            (PExpression)CloneNode (_first_),
            (PExpression)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAnd(this);
    }

    public PExpression GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PExpression GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ADeclarefirst : PDeclarefirst
{
    private TIdentifier _name_;
    private PBoolean _overload_;
    private PExpression _type_;
    private PBoolean _breed_;
    private PExpression _value_;

    public ADeclarefirst ()
    {
    }

    public ADeclarefirst (
            TIdentifier _name_,
            PBoolean _overload_,
            PExpression _type_,
            PBoolean _breed_,
            PExpression _value_
    )
    {
        SetName (_name_);
        SetOverload (_overload_);
        SetType (_type_);
        SetBreed (_breed_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ADeclarefirst (
            (TIdentifier)CloneNode (_name_),
            (PBoolean)CloneNode (_overload_),
            (PExpression)CloneNode (_type_),
            (PBoolean)CloneNode (_breed_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarefirst(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PBoolean GetOverload ()
    {
        return _overload_;
    }

    public void SetOverload (PBoolean node)
    {
        if(_overload_ != null)
        {
            _overload_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _overload_ = node;
    }
    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBoolean GetBreed ()
    {
        return _breed_;
    }

    public void SetBreed (PBoolean node)
    {
        if(_breed_ != null)
        {
            _breed_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _breed_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_overload_)
            + ToString (_type_)
            + ToString (_breed_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _overload_ == child )
        {
            _overload_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _breed_ == child )
        {
            _breed_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _overload_ == oldChild )
        {
            SetOverload ((PBoolean) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        if ( _breed_ == oldChild )
        {
            SetBreed ((PBoolean) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AConditional : PConditional
{
    private PExpression _test_;
    private PExpression _result_;
    private PExpression _else_;

    public AConditional ()
    {
    }

    public AConditional (
            PExpression _test_,
            PExpression _result_,
            PExpression _else_
    )
    {
        SetTest (_test_);
        SetResult (_result_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new AConditional (
            (PExpression)CloneNode (_test_),
            (PExpression)CloneNode (_result_),
            (PExpression)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConditional(this);
    }

    public PExpression GetTest ()
    {
        return _test_;
    }

    public void SetTest (PExpression node)
    {
        if(_test_ != null)
        {
            _test_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _test_ = node;
    }
    public PExpression GetResult ()
    {
        return _result_;
    }

    public void SetResult (PExpression node)
    {
        if(_result_ != null)
        {
            _result_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _result_ = node;
    }
    public PExpression GetElse ()
    {
        return _else_;
    }

    public void SetElse (PExpression node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_test_)
            + ToString (_result_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _test_ == child )
        {
            _test_ = null;
            return;
        }
        if ( _result_ == child )
        {
            _result_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _test_ == oldChild )
        {
            SetTest ((PExpression) newChild);
            return;
        }
        if ( _result_ == oldChild )
        {
            SetResult ((PExpression) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ADeclareempty : PDeclareempty
{
    private TIdentifier _name_;
    private PExpression _type_;

    public ADeclareempty ()
    {
    }

    public ADeclareempty (
            TIdentifier _name_,
            PExpression _type_
    )
    {
        SetName (_name_);
        SetType (_type_);
    }

    public override Object Clone()
    {
        return new ADeclareempty (
            (TIdentifier)CloneNode (_name_),
            (PExpression)CloneNode (_type_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareempty(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_type_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AArgument : PArgument
{
    private TIdentifier _parametername_;
    private PExpression _value_;

    public AArgument ()
    {
    }

    public AArgument (
            TIdentifier _parametername_,
            PExpression _value_
    )
    {
        SetParametername (_parametername_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AArgument (
            (TIdentifier)CloneNode (_parametername_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArgument(this);
    }

    public TIdentifier GetParametername ()
    {
        return _parametername_;
    }

    public void SetParametername (TIdentifier node)
    {
        if(_parametername_ != null)
        {
            _parametername_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parametername_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parametername_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parametername_ == child )
        {
            _parametername_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parametername_ == oldChild )
        {
            SetParametername ((TIdentifier) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AModule : PModule
{
    private TInteger _niviokmajorversionnumber_;
    private TInteger _niviokminorversionnumber_;
    private TypedList _import_;
    private PSieve _sieve_;

    public AModule ()
    {
        this._import_ = new TypedList(new Import_Cast(this));
    }

    public AModule (
            TInteger _niviokmajorversionnumber_,
            TInteger _niviokminorversionnumber_,
            IList _import_,
            PSieve _sieve_
    )
    {
        SetNiviokmajorversionnumber (_niviokmajorversionnumber_);
        SetNiviokminorversionnumber (_niviokminorversionnumber_);
        this._import_ = new TypedList(new Import_Cast(this));
        this._import_.Clear();
        this._import_.AddAll(_import_);
        SetSieve (_sieve_);
    }

    public override Object Clone()
    {
        return new AModule (
            (TInteger)CloneNode (_niviokmajorversionnumber_),
            (TInteger)CloneNode (_niviokminorversionnumber_),
            CloneList (_import_),
            (PSieve)CloneNode (_sieve_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModule(this);
    }

    public TInteger GetNiviokmajorversionnumber ()
    {
        return _niviokmajorversionnumber_;
    }

    public void SetNiviokmajorversionnumber (TInteger node)
    {
        if(_niviokmajorversionnumber_ != null)
        {
            _niviokmajorversionnumber_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _niviokmajorversionnumber_ = node;
    }
    public TInteger GetNiviokminorversionnumber ()
    {
        return _niviokminorversionnumber_;
    }

    public void SetNiviokminorversionnumber (TInteger node)
    {
        if(_niviokminorversionnumber_ != null)
        {
            _niviokminorversionnumber_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _niviokminorversionnumber_ = node;
    }
    public IList GetImport ()
    {
        return _import_;
    }

    public void setImport (IList list)
    {
        _import_.Clear();
        _import_.AddAll(list);
    }
    public PSieve GetSieve ()
    {
        return _sieve_;
    }

    public void SetSieve (PSieve node)
    {
        if(_sieve_ != null)
        {
            _sieve_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sieve_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_niviokmajorversionnumber_)
            + ToString (_niviokminorversionnumber_)
            + ToString (_import_)
            + ToString (_sieve_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _niviokmajorversionnumber_ == child )
        {
            _niviokmajorversionnumber_ = null;
            return;
        }
        if ( _niviokminorversionnumber_ == child )
        {
            _niviokminorversionnumber_ = null;
            return;
        }
        if ( _import_.Contains(child) )
        {
            _import_.Remove(child);
            return;
        }
        if ( _sieve_ == child )
        {
            _sieve_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _niviokmajorversionnumber_ == oldChild )
        {
            SetNiviokmajorversionnumber ((TInteger) newChild);
            return;
        }
        if ( _niviokminorversionnumber_ == oldChild )
        {
            SetNiviokminorversionnumber ((TInteger) newChild);
            return;
        }
        for ( int i = 0; i < _import_.Count; i++ )
        {
            Node n = (Node)_import_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _import_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _import_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _sieve_ == oldChild )
        {
            SetSieve ((PSieve) newChild);
            return;
        }
    }

    private class Import_Cast : Cast
    {
        AModule obj;

        internal Import_Cast (AModule obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PImport node = (PImport) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PImport node = (PImport) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AParameterinfo : PParameterinfo
{
    private PDirection _direction_;
    private PExpression _type_;
    private TIdentifier _name_;
    private PBoolean _hasdefaultvalue_;

    public AParameterinfo ()
    {
    }

    public AParameterinfo (
            PDirection _direction_,
            PExpression _type_,
            TIdentifier _name_,
            PBoolean _hasdefaultvalue_
    )
    {
        SetDirection (_direction_);
        SetType (_type_);
        SetName (_name_);
        SetHasdefaultvalue (_hasdefaultvalue_);
    }

    public override Object Clone()
    {
        return new AParameterinfo (
            (PDirection)CloneNode (_direction_),
            (PExpression)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PBoolean)CloneNode (_hasdefaultvalue_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameterinfo(this);
    }

    public PDirection GetDirection ()
    {
        return _direction_;
    }

    public void SetDirection (PDirection node)
    {
        if(_direction_ != null)
        {
            _direction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _direction_ = node;
    }
    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PBoolean GetHasdefaultvalue ()
    {
        return _hasdefaultvalue_;
    }

    public void SetHasdefaultvalue (PBoolean node)
    {
        if(_hasdefaultvalue_ != null)
        {
            _hasdefaultvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _hasdefaultvalue_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_direction_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_hasdefaultvalue_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _direction_ == child )
        {
            _direction_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _hasdefaultvalue_ == child )
        {
            _hasdefaultvalue_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _direction_ == oldChild )
        {
            SetDirection ((PDirection) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _hasdefaultvalue_ == oldChild )
        {
            SetHasdefaultvalue ((PBoolean) newChild);
            return;
        }
    }

}
public sealed class AStatusedmember : PStatusedmember
{
    private PMemberstatus _memberstatus_;
    private PInterfacemember _member_;

    public AStatusedmember ()
    {
    }

    public AStatusedmember (
            PMemberstatus _memberstatus_,
            PInterfacemember _member_
    )
    {
        SetMemberstatus (_memberstatus_);
        SetMember (_member_);
    }

    public override Object Clone()
    {
        return new AStatusedmember (
            (PMemberstatus)CloneNode (_memberstatus_),
            (PInterfacemember)CloneNode (_member_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStatusedmember(this);
    }

    public PMemberstatus GetMemberstatus ()
    {
        return _memberstatus_;
    }

    public void SetMemberstatus (PMemberstatus node)
    {
        if(_memberstatus_ != null)
        {
            _memberstatus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _memberstatus_ = node;
    }
    public PInterfacemember GetMember ()
    {
        return _member_;
    }

    public void SetMember (PInterfacemember node)
    {
        if(_member_ != null)
        {
            _member_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _member_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_memberstatus_)
            + ToString (_member_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _memberstatus_ == child )
        {
            _memberstatus_ = null;
            return;
        }
        if ( _member_ == child )
        {
            _member_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _memberstatus_ == oldChild )
        {
            SetMemberstatus ((PMemberstatus) newChild);
            return;
        }
        if ( _member_ == oldChild )
        {
            SetMember ((PInterfacemember) newChild);
            return;
        }
    }

}
public sealed class ADictionaryentry : PDictionaryentry
{
    private PExpression _key_;
    private PExpression _value_;

    public ADictionaryentry ()
    {
    }

    public ADictionaryentry (
            PExpression _key_,
            PExpression _value_
    )
    {
        SetKey (_key_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ADictionaryentry (
            (PExpression)CloneNode (_key_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADictionaryentry(this);
    }

    public PExpression GetKey ()
    {
        return _key_;
    }

    public void SetKey (PExpression node)
    {
        if(_key_ != null)
        {
            _key_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _key_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_key_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _key_ == child )
        {
            _key_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _key_ == oldChild )
        {
            SetKey ((PExpression) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AImportattempt : PImportattempt
{
    private TString _scheme_;
    private TString _body_;

    public AImportattempt ()
    {
    }

    public AImportattempt (
            TString _scheme_,
            TString _body_
    )
    {
        SetScheme (_scheme_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AImportattempt (
            (TString)CloneNode (_scheme_),
            (TString)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAImportattempt(this);
    }

    public TString GetScheme ()
    {
        return _scheme_;
    }

    public void SetScheme (TString node)
    {
        if(_scheme_ != null)
        {
            _scheme_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _scheme_ = node;
    }
    public TString GetBody ()
    {
        return _body_;
    }

    public void SetBody (TString node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_scheme_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _scheme_ == child )
        {
            _scheme_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _scheme_ == oldChild )
        {
            SetScheme ((TString) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((TString) newChild);
            return;
        }
    }

}
public sealed class ASelect : PSelect
{
    private PExpression _inputvalue_;
    private TypedList _case_;
    private PExpression _else_;

    public ASelect ()
    {
        this._case_ = new TypedList(new Case_Cast(this));
    }

    public ASelect (
            PExpression _inputvalue_,
            IList _case_,
            PExpression _else_
    )
    {
        SetInputvalue (_inputvalue_);
        this._case_ = new TypedList(new Case_Cast(this));
        this._case_.Clear();
        this._case_.AddAll(_case_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new ASelect (
            (PExpression)CloneNode (_inputvalue_),
            CloneList (_case_),
            (PExpression)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASelect(this);
    }

    public PExpression GetInputvalue ()
    {
        return _inputvalue_;
    }

    public void SetInputvalue (PExpression node)
    {
        if(_inputvalue_ != null)
        {
            _inputvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _inputvalue_ = node;
    }
    public IList GetCase ()
    {
        return _case_;
    }

    public void setCase (IList list)
    {
        _case_.Clear();
        _case_.AddAll(list);
    }
    public PExpression GetElse ()
    {
        return _else_;
    }

    public void SetElse (PExpression node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_inputvalue_)
            + ToString (_case_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _inputvalue_ == child )
        {
            _inputvalue_ = null;
            return;
        }
        if ( _case_.Contains(child) )
        {
            _case_.Remove(child);
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _inputvalue_ == oldChild )
        {
            SetInputvalue ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _case_.Count; i++ )
        {
            Node n = (Node)_case_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _case_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _case_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PExpression) newChild);
            return;
        }
    }

    private class Case_Cast : Cast
    {
        ASelect obj;

        internal Case_Cast (ASelect obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PCase node = (PCase) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PCase node = (PCase) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AGenericinterface : PGenericinterface
{
    private TypedList _parameter_;
    private PInterface _interface_;

    public AGenericinterface ()
    {
        this._parameter_ = new TypedList(new Parameter_Cast(this));
    }

    public AGenericinterface (
            IList _parameter_,
            PInterface _interface_
    )
    {
        this._parameter_ = new TypedList(new Parameter_Cast(this));
        this._parameter_.Clear();
        this._parameter_.AddAll(_parameter_);
        SetInterface (_interface_);
    }

    public override Object Clone()
    {
        return new AGenericinterface (
            CloneList (_parameter_),
            (PInterface)CloneNode (_interface_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGenericinterface(this);
    }

    public IList GetParameter ()
    {
        return _parameter_;
    }

    public void setParameter (IList list)
    {
        _parameter_.Clear();
        _parameter_.AddAll(list);
    }
    public PInterface GetInterface ()
    {
        return _interface_;
    }

    public void SetInterface (PInterface node)
    {
        if(_interface_ != null)
        {
            _interface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _interface_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
            + ToString (_interface_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_.Contains(child) )
        {
            _parameter_.Remove(child);
            return;
        }
        if ( _interface_ == child )
        {
            _interface_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _parameter_.Count; i++ )
        {
            Node n = (Node)_parameter_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _parameter_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _parameter_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _interface_ == oldChild )
        {
            SetInterface ((PInterface) newChild);
            return;
        }
    }

    private class Parameter_Cast : Cast
    {
        AGenericinterface obj;

        internal Parameter_Cast (AGenericinterface obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AParameterimpl : PParameterimpl
{
    private PDirection _direction_;
    private PExpression _type_;
    private TIdentifier _name_;
    private PExpression _defaultvalue_;

    public AParameterimpl ()
    {
    }

    public AParameterimpl (
            PDirection _direction_,
            PExpression _type_,
            TIdentifier _name_,
            PExpression _defaultvalue_
    )
    {
        SetDirection (_direction_);
        SetType (_type_);
        SetName (_name_);
        SetDefaultvalue (_defaultvalue_);
    }

    public override Object Clone()
    {
        return new AParameterimpl (
            (PDirection)CloneNode (_direction_),
            (PExpression)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PExpression)CloneNode (_defaultvalue_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameterimpl(this);
    }

    public PDirection GetDirection ()
    {
        return _direction_;
    }

    public void SetDirection (PDirection node)
    {
        if(_direction_ != null)
        {
            _direction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _direction_ = node;
    }
    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExpression GetDefaultvalue ()
    {
        return _defaultvalue_;
    }

    public void SetDefaultvalue (PExpression node)
    {
        if(_defaultvalue_ != null)
        {
            _defaultvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _defaultvalue_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_direction_)
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_defaultvalue_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _direction_ == child )
        {
            _direction_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _defaultvalue_ == child )
        {
            _defaultvalue_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _direction_ == oldChild )
        {
            SetDirection ((PDirection) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _defaultvalue_ == oldChild )
        {
            SetDefaultvalue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AXor : PXor
{
    private PExpression _first_;
    private PExpression _second_;

    public AXor ()
    {
    }

    public AXor (
            PExpression _first_,
            PExpression _second_
    )
    {
        SetFirst (_first_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new AXor (
            (PExpression)CloneNode (_first_),
            (PExpression)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAXor(this);
    }

    public PExpression GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PExpression GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ARaise : PRaise
{
    private PExpression _value_;

    public ARaise ()
    {
    }

    public ARaise (
            PExpression _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ARaise (
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARaise(this);
    }

    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AGenerator : PGenerator
{
    private PExpression _type_;
    private PExpression _body_;

    public AGenerator ()
    {
    }

    public AGenerator (
            PExpression _type_,
            PExpression _body_
    )
    {
        SetType (_type_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AGenerator (
            (PExpression)CloneNode (_type_),
            (PExpression)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGenerator(this);
    }

    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PExpression GetBody ()
    {
        return _body_;
    }

    public void SetBody (PExpression node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABreed : PBreed
{
    private PExpression _parent_;
    private PExpression _interface_;

    public ABreed ()
    {
    }

    public ABreed (
            PExpression _parent_,
            PExpression _interface_
    )
    {
        SetParent (_parent_);
        SetInterface (_interface_);
    }

    public override Object Clone()
    {
        return new ABreed (
            (PExpression)CloneNode (_parent_),
            (PExpression)CloneNode (_interface_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreed(this);
    }

    public PExpression GetParent ()
    {
        return _parent_;
    }

    public void SetParent (PExpression node)
    {
        if(_parent_ != null)
        {
            _parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parent_ = node;
    }
    public PExpression GetInterface ()
    {
        return _interface_;
    }

    public void SetInterface (PExpression node)
    {
        if(_interface_ != null)
        {
            _interface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _interface_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parent_)
            + ToString (_interface_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parent_ == child )
        {
            _parent_ = null;
            return;
        }
        if ( _interface_ == child )
        {
            _interface_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parent_ == oldChild )
        {
            SetParent ((PExpression) newChild);
            return;
        }
        if ( _interface_ == oldChild )
        {
            SetInterface ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ANand : PNand
{
    private PExpression _first_;
    private PExpression _second_;

    public ANand ()
    {
    }

    public ANand (
            PExpression _first_,
            PExpression _second_
    )
    {
        SetFirst (_first_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new ANand (
            (PExpression)CloneNode (_first_),
            (PExpression)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANand(this);
    }

    public PExpression GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PExpression GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AHidable : PHidable
{
    private PBoolean _hidden_;
    private PStatementdeclaration _declaration_;

    public AHidable ()
    {
    }

    public AHidable (
            PBoolean _hidden_,
            PStatementdeclaration _declaration_
    )
    {
        SetHidden (_hidden_);
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new AHidable (
            (PBoolean)CloneNode (_hidden_),
            (PStatementdeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHidable(this);
    }

    public PBoolean GetHidden ()
    {
        return _hidden_;
    }

    public void SetHidden (PBoolean node)
    {
        if(_hidden_ != null)
        {
            _hidden_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _hidden_ = node;
    }
    public PStatementdeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PStatementdeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_hidden_)
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _hidden_ == child )
        {
            _hidden_ = null;
            return;
        }
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _hidden_ == oldChild )
        {
            SetHidden ((PBoolean) newChild);
            return;
        }
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PStatementdeclaration) newChild);
            return;
        }
    }

}
public sealed class AFunctioninterface : PFunctioninterface
{
    private PExpression _templateargumentcount_;
    private TypedList _parameterinfo_;
    private PExpression _returntype_;

    public AFunctioninterface ()
    {
        this._parameterinfo_ = new TypedList(new Parameterinfo_Cast(this));
    }

    public AFunctioninterface (
            PExpression _templateargumentcount_,
            IList _parameterinfo_,
            PExpression _returntype_
    )
    {
        SetTemplateargumentcount (_templateargumentcount_);
        this._parameterinfo_ = new TypedList(new Parameterinfo_Cast(this));
        this._parameterinfo_.Clear();
        this._parameterinfo_.AddAll(_parameterinfo_);
        SetReturntype (_returntype_);
    }

    public override Object Clone()
    {
        return new AFunctioninterface (
            (PExpression)CloneNode (_templateargumentcount_),
            CloneList (_parameterinfo_),
            (PExpression)CloneNode (_returntype_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctioninterface(this);
    }

    public PExpression GetTemplateargumentcount ()
    {
        return _templateargumentcount_;
    }

    public void SetTemplateargumentcount (PExpression node)
    {
        if(_templateargumentcount_ != null)
        {
            _templateargumentcount_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _templateargumentcount_ = node;
    }
    public IList GetParameterinfo ()
    {
        return _parameterinfo_;
    }

    public void setParameterinfo (IList list)
    {
        _parameterinfo_.Clear();
        _parameterinfo_.AddAll(list);
    }
    public PExpression GetReturntype ()
    {
        return _returntype_;
    }

    public void SetReturntype (PExpression node)
    {
        if(_returntype_ != null)
        {
            _returntype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _returntype_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_templateargumentcount_)
            + ToString (_parameterinfo_)
            + ToString (_returntype_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _templateargumentcount_ == child )
        {
            _templateargumentcount_ = null;
            return;
        }
        if ( _parameterinfo_.Contains(child) )
        {
            _parameterinfo_.Remove(child);
            return;
        }
        if ( _returntype_ == child )
        {
            _returntype_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _templateargumentcount_ == oldChild )
        {
            SetTemplateargumentcount ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _parameterinfo_.Count; i++ )
        {
            Node n = (Node)_parameterinfo_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _parameterinfo_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _parameterinfo_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _returntype_ == oldChild )
        {
            SetReturntype ((PExpression) newChild);
            return;
        }
    }

    private class Parameterinfo_Cast : Cast
    {
        AFunctioninterface obj;

        internal Parameterinfo_Cast (AFunctioninterface obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACall : PCall
{
    private PExpression _receiver_;
    private TypedList _argument_;

    public ACall ()
    {
        this._argument_ = new TypedList(new Argument_Cast(this));
    }

    public ACall (
            PExpression _receiver_,
            IList _argument_
    )
    {
        SetReceiver (_receiver_);
        this._argument_ = new TypedList(new Argument_Cast(this));
        this._argument_.Clear();
        this._argument_.AddAll(_argument_);
    }

    public override Object Clone()
    {
        return new ACall (
            (PExpression)CloneNode (_receiver_),
            CloneList (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACall(this);
    }

    public PExpression GetReceiver ()
    {
        return _receiver_;
    }

    public void SetReceiver (PExpression node)
    {
        if(_receiver_ != null)
        {
            _receiver_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _receiver_ = node;
    }
    public IList GetArgument ()
    {
        return _argument_;
    }

    public void setArgument (IList list)
    {
        _argument_.Clear();
        _argument_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_receiver_)
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _receiver_ == child )
        {
            _receiver_ = null;
            return;
        }
        if ( _argument_.Contains(child) )
        {
            _argument_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _receiver_ == oldChild )
        {
            SetReceiver ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _argument_.Count; i++ )
        {
            Node n = (Node)_argument_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _argument_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _argument_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Argument_Cast : Cast
    {
        ACall obj;

        internal Argument_Cast (ACall obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PArgument node = (PArgument) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PArgument node = (PArgument) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATypeselect : PTypeselect
{
    private PExpression _inputvalue_;
    private TIdentifier _castedname_;
    private PBoolean _requirematch_;
    private TypedList _typecase_;
    private PExpression _else_;

    public ATypeselect ()
    {
        this._typecase_ = new TypedList(new Typecase_Cast(this));
    }

    public ATypeselect (
            PExpression _inputvalue_,
            TIdentifier _castedname_,
            PBoolean _requirematch_,
            IList _typecase_,
            PExpression _else_
    )
    {
        SetInputvalue (_inputvalue_);
        SetCastedname (_castedname_);
        SetRequirematch (_requirematch_);
        this._typecase_ = new TypedList(new Typecase_Cast(this));
        this._typecase_.Clear();
        this._typecase_.AddAll(_typecase_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new ATypeselect (
            (PExpression)CloneNode (_inputvalue_),
            (TIdentifier)CloneNode (_castedname_),
            (PBoolean)CloneNode (_requirematch_),
            CloneList (_typecase_),
            (PExpression)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATypeselect(this);
    }

    public PExpression GetInputvalue ()
    {
        return _inputvalue_;
    }

    public void SetInputvalue (PExpression node)
    {
        if(_inputvalue_ != null)
        {
            _inputvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _inputvalue_ = node;
    }
    public TIdentifier GetCastedname ()
    {
        return _castedname_;
    }

    public void SetCastedname (TIdentifier node)
    {
        if(_castedname_ != null)
        {
            _castedname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _castedname_ = node;
    }
    public PBoolean GetRequirematch ()
    {
        return _requirematch_;
    }

    public void SetRequirematch (PBoolean node)
    {
        if(_requirematch_ != null)
        {
            _requirematch_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _requirematch_ = node;
    }
    public IList GetTypecase ()
    {
        return _typecase_;
    }

    public void setTypecase (IList list)
    {
        _typecase_.Clear();
        _typecase_.AddAll(list);
    }
    public PExpression GetElse ()
    {
        return _else_;
    }

    public void SetElse (PExpression node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_inputvalue_)
            + ToString (_castedname_)
            + ToString (_requirematch_)
            + ToString (_typecase_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _inputvalue_ == child )
        {
            _inputvalue_ = null;
            return;
        }
        if ( _castedname_ == child )
        {
            _castedname_ = null;
            return;
        }
        if ( _requirematch_ == child )
        {
            _requirematch_ = null;
            return;
        }
        if ( _typecase_.Contains(child) )
        {
            _typecase_.Remove(child);
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _inputvalue_ == oldChild )
        {
            SetInputvalue ((PExpression) newChild);
            return;
        }
        if ( _castedname_ == oldChild )
        {
            SetCastedname ((TIdentifier) newChild);
            return;
        }
        if ( _requirematch_ == oldChild )
        {
            SetRequirematch ((PBoolean) newChild);
            return;
        }
        for ( int i = 0; i < _typecase_.Count; i++ )
        {
            Node n = (Node)_typecase_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _typecase_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _typecase_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PExpression) newChild);
            return;
        }
    }

    private class Typecase_Cast : Cast
    {
        ATypeselect obj;

        internal Typecase_Cast (ATypeselect obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PTypecase node = (PTypecase) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PTypecase node = (PTypecase) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATypecase : PTypecase
{
    private TypedList _testtype_;
    private PExpression _result_;

    public ATypecase ()
    {
        this._testtype_ = new TypedList(new Testtype_Cast(this));
    }

    public ATypecase (
            IList _testtype_,
            PExpression _result_
    )
    {
        this._testtype_ = new TypedList(new Testtype_Cast(this));
        this._testtype_.Clear();
        this._testtype_.AddAll(_testtype_);
        SetResult (_result_);
    }

    public override Object Clone()
    {
        return new ATypecase (
            CloneList (_testtype_),
            (PExpression)CloneNode (_result_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATypecase(this);
    }

    public IList GetTesttype ()
    {
        return _testtype_;
    }

    public void setTesttype (IList list)
    {
        _testtype_.Clear();
        _testtype_.AddAll(list);
    }
    public PExpression GetResult ()
    {
        return _result_;
    }

    public void SetResult (PExpression node)
    {
        if(_result_ != null)
        {
            _result_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _result_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_testtype_)
            + ToString (_result_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _testtype_.Contains(child) )
        {
            _testtype_.Remove(child);
            return;
        }
        if ( _result_ == child )
        {
            _result_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _testtype_.Count; i++ )
        {
            Node n = (Node)_testtype_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _testtype_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _testtype_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _result_ == oldChild )
        {
            SetResult ((PExpression) newChild);
            return;
        }
    }

    private class Testtype_Cast : Cast
    {
        ATypecase obj;

        internal Testtype_Cast (ATypecase obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExpression node = (PExpression) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AImport : PImport
{
    private TIdentifier _alias_;
    private TypedList _importattempt_;

    public AImport ()
    {
        this._importattempt_ = new TypedList(new Importattempt_Cast(this));
    }

    public AImport (
            TIdentifier _alias_,
            IList _importattempt_
    )
    {
        SetAlias (_alias_);
        this._importattempt_ = new TypedList(new Importattempt_Cast(this));
        this._importattempt_.Clear();
        this._importattempt_.AddAll(_importattempt_);
    }

    public override Object Clone()
    {
        return new AImport (
            (TIdentifier)CloneNode (_alias_),
            CloneList (_importattempt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAImport(this);
    }

    public TIdentifier GetAlias ()
    {
        return _alias_;
    }

    public void SetAlias (TIdentifier node)
    {
        if(_alias_ != null)
        {
            _alias_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alias_ = node;
    }
    public IList GetImportattempt ()
    {
        return _importattempt_;
    }

    public void setImportattempt (IList list)
    {
        _importattempt_.Clear();
        _importattempt_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_alias_)
            + ToString (_importattempt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _alias_ == child )
        {
            _alias_ = null;
            return;
        }
        if ( _importattempt_.Contains(child) )
        {
            _importattempt_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _alias_ == oldChild )
        {
            SetAlias ((TIdentifier) newChild);
            return;
        }
        for ( int i = 0; i < _importattempt_.Count; i++ )
        {
            Node n = (Node)_importattempt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _importattempt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _importattempt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Importattempt_Cast : Cast
    {
        AImport obj;

        internal Importattempt_Cast (AImport obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PImportattempt node = (PImportattempt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PImportattempt node = (PImportattempt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AMethod : PMethod
{
    private TIdentifier _name_;
    private PExpression _interface_;

    public AMethod ()
    {
    }

    public AMethod (
            TIdentifier _name_,
            PExpression _interface_
    )
    {
        SetName (_name_);
        SetInterface (_interface_);
    }

    public override Object Clone()
    {
        return new AMethod (
            (TIdentifier)CloneNode (_name_),
            (PExpression)CloneNode (_interface_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethod(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExpression GetInterface ()
    {
        return _interface_;
    }

    public void SetInterface (PExpression node)
    {
        if(_interface_ != null)
        {
            _interface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _interface_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_interface_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _interface_ == child )
        {
            _interface_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _interface_ == oldChild )
        {
            SetInterface ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AFunction : PFunction
{
    private TypedList _parameterimpl_;
    private PExpression _returntype_;
    private PExpression _body_;

    public AFunction ()
    {
        this._parameterimpl_ = new TypedList(new Parameterimpl_Cast(this));
    }

    public AFunction (
            IList _parameterimpl_,
            PExpression _returntype_,
            PExpression _body_
    )
    {
        this._parameterimpl_ = new TypedList(new Parameterimpl_Cast(this));
        this._parameterimpl_.Clear();
        this._parameterimpl_.AddAll(_parameterimpl_);
        SetReturntype (_returntype_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AFunction (
            CloneList (_parameterimpl_),
            (PExpression)CloneNode (_returntype_),
            (PExpression)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunction(this);
    }

    public IList GetParameterimpl ()
    {
        return _parameterimpl_;
    }

    public void setParameterimpl (IList list)
    {
        _parameterimpl_.Clear();
        _parameterimpl_.AddAll(list);
    }
    public PExpression GetReturntype ()
    {
        return _returntype_;
    }

    public void SetReturntype (PExpression node)
    {
        if(_returntype_ != null)
        {
            _returntype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _returntype_ = node;
    }
    public PExpression GetBody ()
    {
        return _body_;
    }

    public void SetBody (PExpression node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameterimpl_)
            + ToString (_returntype_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameterimpl_.Contains(child) )
        {
            _parameterimpl_.Remove(child);
            return;
        }
        if ( _returntype_ == child )
        {
            _returntype_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _parameterimpl_.Count; i++ )
        {
            Node n = (Node)_parameterimpl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _parameterimpl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _parameterimpl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _returntype_ == oldChild )
        {
            SetReturntype ((PExpression) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PExpression) newChild);
            return;
        }
    }

    private class Parameterimpl_Cast : Cast
    {
        AFunction obj;

        internal Parameterimpl_Cast (AFunction obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParameterimpl node = (PParameterimpl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParameterimpl node = (PParameterimpl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AXnor : PXnor
{
    private PExpression _first_;
    private PExpression _second_;

    public AXnor ()
    {
    }

    public AXnor (
            PExpression _first_,
            PExpression _second_
    )
    {
        SetFirst (_first_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new AXnor (
            (PExpression)CloneNode (_first_),
            (PExpression)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAXnor(this);
    }

    public PExpression GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PExpression GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AInstantiategeneric : PInstantiategeneric
{
    private PExpression _generic_;
    private TypedList _argument_;

    public AInstantiategeneric ()
    {
        this._argument_ = new TypedList(new Argument_Cast(this));
    }

    public AInstantiategeneric (
            PExpression _generic_,
            IList _argument_
    )
    {
        SetGeneric (_generic_);
        this._argument_ = new TypedList(new Argument_Cast(this));
        this._argument_.Clear();
        this._argument_.AddAll(_argument_);
    }

    public override Object Clone()
    {
        return new AInstantiategeneric (
            (PExpression)CloneNode (_generic_),
            CloneList (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInstantiategeneric(this);
    }

    public PExpression GetGeneric ()
    {
        return _generic_;
    }

    public void SetGeneric (PExpression node)
    {
        if(_generic_ != null)
        {
            _generic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _generic_ = node;
    }
    public IList GetArgument ()
    {
        return _argument_;
    }

    public void setArgument (IList list)
    {
        _argument_.Clear();
        _argument_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_generic_)
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _generic_ == child )
        {
            _generic_ = null;
            return;
        }
        if ( _argument_.Contains(child) )
        {
            _argument_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _generic_ == oldChild )
        {
            SetGeneric ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _argument_.Count; i++ )
        {
            Node n = (Node)_argument_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _argument_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _argument_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Argument_Cast : Cast
    {
        AInstantiategeneric obj;

        internal Argument_Cast (AInstantiategeneric obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PArgument node = (PArgument) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PArgument node = (PArgument) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ADictionary : PDictionary
{
    private PExpression _keytype_;
    private PExpression _valuetype_;
    private TypedList _dictionaryentry_;

    public ADictionary ()
    {
        this._dictionaryentry_ = new TypedList(new Dictionaryentry_Cast(this));
    }

    public ADictionary (
            PExpression _keytype_,
            PExpression _valuetype_,
            IList _dictionaryentry_
    )
    {
        SetKeytype (_keytype_);
        SetValuetype (_valuetype_);
        this._dictionaryentry_ = new TypedList(new Dictionaryentry_Cast(this));
        this._dictionaryentry_.Clear();
        this._dictionaryentry_.AddAll(_dictionaryentry_);
    }

    public override Object Clone()
    {
        return new ADictionary (
            (PExpression)CloneNode (_keytype_),
            (PExpression)CloneNode (_valuetype_),
            CloneList (_dictionaryentry_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADictionary(this);
    }

    public PExpression GetKeytype ()
    {
        return _keytype_;
    }

    public void SetKeytype (PExpression node)
    {
        if(_keytype_ != null)
        {
            _keytype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keytype_ = node;
    }
    public PExpression GetValuetype ()
    {
        return _valuetype_;
    }

    public void SetValuetype (PExpression node)
    {
        if(_valuetype_ != null)
        {
            _valuetype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _valuetype_ = node;
    }
    public IList GetDictionaryentry ()
    {
        return _dictionaryentry_;
    }

    public void setDictionaryentry (IList list)
    {
        _dictionaryentry_.Clear();
        _dictionaryentry_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_keytype_)
            + ToString (_valuetype_)
            + ToString (_dictionaryentry_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keytype_ == child )
        {
            _keytype_ = null;
            return;
        }
        if ( _valuetype_ == child )
        {
            _valuetype_ = null;
            return;
        }
        if ( _dictionaryentry_.Contains(child) )
        {
            _dictionaryentry_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keytype_ == oldChild )
        {
            SetKeytype ((PExpression) newChild);
            return;
        }
        if ( _valuetype_ == oldChild )
        {
            SetValuetype ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _dictionaryentry_.Count; i++ )
        {
            Node n = (Node)_dictionaryentry_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _dictionaryentry_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _dictionaryentry_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Dictionaryentry_Cast : Cast
    {
        ADictionary obj;

        internal Dictionaryentry_Cast (ADictionary obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDictionaryentry node = (PDictionaryentry) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDictionaryentry node = (PDictionaryentry) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AObject : PObject
{
    private TypedList _worker_;

    public AObject ()
    {
        this._worker_ = new TypedList(new Worker_Cast(this));
    }

    public AObject (
            IList _worker_
    )
    {
        this._worker_ = new TypedList(new Worker_Cast(this));
        this._worker_.Clear();
        this._worker_.AddAll(_worker_);
    }

    public override Object Clone()
    {
        return new AObject (
            CloneList (_worker_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAObject(this);
    }

    public IList GetWorker ()
    {
        return _worker_;
    }

    public void setWorker (IList list)
    {
        _worker_.Clear();
        _worker_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_worker_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _worker_.Contains(child) )
        {
            _worker_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _worker_.Count; i++ )
        {
            Node n = (Node)_worker_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _worker_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _worker_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Worker_Cast : Cast
    {
        AObject obj;

        internal Worker_Cast (AObject obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PWorker node = (PWorker) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PWorker node = (PWorker) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWorker : PWorker
{
    private PExpression _face_;
    private TypedList _childworker_;
    private TypedList _memberimplementation_;

    public AWorker ()
    {
        this._childworker_ = new TypedList(new Childworker_Cast(this));
        this._memberimplementation_ = new TypedList(new Memberimplementation_Cast(this));
    }

    public AWorker (
            PExpression _face_,
            IList _childworker_,
            IList _memberimplementation_
    )
    {
        SetFace (_face_);
        this._childworker_ = new TypedList(new Childworker_Cast(this));
        this._childworker_.Clear();
        this._childworker_.AddAll(_childworker_);
        this._memberimplementation_ = new TypedList(new Memberimplementation_Cast(this));
        this._memberimplementation_.Clear();
        this._memberimplementation_.AddAll(_memberimplementation_);
    }

    public override Object Clone()
    {
        return new AWorker (
            (PExpression)CloneNode (_face_),
            CloneList (_childworker_),
            CloneList (_memberimplementation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWorker(this);
    }

    public PExpression GetFace ()
    {
        return _face_;
    }

    public void SetFace (PExpression node)
    {
        if(_face_ != null)
        {
            _face_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _face_ = node;
    }
    public IList GetChildworker ()
    {
        return _childworker_;
    }

    public void setChildworker (IList list)
    {
        _childworker_.Clear();
        _childworker_.AddAll(list);
    }
    public IList GetMemberimplementation ()
    {
        return _memberimplementation_;
    }

    public void setMemberimplementation (IList list)
    {
        _memberimplementation_.Clear();
        _memberimplementation_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_face_)
            + ToString (_childworker_)
            + ToString (_memberimplementation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _face_ == child )
        {
            _face_ = null;
            return;
        }
        if ( _childworker_.Contains(child) )
        {
            _childworker_.Remove(child);
            return;
        }
        if ( _memberimplementation_.Contains(child) )
        {
            _memberimplementation_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _face_ == oldChild )
        {
            SetFace ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _childworker_.Count; i++ )
        {
            Node n = (Node)_childworker_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _childworker_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _childworker_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _memberimplementation_.Count; i++ )
        {
            Node n = (Node)_memberimplementation_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _memberimplementation_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _memberimplementation_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Childworker_Cast : Cast
    {
        AWorker obj;

        internal Childworker_Cast (AWorker obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PWorker node = (PWorker) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PWorker node = (PWorker) o;
            node.Parent(null);
            return node;
        }
    }
    private class Memberimplementation_Cast : Cast
    {
        AWorker obj;

        internal Memberimplementation_Cast (AWorker obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PMemberimplementation node = (PMemberimplementation) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PMemberimplementation node = (PMemberimplementation) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AGenericfunction : PGenericfunction
{
    private TypedList _parameter_;
    private PFunction _function_;

    public AGenericfunction ()
    {
        this._parameter_ = new TypedList(new Parameter_Cast(this));
    }

    public AGenericfunction (
            IList _parameter_,
            PFunction _function_
    )
    {
        this._parameter_ = new TypedList(new Parameter_Cast(this));
        this._parameter_.Clear();
        this._parameter_.AddAll(_parameter_);
        SetFunction (_function_);
    }

    public override Object Clone()
    {
        return new AGenericfunction (
            CloneList (_parameter_),
            (PFunction)CloneNode (_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGenericfunction(this);
    }

    public IList GetParameter ()
    {
        return _parameter_;
    }

    public void setParameter (IList list)
    {
        _parameter_.Clear();
        _parameter_.AddAll(list);
    }
    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
            + ToString (_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_.Contains(child) )
        {
            _parameter_.Remove(child);
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _parameter_.Count; i++ )
        {
            Node n = (Node)_parameter_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _parameter_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _parameter_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
    }

    private class Parameter_Cast : Cast
    {
        AGenericfunction obj;

        internal Parameter_Cast (AGenericfunction obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AEnum : PEnum
{
    private PExpression _type_;
    private TypedList _enumentry_;

    public AEnum ()
    {
        this._enumentry_ = new TypedList(new Enumentry_Cast(this));
    }

    public AEnum (
            PExpression _type_,
            IList _enumentry_
    )
    {
        SetType (_type_);
        this._enumentry_ = new TypedList(new Enumentry_Cast(this));
        this._enumentry_.Clear();
        this._enumentry_.AddAll(_enumentry_);
    }

    public override Object Clone()
    {
        return new AEnum (
            (PExpression)CloneNode (_type_),
            CloneList (_enumentry_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEnum(this);
    }

    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public IList GetEnumentry ()
    {
        return _enumentry_;
    }

    public void setEnumentry (IList list)
    {
        _enumentry_.Clear();
        _enumentry_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_enumentry_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _enumentry_.Contains(child) )
        {
            _enumentry_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _enumentry_.Count; i++ )
        {
            Node n = (Node)_enumentry_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _enumentry_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _enumentry_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Enumentry_Cast : Cast
    {
        AEnum obj;

        internal Enumentry_Cast (AEnum obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PEnumentry node = (PEnumentry) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PEnumentry node = (PEnumentry) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ADeclareassign : PDeclareassign
{
    private TIdentifier _name_;
    private PBoolean _constant_;
    private PExpression _type_;
    private PBoolean _breed_;
    private PExpression _value_;

    public ADeclareassign ()
    {
    }

    public ADeclareassign (
            TIdentifier _name_,
            PBoolean _constant_,
            PExpression _type_,
            PBoolean _breed_,
            PExpression _value_
    )
    {
        SetName (_name_);
        SetConstant (_constant_);
        SetType (_type_);
        SetBreed (_breed_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ADeclareassign (
            (TIdentifier)CloneNode (_name_),
            (PBoolean)CloneNode (_constant_),
            (PExpression)CloneNode (_type_),
            (PBoolean)CloneNode (_breed_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareassign(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PBoolean GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (PBoolean node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBoolean GetBreed ()
    {
        return _breed_;
    }

    public void SetBreed (PBoolean node)
    {
        if(_breed_ != null)
        {
            _breed_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _breed_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_constant_)
            + ToString (_type_)
            + ToString (_breed_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _breed_ == child )
        {
            _breed_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _constant_ == oldChild )
        {
            SetConstant ((PBoolean) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        if ( _breed_ == oldChild )
        {
            SetBreed ((PBoolean) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ACompound : PCompound
{
    private TypedList _expose_;
    private TypedList _declaration_;
    private TypedList _member_;

    public ACompound ()
    {
        this._expose_ = new TypedList(new Expose_Cast(this));
        this._declaration_ = new TypedList(new Declaration_Cast(this));
        this._member_ = new TypedList(new Member_Cast(this));
    }

    public ACompound (
            IList _expose_,
            IList _declaration_,
            IList _member_
    )
    {
        this._expose_ = new TypedList(new Expose_Cast(this));
        this._expose_.Clear();
        this._expose_.AddAll(_expose_);
        this._declaration_ = new TypedList(new Declaration_Cast(this));
        this._declaration_.Clear();
        this._declaration_.AddAll(_declaration_);
        this._member_ = new TypedList(new Member_Cast(this));
        this._member_.Clear();
        this._member_.AddAll(_member_);
    }

    public override Object Clone()
    {
        return new ACompound (
            CloneList (_expose_),
            CloneList (_declaration_),
            CloneList (_member_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompound(this);
    }

    public IList GetExpose ()
    {
        return _expose_;
    }

    public void setExpose (IList list)
    {
        _expose_.Clear();
        _expose_.AddAll(list);
    }
    public IList GetDeclaration ()
    {
        return _declaration_;
    }

    public void setDeclaration (IList list)
    {
        _declaration_.Clear();
        _declaration_.AddAll(list);
    }
    public IList GetMember ()
    {
        return _member_;
    }

    public void setMember (IList list)
    {
        _member_.Clear();
        _member_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_expose_)
            + ToString (_declaration_)
            + ToString (_member_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expose_.Contains(child) )
        {
            _expose_.Remove(child);
            return;
        }
        if ( _declaration_.Contains(child) )
        {
            _declaration_.Remove(child);
            return;
        }
        if ( _member_.Contains(child) )
        {
            _member_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _expose_.Count; i++ )
        {
            Node n = (Node)_expose_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _expose_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _expose_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _declaration_.Count; i++ )
        {
            Node n = (Node)_declaration_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _declaration_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _declaration_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _member_.Count; i++ )
        {
            Node n = (Node)_member_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _member_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _member_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Expose_Cast : Cast
    {
        ACompound obj;

        internal Expose_Cast (ACompound obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExpression node = (PExpression) o;
            node.Parent(null);
            return node;
        }
    }
    private class Declaration_Cast : Cast
    {
        ACompound obj;

        internal Declaration_Cast (ACompound obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStatementdeclaration node = (PStatementdeclaration) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStatementdeclaration node = (PStatementdeclaration) o;
            node.Parent(null);
            return node;
        }
    }
    private class Member_Cast : Cast
    {
        ACompound obj;

        internal Member_Cast (ACompound obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExpression node = (PExpression) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AInterface : PInterface
{
    private TypedList _inheritee_;
    private TypedList _member_;

    public AInterface ()
    {
        this._inheritee_ = new TypedList(new Inheritee_Cast(this));
        this._member_ = new TypedList(new Member_Cast(this));
    }

    public AInterface (
            IList _inheritee_,
            IList _member_
    )
    {
        this._inheritee_ = new TypedList(new Inheritee_Cast(this));
        this._inheritee_.Clear();
        this._inheritee_.AddAll(_inheritee_);
        this._member_ = new TypedList(new Member_Cast(this));
        this._member_.Clear();
        this._member_.AddAll(_member_);
    }

    public override Object Clone()
    {
        return new AInterface (
            CloneList (_inheritee_),
            CloneList (_member_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInterface(this);
    }

    public IList GetInheritee ()
    {
        return _inheritee_;
    }

    public void setInheritee (IList list)
    {
        _inheritee_.Clear();
        _inheritee_.AddAll(list);
    }
    public IList GetMember ()
    {
        return _member_;
    }

    public void setMember (IList list)
    {
        _member_.Clear();
        _member_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_inheritee_)
            + ToString (_member_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _inheritee_.Contains(child) )
        {
            _inheritee_.Remove(child);
            return;
        }
        if ( _member_.Contains(child) )
        {
            _member_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _inheritee_.Count; i++ )
        {
            Node n = (Node)_inheritee_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _inheritee_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _inheritee_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _member_.Count; i++ )
        {
            Node n = (Node)_member_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _member_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _member_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Inheritee_Cast : Cast
    {
        AInterface obj;

        internal Inheritee_Cast (AInterface obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExpression node = (PExpression) o;
            node.Parent(null);
            return node;
        }
    }
    private class Member_Cast : Cast
    {
        AInterface obj;

        internal Member_Cast (AInterface obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStatusedmember node = (PStatusedmember) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStatusedmember node = (PStatusedmember) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ADeclarefirstStatementdeclaration : PStatementdeclaration
{
    private PDeclarefirst _declarefirst_;

    public ADeclarefirstStatementdeclaration ()
    {
    }

    public ADeclarefirstStatementdeclaration (
            PDeclarefirst _declarefirst_
    )
    {
        SetDeclarefirst (_declarefirst_);
    }

    public override Object Clone()
    {
        return new ADeclarefirstStatementdeclaration (
            (PDeclarefirst)CloneNode (_declarefirst_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarefirstStatementdeclaration(this);
    }

    public PDeclarefirst GetDeclarefirst ()
    {
        return _declarefirst_;
    }

    public void SetDeclarefirst (PDeclarefirst node)
    {
        if(_declarefirst_ != null)
        {
            _declarefirst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarefirst_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarefirst_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarefirst_ == child )
        {
            _declarefirst_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarefirst_ == oldChild )
        {
            SetDeclarefirst ((PDeclarefirst) newChild);
            return;
        }
    }

}
public sealed class ASieveStatementdeclaration : PStatementdeclaration
{
    private PSieve _sieve_;

    public ASieveStatementdeclaration ()
    {
    }

    public ASieveStatementdeclaration (
            PSieve _sieve_
    )
    {
        SetSieve (_sieve_);
    }

    public override Object Clone()
    {
        return new ASieveStatementdeclaration (
            (PSieve)CloneNode (_sieve_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASieveStatementdeclaration(this);
    }

    public PSieve GetSieve ()
    {
        return _sieve_;
    }

    public void SetSieve (PSieve node)
    {
        if(_sieve_ != null)
        {
            _sieve_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sieve_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sieve_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sieve_ == child )
        {
            _sieve_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sieve_ == oldChild )
        {
            SetSieve ((PSieve) newChild);
            return;
        }
    }

}
public sealed class ASetproperty : PSetproperty
{
    private PExpression _source_;
    private TIdentifier _propertyname_;
    private PExpression _value_;

    public ASetproperty ()
    {
    }

    public ASetproperty (
            PExpression _source_,
            TIdentifier _propertyname_,
            PExpression _value_
    )
    {
        SetSource (_source_);
        SetPropertyname (_propertyname_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ASetproperty (
            (PExpression)CloneNode (_source_),
            (TIdentifier)CloneNode (_propertyname_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASetproperty(this);
    }

    public PExpression GetSource ()
    {
        return _source_;
    }

    public void SetSource (PExpression node)
    {
        if(_source_ != null)
        {
            _source_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _source_ = node;
    }
    public TIdentifier GetPropertyname ()
    {
        return _propertyname_;
    }

    public void SetPropertyname (TIdentifier node)
    {
        if(_propertyname_ != null)
        {
            _propertyname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _propertyname_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_source_)
            + ToString (_propertyname_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _source_ == child )
        {
            _source_ = null;
            return;
        }
        if ( _propertyname_ == child )
        {
            _propertyname_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _source_ == oldChild )
        {
            SetSource ((PExpression) newChild);
            return;
        }
        if ( _propertyname_ == oldChild )
        {
            SetPropertyname ((TIdentifier) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ASieve : PSieve
{
    private TypedList _expose_;
    private TypedList _hidable_;

    public ASieve ()
    {
        this._expose_ = new TypedList(new Expose_Cast(this));
        this._hidable_ = new TypedList(new Hidable_Cast(this));
    }

    public ASieve (
            IList _expose_,
            IList _hidable_
    )
    {
        this._expose_ = new TypedList(new Expose_Cast(this));
        this._expose_.Clear();
        this._expose_.AddAll(_expose_);
        this._hidable_ = new TypedList(new Hidable_Cast(this));
        this._hidable_.Clear();
        this._hidable_.AddAll(_hidable_);
    }

    public override Object Clone()
    {
        return new ASieve (
            CloneList (_expose_),
            CloneList (_hidable_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASieve(this);
    }

    public IList GetExpose ()
    {
        return _expose_;
    }

    public void setExpose (IList list)
    {
        _expose_.Clear();
        _expose_.AddAll(list);
    }
    public IList GetHidable ()
    {
        return _hidable_;
    }

    public void setHidable (IList list)
    {
        _hidable_.Clear();
        _hidable_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_expose_)
            + ToString (_hidable_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expose_.Contains(child) )
        {
            _expose_.Remove(child);
            return;
        }
        if ( _hidable_.Contains(child) )
        {
            _hidable_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _expose_.Count; i++ )
        {
            Node n = (Node)_expose_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _expose_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _expose_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _hidable_.Count; i++ )
        {
            Node n = (Node)_hidable_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _hidable_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _hidable_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Expose_Cast : Cast
    {
        ASieve obj;

        internal Expose_Cast (ASieve obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExpression node = (PExpression) o;
            node.Parent(null);
            return node;
        }
    }
    private class Hidable_Cast : Cast
    {
        ASieve obj;

        internal Hidable_Cast (ASieve obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PHidable node = (PHidable) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PHidable node = (PHidable) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AExtractmember : PExtractmember
{
    private PExpression _source_;
    private TIdentifier _membername_;

    public AExtractmember ()
    {
    }

    public AExtractmember (
            PExpression _source_,
            TIdentifier _membername_
    )
    {
        SetSource (_source_);
        SetMembername (_membername_);
    }

    public override Object Clone()
    {
        return new AExtractmember (
            (PExpression)CloneNode (_source_),
            (TIdentifier)CloneNode (_membername_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExtractmember(this);
    }

    public PExpression GetSource ()
    {
        return _source_;
    }

    public void SetSource (PExpression node)
    {
        if(_source_ != null)
        {
            _source_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _source_ = node;
    }
    public TIdentifier GetMembername ()
    {
        return _membername_;
    }

    public void SetMembername (TIdentifier node)
    {
        if(_membername_ != null)
        {
            _membername_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _membername_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_source_)
            + ToString (_membername_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _source_ == child )
        {
            _source_ = null;
            return;
        }
        if ( _membername_ == child )
        {
            _membername_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _source_ == oldChild )
        {
            SetSource ((PExpression) newChild);
            return;
        }
        if ( _membername_ == oldChild )
        {
            SetMembername ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class ANor : PNor
{
    private PExpression _first_;
    private PExpression _second_;

    public ANor ()
    {
    }

    public ANor (
            PExpression _first_,
            PExpression _second_
    )
    {
        SetFirst (_first_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new ANor (
            (PExpression)CloneNode (_first_),
            (PExpression)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANor(this);
    }

    public PExpression GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PExpression GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ACase : PCase
{
    private TypedList _testvalue_;
    private PExpression _result_;

    public ACase ()
    {
        this._testvalue_ = new TypedList(new Testvalue_Cast(this));
    }

    public ACase (
            IList _testvalue_,
            PExpression _result_
    )
    {
        this._testvalue_ = new TypedList(new Testvalue_Cast(this));
        this._testvalue_.Clear();
        this._testvalue_.AddAll(_testvalue_);
        SetResult (_result_);
    }

    public override Object Clone()
    {
        return new ACase (
            CloneList (_testvalue_),
            (PExpression)CloneNode (_result_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACase(this);
    }

    public IList GetTestvalue ()
    {
        return _testvalue_;
    }

    public void setTestvalue (IList list)
    {
        _testvalue_.Clear();
        _testvalue_.AddAll(list);
    }
    public PExpression GetResult ()
    {
        return _result_;
    }

    public void SetResult (PExpression node)
    {
        if(_result_ != null)
        {
            _result_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _result_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_testvalue_)
            + ToString (_result_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _testvalue_.Contains(child) )
        {
            _testvalue_.Remove(child);
            return;
        }
        if ( _result_ == child )
        {
            _result_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _testvalue_.Count; i++ )
        {
            Node n = (Node)_testvalue_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _testvalue_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _testvalue_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _result_ == oldChild )
        {
            SetResult ((PExpression) newChild);
            return;
        }
    }

    private class Testvalue_Cast : Cast
    {
        ACase obj;

        internal Testvalue_Cast (ACase obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExpression node = (PExpression) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExpression node = (PExpression) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACatcher : PCatcher
{
    private PExpression _type_;
    private TIdentifier _name_;
    private PExpression _test_;
    private PExpression _result_;

    public ACatcher ()
    {
    }

    public ACatcher (
            PExpression _type_,
            TIdentifier _name_,
            PExpression _test_,
            PExpression _result_
    )
    {
        SetType (_type_);
        SetName (_name_);
        SetTest (_test_);
        SetResult (_result_);
    }

    public override Object Clone()
    {
        return new ACatcher (
            (PExpression)CloneNode (_type_),
            (TIdentifier)CloneNode (_name_),
            (PExpression)CloneNode (_test_),
            (PExpression)CloneNode (_result_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACatcher(this);
    }

    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExpression GetTest ()
    {
        return _test_;
    }

    public void SetTest (PExpression node)
    {
        if(_test_ != null)
        {
            _test_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _test_ = node;
    }
    public PExpression GetResult ()
    {
        return _result_;
    }

    public void SetResult (PExpression node)
    {
        if(_result_ != null)
        {
            _result_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _result_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_name_)
            + ToString (_test_)
            + ToString (_result_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _test_ == child )
        {
            _test_ = null;
            return;
        }
        if ( _result_ == child )
        {
            _result_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _test_ == oldChild )
        {
            SetTest ((PExpression) newChild);
            return;
        }
        if ( _result_ == oldChild )
        {
            SetResult ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ATrycatch : PTrycatch
{
    private PExpression _try_;
    private TypedList _catcher_;
    private PExpression _onsuccess_;
    private PExpression _finally_;

    public ATrycatch ()
    {
        this._catcher_ = new TypedList(new Catcher_Cast(this));
    }

    public ATrycatch (
            PExpression _try_,
            IList _catcher_,
            PExpression _onsuccess_,
            PExpression _finally_
    )
    {
        SetTry (_try_);
        this._catcher_ = new TypedList(new Catcher_Cast(this));
        this._catcher_.Clear();
        this._catcher_.AddAll(_catcher_);
        SetOnsuccess (_onsuccess_);
        SetFinally (_finally_);
    }

    public override Object Clone()
    {
        return new ATrycatch (
            (PExpression)CloneNode (_try_),
            CloneList (_catcher_),
            (PExpression)CloneNode (_onsuccess_),
            (PExpression)CloneNode (_finally_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATrycatch(this);
    }

    public PExpression GetTry ()
    {
        return _try_;
    }

    public void SetTry (PExpression node)
    {
        if(_try_ != null)
        {
            _try_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _try_ = node;
    }
    public IList GetCatcher ()
    {
        return _catcher_;
    }

    public void setCatcher (IList list)
    {
        _catcher_.Clear();
        _catcher_.AddAll(list);
    }
    public PExpression GetOnsuccess ()
    {
        return _onsuccess_;
    }

    public void SetOnsuccess (PExpression node)
    {
        if(_onsuccess_ != null)
        {
            _onsuccess_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _onsuccess_ = node;
    }
    public PExpression GetFinally ()
    {
        return _finally_;
    }

    public void SetFinally (PExpression node)
    {
        if(_finally_ != null)
        {
            _finally_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _finally_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_try_)
            + ToString (_catcher_)
            + ToString (_onsuccess_)
            + ToString (_finally_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _try_ == child )
        {
            _try_ = null;
            return;
        }
        if ( _catcher_.Contains(child) )
        {
            _catcher_.Remove(child);
            return;
        }
        if ( _onsuccess_ == child )
        {
            _onsuccess_ = null;
            return;
        }
        if ( _finally_ == child )
        {
            _finally_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _try_ == oldChild )
        {
            SetTry ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _catcher_.Count; i++ )
        {
            Node n = (Node)_catcher_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _catcher_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _catcher_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _onsuccess_ == oldChild )
        {
            SetOnsuccess ((PExpression) newChild);
            return;
        }
        if ( _finally_ == oldChild )
        {
            SetFinally ((PExpression) newChild);
            return;
        }
    }

    private class Catcher_Cast : Cast
    {
        ATrycatch obj;

        internal Catcher_Cast (ATrycatch obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PCatcher node = (PCatcher) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PCatcher node = (PCatcher) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACallee : PCallee
{
    private TypedList _parameterinfo_;
    private PExpression _returntype_;

    public ACallee ()
    {
        this._parameterinfo_ = new TypedList(new Parameterinfo_Cast(this));
    }

    public ACallee (
            IList _parameterinfo_,
            PExpression _returntype_
    )
    {
        this._parameterinfo_ = new TypedList(new Parameterinfo_Cast(this));
        this._parameterinfo_.Clear();
        this._parameterinfo_.AddAll(_parameterinfo_);
        SetReturntype (_returntype_);
    }

    public override Object Clone()
    {
        return new ACallee (
            CloneList (_parameterinfo_),
            (PExpression)CloneNode (_returntype_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallee(this);
    }

    public IList GetParameterinfo ()
    {
        return _parameterinfo_;
    }

    public void setParameterinfo (IList list)
    {
        _parameterinfo_.Clear();
        _parameterinfo_.AddAll(list);
    }
    public PExpression GetReturntype ()
    {
        return _returntype_;
    }

    public void SetReturntype (PExpression node)
    {
        if(_returntype_ != null)
        {
            _returntype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _returntype_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameterinfo_)
            + ToString (_returntype_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameterinfo_.Contains(child) )
        {
            _parameterinfo_.Remove(child);
            return;
        }
        if ( _returntype_ == child )
        {
            _returntype_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _parameterinfo_.Count; i++ )
        {
            Node n = (Node)_parameterinfo_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _parameterinfo_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _parameterinfo_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _returntype_ == oldChild )
        {
            SetReturntype ((PExpression) newChild);
            return;
        }
    }

    private class Parameterinfo_Cast : Cast
    {
        ACallee obj;

        internal Parameterinfo_Cast (ACallee obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParameterinfo node = (PParameterinfo) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACaller : PCaller
{
    private PExpression _interface_;
    private TIdentifier _methodname_;

    public ACaller ()
    {
    }

    public ACaller (
            PExpression _interface_,
            TIdentifier _methodname_
    )
    {
        SetInterface (_interface_);
        SetMethodname (_methodname_);
    }

    public override Object Clone()
    {
        return new ACaller (
            (PExpression)CloneNode (_interface_),
            (TIdentifier)CloneNode (_methodname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACaller(this);
    }

    public PExpression GetInterface ()
    {
        return _interface_;
    }

    public void SetInterface (PExpression node)
    {
        if(_interface_ != null)
        {
            _interface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _interface_ = node;
    }
    public TIdentifier GetMethodname ()
    {
        return _methodname_;
    }

    public void SetMethodname (TIdentifier node)
    {
        if(_methodname_ != null)
        {
            _methodname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methodname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_interface_)
            + ToString (_methodname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _interface_ == child )
        {
            _interface_ = null;
            return;
        }
        if ( _methodname_ == child )
        {
            _methodname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _interface_ == oldChild )
        {
            SetInterface ((PExpression) newChild);
            return;
        }
        if ( _methodname_ == oldChild )
        {
            SetMethodname ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AAssign : PAssign
{
    private TIdentifier _name_;
    private PBoolean _breed_;
    private PExpression _value_;

    public AAssign ()
    {
    }

    public AAssign (
            TIdentifier _name_,
            PBoolean _breed_,
            PExpression _value_
    )
    {
        SetName (_name_);
        SetBreed (_breed_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AAssign (
            (TIdentifier)CloneNode (_name_),
            (PBoolean)CloneNode (_breed_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssign(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PBoolean GetBreed ()
    {
        return _breed_;
    }

    public void SetBreed (PBoolean node)
    {
        if(_breed_ != null)
        {
            _breed_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _breed_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_breed_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _breed_ == child )
        {
            _breed_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _breed_ == oldChild )
        {
            SetBreed ((PBoolean) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AMemberimplementation : PMemberimplementation
{
    private PMembertype _membertype_;
    private TIdentifier _name_;
    private PExpression _interface_;
    private PExpression _function_;

    public AMemberimplementation ()
    {
    }

    public AMemberimplementation (
            PMembertype _membertype_,
            TIdentifier _name_,
            PExpression _interface_,
            PExpression _function_
    )
    {
        SetMembertype (_membertype_);
        SetName (_name_);
        SetInterface (_interface_);
        SetFunction (_function_);
    }

    public override Object Clone()
    {
        return new AMemberimplementation (
            (PMembertype)CloneNode (_membertype_),
            (TIdentifier)CloneNode (_name_),
            (PExpression)CloneNode (_interface_),
            (PExpression)CloneNode (_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMemberimplementation(this);
    }

    public PMembertype GetMembertype ()
    {
        return _membertype_;
    }

    public void SetMembertype (PMembertype node)
    {
        if(_membertype_ != null)
        {
            _membertype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _membertype_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExpression GetInterface ()
    {
        return _interface_;
    }

    public void SetInterface (PExpression node)
    {
        if(_interface_ != null)
        {
            _interface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _interface_ = node;
    }
    public PExpression GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PExpression node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_membertype_)
            + ToString (_name_)
            + ToString (_interface_)
            + ToString (_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _membertype_ == child )
        {
            _membertype_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _interface_ == child )
        {
            _interface_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _membertype_ == oldChild )
        {
            SetMembertype ((PMembertype) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _interface_ == oldChild )
        {
            SetInterface ((PExpression) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABreederInterfacemember : PInterfacemember
{
    private PBreeder _breeder_;

    public ABreederInterfacemember ()
    {
    }

    public ABreederInterfacemember (
            PBreeder _breeder_
    )
    {
        SetBreeder (_breeder_);
    }

    public override Object Clone()
    {
        return new ABreederInterfacemember (
            (PBreeder)CloneNode (_breeder_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreederInterfacemember(this);
    }

    public PBreeder GetBreeder ()
    {
        return _breeder_;
    }

    public void SetBreeder (PBreeder node)
    {
        if(_breeder_ != null)
        {
            _breeder_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _breeder_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_breeder_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _breeder_ == child )
        {
            _breeder_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _breeder_ == oldChild )
        {
            SetBreeder ((PBreeder) newChild);
            return;
        }
    }

}
public sealed class ACalleeInterfacemember : PInterfacemember
{
    private PCallee _callee_;

    public ACalleeInterfacemember ()
    {
    }

    public ACalleeInterfacemember (
            PCallee _callee_
    )
    {
        SetCallee (_callee_);
    }

    public override Object Clone()
    {
        return new ACalleeInterfacemember (
            (PCallee)CloneNode (_callee_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACalleeInterfacemember(this);
    }

    public PCallee GetCallee ()
    {
        return _callee_;
    }

    public void SetCallee (PCallee node)
    {
        if(_callee_ != null)
        {
            _callee_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _callee_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_callee_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _callee_ == child )
        {
            _callee_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _callee_ == oldChild )
        {
            SetCallee ((PCallee) newChild);
            return;
        }
    }

}
public sealed class APropertyInterfacemember : PInterfacemember
{
    private PProperty _property_;

    public APropertyInterfacemember ()
    {
    }

    public APropertyInterfacemember (
            PProperty _property_
    )
    {
        SetProperty (_property_);
    }

    public override Object Clone()
    {
        return new APropertyInterfacemember (
            (PProperty)CloneNode (_property_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPropertyInterfacemember(this);
    }

    public PProperty GetProperty ()
    {
        return _property_;
    }

    public void SetProperty (PProperty node)
    {
        if(_property_ != null)
        {
            _property_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _property_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_property_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _property_ == child )
        {
            _property_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _property_ == oldChild )
        {
            SetProperty ((PProperty) newChild);
            return;
        }
    }

}
public sealed class AMethodInterfacemember : PInterfacemember
{
    private PMethod _method_;

    public AMethodInterfacemember ()
    {
    }

    public AMethodInterfacemember (
            PMethod _method_
    )
    {
        SetMethod (_method_);
    }

    public override Object Clone()
    {
        return new AMethodInterfacemember (
            (PMethod)CloneNode (_method_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodInterfacemember(this);
    }

    public PMethod GetMethod ()
    {
        return _method_;
    }

    public void SetMethod (PMethod node)
    {
        if(_method_ != null)
        {
            _method_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_ == child )
        {
            _method_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_ == oldChild )
        {
            SetMethod ((PMethod) newChild);
            return;
        }
    }

}
public sealed class ADeclareemptyExpression : PExpression
{
    private PDeclareempty _declareempty_;

    public ADeclareemptyExpression ()
    {
    }

    public ADeclareemptyExpression (
            PDeclareempty _declareempty_
    )
    {
        SetDeclareempty (_declareempty_);
    }

    public override Object Clone()
    {
        return new ADeclareemptyExpression (
            (PDeclareempty)CloneNode (_declareempty_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareemptyExpression(this);
    }

    public PDeclareempty GetDeclareempty ()
    {
        return _declareempty_;
    }

    public void SetDeclareempty (PDeclareempty node)
    {
        if(_declareempty_ != null)
        {
            _declareempty_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declareempty_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declareempty_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declareempty_ == child )
        {
            _declareempty_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declareempty_ == oldChild )
        {
            SetDeclareempty ((PDeclareempty) newChild);
            return;
        }
    }

}
public sealed class ARaiseExpression : PExpression
{
    private PRaise _raise_;

    public ARaiseExpression ()
    {
    }

    public ARaiseExpression (
            PRaise _raise_
    )
    {
        SetRaise (_raise_);
    }

    public override Object Clone()
    {
        return new ARaiseExpression (
            (PRaise)CloneNode (_raise_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARaiseExpression(this);
    }

    public PRaise GetRaise ()
    {
        return _raise_;
    }

    public void SetRaise (PRaise node)
    {
        if(_raise_ != null)
        {
            _raise_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _raise_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_raise_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _raise_ == child )
        {
            _raise_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _raise_ == oldChild )
        {
            SetRaise ((PRaise) newChild);
            return;
        }
    }

}
public sealed class AAssignExpression : PExpression
{
    private PAssign _assign_;

    public AAssignExpression ()
    {
    }

    public AAssignExpression (
            PAssign _assign_
    )
    {
        SetAssign (_assign_);
    }

    public override Object Clone()
    {
        return new AAssignExpression (
            (PAssign)CloneNode (_assign_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignExpression(this);
    }

    public PAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (PAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_ == oldChild )
        {
            SetAssign ((PAssign) newChild);
            return;
        }
    }

}
public sealed class ACallExpression : PExpression
{
    private PCall _call_;

    public ACallExpression ()
    {
    }

    public ACallExpression (
            PCall _call_
    )
    {
        SetCall (_call_);
    }

    public override Object Clone()
    {
        return new ACallExpression (
            (PCall)CloneNode (_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallExpression(this);
    }

    public PCall GetCall ()
    {
        return _call_;
    }

    public void SetCall (PCall node)
    {
        if(_call_ != null)
        {
            _call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _call_ == child )
        {
            _call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _call_ == oldChild )
        {
            SetCall ((PCall) newChild);
            return;
        }
    }

}
public sealed class ACompoundExpression : PExpression
{
    private PCompound _compound_;

    public ACompoundExpression ()
    {
    }

    public ACompoundExpression (
            PCompound _compound_
    )
    {
        SetCompound (_compound_);
    }

    public override Object Clone()
    {
        return new ACompoundExpression (
            (PCompound)CloneNode (_compound_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompoundExpression(this);
    }

    public PCompound GetCompound ()
    {
        return _compound_;
    }

    public void SetCompound (PCompound node)
    {
        if(_compound_ != null)
        {
            _compound_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _compound_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_compound_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _compound_ == child )
        {
            _compound_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _compound_ == oldChild )
        {
            SetCompound ((PCompound) newChild);
            return;
        }
    }

}
public sealed class AConditionalExpression : PExpression
{
    private PConditional _conditional_;

    public AConditionalExpression ()
    {
    }

    public AConditionalExpression (
            PConditional _conditional_
    )
    {
        SetConditional (_conditional_);
    }

    public override Object Clone()
    {
        return new AConditionalExpression (
            (PConditional)CloneNode (_conditional_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConditionalExpression(this);
    }

    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_conditional_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
    }

}
public sealed class ACurryExpression : PExpression
{
    private PCurry _curry_;

    public ACurryExpression ()
    {
    }

    public ACurryExpression (
            PCurry _curry_
    )
    {
        SetCurry (_curry_);
    }

    public override Object Clone()
    {
        return new ACurryExpression (
            (PCurry)CloneNode (_curry_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACurryExpression(this);
    }

    public PCurry GetCurry ()
    {
        return _curry_;
    }

    public void SetCurry (PCurry node)
    {
        if(_curry_ != null)
        {
            _curry_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _curry_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_curry_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _curry_ == child )
        {
            _curry_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _curry_ == oldChild )
        {
            SetCurry ((PCurry) newChild);
            return;
        }
    }

}
public sealed class ADeclareassignExpression : PExpression
{
    private PDeclareassign _declareassign_;

    public ADeclareassignExpression ()
    {
    }

    public ADeclareassignExpression (
            PDeclareassign _declareassign_
    )
    {
        SetDeclareassign (_declareassign_);
    }

    public override Object Clone()
    {
        return new ADeclareassignExpression (
            (PDeclareassign)CloneNode (_declareassign_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareassignExpression(this);
    }

    public PDeclareassign GetDeclareassign ()
    {
        return _declareassign_;
    }

    public void SetDeclareassign (PDeclareassign node)
    {
        if(_declareassign_ != null)
        {
            _declareassign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declareassign_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declareassign_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declareassign_ == child )
        {
            _declareassign_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declareassign_ == oldChild )
        {
            SetDeclareassign ((PDeclareassign) newChild);
            return;
        }
    }

}
public sealed class AIdentifierExpression : PExpression
{
    private TIdentifier _identifier_;

    public AIdentifierExpression ()
    {
    }

    public AIdentifierExpression (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AIdentifierExpression (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdentifierExpression(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class ASelectExpression : PExpression
{
    private PSelect _select_;

    public ASelectExpression ()
    {
    }

    public ASelectExpression (
            PSelect _select_
    )
    {
        SetSelect (_select_);
    }

    public override Object Clone()
    {
        return new ASelectExpression (
            (PSelect)CloneNode (_select_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASelectExpression(this);
    }

    public PSelect GetSelect ()
    {
        return _select_;
    }

    public void SetSelect (PSelect node)
    {
        if(_select_ != null)
        {
            _select_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _select_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_select_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _select_ == child )
        {
            _select_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _select_ == oldChild )
        {
            SetSelect ((PSelect) newChild);
            return;
        }
    }

}
public sealed class ASetpropertyExpression : PExpression
{
    private PSetproperty _setproperty_;

    public ASetpropertyExpression ()
    {
    }

    public ASetpropertyExpression (
            PSetproperty _setproperty_
    )
    {
        SetSetproperty (_setproperty_);
    }

    public override Object Clone()
    {
        return new ASetpropertyExpression (
            (PSetproperty)CloneNode (_setproperty_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASetpropertyExpression(this);
    }

    public PSetproperty GetSetproperty ()
    {
        return _setproperty_;
    }

    public void SetSetproperty (PSetproperty node)
    {
        if(_setproperty_ != null)
        {
            _setproperty_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setproperty_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_setproperty_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setproperty_ == child )
        {
            _setproperty_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setproperty_ == oldChild )
        {
            SetSetproperty ((PSetproperty) newChild);
            return;
        }
    }

}
public sealed class ATrycatchExpression : PExpression
{
    private PTrycatch _trycatch_;

    public ATrycatchExpression ()
    {
    }

    public ATrycatchExpression (
            PTrycatch _trycatch_
    )
    {
        SetTrycatch (_trycatch_);
    }

    public override Object Clone()
    {
        return new ATrycatchExpression (
            (PTrycatch)CloneNode (_trycatch_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATrycatchExpression(this);
    }

    public PTrycatch GetTrycatch ()
    {
        return _trycatch_;
    }

    public void SetTrycatch (PTrycatch node)
    {
        if(_trycatch_ != null)
        {
            _trycatch_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _trycatch_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_trycatch_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _trycatch_ == child )
        {
            _trycatch_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _trycatch_ == oldChild )
        {
            SetTrycatch ((PTrycatch) newChild);
            return;
        }
    }

}
public sealed class ATypeselectExpression : PExpression
{
    private PTypeselect _typeselect_;

    public ATypeselectExpression ()
    {
    }

    public ATypeselectExpression (
            PTypeselect _typeselect_
    )
    {
        SetTypeselect (_typeselect_);
    }

    public override Object Clone()
    {
        return new ATypeselectExpression (
            (PTypeselect)CloneNode (_typeselect_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATypeselectExpression(this);
    }

    public PTypeselect GetTypeselect ()
    {
        return _typeselect_;
    }

    public void SetTypeselect (PTypeselect node)
    {
        if(_typeselect_ != null)
        {
            _typeselect_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _typeselect_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_typeselect_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _typeselect_ == child )
        {
            _typeselect_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _typeselect_ == oldChild )
        {
            SetTypeselect ((PTypeselect) newChild);
            return;
        }
    }

}
public sealed class AAndExpression : PExpression
{
    private PAnd _and_;

    public AAndExpression ()
    {
    }

    public AAndExpression (
            PAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AAndExpression (
            (PAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExpression(this);
    }

    public PAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (PAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((PAnd) newChild);
            return;
        }
    }

}
public sealed class ANandExpression : PExpression
{
    private PNand _nand_;

    public ANandExpression ()
    {
    }

    public ANandExpression (
            PNand _nand_
    )
    {
        SetNand (_nand_);
    }

    public override Object Clone()
    {
        return new ANandExpression (
            (PNand)CloneNode (_nand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANandExpression(this);
    }

    public PNand GetNand ()
    {
        return _nand_;
    }

    public void SetNand (PNand node)
    {
        if(_nand_ != null)
        {
            _nand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nand_ == child )
        {
            _nand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nand_ == oldChild )
        {
            SetNand ((PNand) newChild);
            return;
        }
    }

}
public sealed class AOrExpression : PExpression
{
    private POr _or_;

    public AOrExpression ()
    {
    }

    public AOrExpression (
            POr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new AOrExpression (
            (POr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrExpression(this);
    }

    public POr GetOr ()
    {
        return _or_;
    }

    public void SetOr (POr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((POr) newChild);
            return;
        }
    }

}
public sealed class ANorExpression : PExpression
{
    private PNor _nor_;

    public ANorExpression ()
    {
    }

    public ANorExpression (
            PNor _nor_
    )
    {
        SetNor (_nor_);
    }

    public override Object Clone()
    {
        return new ANorExpression (
            (PNor)CloneNode (_nor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANorExpression(this);
    }

    public PNor GetNor ()
    {
        return _nor_;
    }

    public void SetNor (PNor node)
    {
        if(_nor_ != null)
        {
            _nor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nor_ == child )
        {
            _nor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nor_ == oldChild )
        {
            SetNor ((PNor) newChild);
            return;
        }
    }

}
public sealed class AXorExpression : PExpression
{
    private PXor _xor_;

    public AXorExpression ()
    {
    }

    public AXorExpression (
            PXor _xor_
    )
    {
        SetXor (_xor_);
    }

    public override Object Clone()
    {
        return new AXorExpression (
            (PXor)CloneNode (_xor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAXorExpression(this);
    }

    public PXor GetXor ()
    {
        return _xor_;
    }

    public void SetXor (PXor node)
    {
        if(_xor_ != null)
        {
            _xor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _xor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_xor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _xor_ == child )
        {
            _xor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _xor_ == oldChild )
        {
            SetXor ((PXor) newChild);
            return;
        }
    }

}
public sealed class AXnorExpression : PExpression
{
    private PXnor _xnor_;

    public AXnorExpression ()
    {
    }

    public AXnorExpression (
            PXnor _xnor_
    )
    {
        SetXnor (_xnor_);
    }

    public override Object Clone()
    {
        return new AXnorExpression (
            (PXnor)CloneNode (_xnor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAXnorExpression(this);
    }

    public PXnor GetXnor ()
    {
        return _xnor_;
    }

    public void SetXnor (PXnor node)
    {
        if(_xnor_ != null)
        {
            _xnor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _xnor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_xnor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _xnor_ == child )
        {
            _xnor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _xnor_ == oldChild )
        {
            SetXnor ((PXnor) newChild);
            return;
        }
    }

}
public sealed class ABreedExpression : PExpression
{
    private PBreed _breed_;

    public ABreedExpression ()
    {
    }

    public ABreedExpression (
            PBreed _breed_
    )
    {
        SetBreed (_breed_);
    }

    public override Object Clone()
    {
        return new ABreedExpression (
            (PBreed)CloneNode (_breed_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreedExpression(this);
    }

    public PBreed GetBreed ()
    {
        return _breed_;
    }

    public void SetBreed (PBreed node)
    {
        if(_breed_ != null)
        {
            _breed_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _breed_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_breed_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _breed_ == child )
        {
            _breed_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _breed_ == oldChild )
        {
            SetBreed ((PBreed) newChild);
            return;
        }
    }

}
public sealed class ACallerExpression : PExpression
{
    private PCaller _caller_;

    public ACallerExpression ()
    {
    }

    public ACallerExpression (
            PCaller _caller_
    )
    {
        SetCaller (_caller_);
    }

    public override Object Clone()
    {
        return new ACallerExpression (
            (PCaller)CloneNode (_caller_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallerExpression(this);
    }

    public PCaller GetCaller ()
    {
        return _caller_;
    }

    public void SetCaller (PCaller node)
    {
        if(_caller_ != null)
        {
            _caller_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _caller_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_caller_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _caller_ == child )
        {
            _caller_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _caller_ == oldChild )
        {
            SetCaller ((PCaller) newChild);
            return;
        }
    }

}
public sealed class AObjectExpression : PExpression
{
    private PObject _object_;

    public AObjectExpression ()
    {
    }

    public AObjectExpression (
            PObject _object_
    )
    {
        SetObject (_object_);
    }

    public override Object Clone()
    {
        return new AObjectExpression (
            (PObject)CloneNode (_object_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAObjectExpression(this);
    }

    public PObject GetObject ()
    {
        return _object_;
    }

    public void SetObject (PObject node)
    {
        if(_object_ != null)
        {
            _object_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _object_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_object_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _object_ == child )
        {
            _object_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _object_ == oldChild )
        {
            SetObject ((PObject) newChild);
            return;
        }
    }

}
public sealed class ADictionaryExpression : PExpression
{
    private PDictionary _dictionary_;

    public ADictionaryExpression ()
    {
    }

    public ADictionaryExpression (
            PDictionary _dictionary_
    )
    {
        SetDictionary (_dictionary_);
    }

    public override Object Clone()
    {
        return new ADictionaryExpression (
            (PDictionary)CloneNode (_dictionary_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADictionaryExpression(this);
    }

    public PDictionary GetDictionary ()
    {
        return _dictionary_;
    }

    public void SetDictionary (PDictionary node)
    {
        if(_dictionary_ != null)
        {
            _dictionary_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dictionary_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_dictionary_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _dictionary_ == child )
        {
            _dictionary_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _dictionary_ == oldChild )
        {
            SetDictionary ((PDictionary) newChild);
            return;
        }
    }

}
public sealed class AEnumExpression : PExpression
{
    private PEnum _enum_;

    public AEnumExpression ()
    {
    }

    public AEnumExpression (
            PEnum _enum_
    )
    {
        SetEnum (_enum_);
    }

    public override Object Clone()
    {
        return new AEnumExpression (
            (PEnum)CloneNode (_enum_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEnumExpression(this);
    }

    public PEnum GetEnum ()
    {
        return _enum_;
    }

    public void SetEnum (PEnum node)
    {
        if(_enum_ != null)
        {
            _enum_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _enum_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_enum_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _enum_ == child )
        {
            _enum_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _enum_ == oldChild )
        {
            SetEnum ((PEnum) newChild);
            return;
        }
    }

}
public sealed class AExtractmemberExpression : PExpression
{
    private PExtractmember _extractmember_;

    public AExtractmemberExpression ()
    {
    }

    public AExtractmemberExpression (
            PExtractmember _extractmember_
    )
    {
        SetExtractmember (_extractmember_);
    }

    public override Object Clone()
    {
        return new AExtractmemberExpression (
            (PExtractmember)CloneNode (_extractmember_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExtractmemberExpression(this);
    }

    public PExtractmember GetExtractmember ()
    {
        return _extractmember_;
    }

    public void SetExtractmember (PExtractmember node)
    {
        if(_extractmember_ != null)
        {
            _extractmember_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _extractmember_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_extractmember_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _extractmember_ == child )
        {
            _extractmember_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _extractmember_ == oldChild )
        {
            SetExtractmember ((PExtractmember) newChild);
            return;
        }
    }

}
public sealed class AFunctionExpression : PExpression
{
    private PFunction _function_;

    public AFunctionExpression ()
    {
    }

    public AFunctionExpression (
            PFunction _function_
    )
    {
        SetFunction (_function_);
    }

    public override Object Clone()
    {
        return new AFunctionExpression (
            (PFunction)CloneNode (_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionExpression(this);
    }

    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
    }

}
public sealed class AFunctioninterfaceExpression : PExpression
{
    private PFunctioninterface _functioninterface_;

    public AFunctioninterfaceExpression ()
    {
    }

    public AFunctioninterfaceExpression (
            PFunctioninterface _functioninterface_
    )
    {
        SetFunctioninterface (_functioninterface_);
    }

    public override Object Clone()
    {
        return new AFunctioninterfaceExpression (
            (PFunctioninterface)CloneNode (_functioninterface_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctioninterfaceExpression(this);
    }

    public PFunctioninterface GetFunctioninterface ()
    {
        return _functioninterface_;
    }

    public void SetFunctioninterface (PFunctioninterface node)
    {
        if(_functioninterface_ != null)
        {
            _functioninterface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functioninterface_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functioninterface_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functioninterface_ == child )
        {
            _functioninterface_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functioninterface_ == oldChild )
        {
            SetFunctioninterface ((PFunctioninterface) newChild);
            return;
        }
    }

}
public sealed class AGeneratorExpression : PExpression
{
    private PGenerator _generator_;

    public AGeneratorExpression ()
    {
    }

    public AGeneratorExpression (
            PGenerator _generator_
    )
    {
        SetGenerator (_generator_);
    }

    public override Object Clone()
    {
        return new AGeneratorExpression (
            (PGenerator)CloneNode (_generator_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGeneratorExpression(this);
    }

    public PGenerator GetGenerator ()
    {
        return _generator_;
    }

    public void SetGenerator (PGenerator node)
    {
        if(_generator_ != null)
        {
            _generator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _generator_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_generator_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _generator_ == child )
        {
            _generator_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _generator_ == oldChild )
        {
            SetGenerator ((PGenerator) newChild);
            return;
        }
    }

}
public sealed class AGenericfunctionExpression : PExpression
{
    private PGenericfunction _genericfunction_;

    public AGenericfunctionExpression ()
    {
    }

    public AGenericfunctionExpression (
            PGenericfunction _genericfunction_
    )
    {
        SetGenericfunction (_genericfunction_);
    }

    public override Object Clone()
    {
        return new AGenericfunctionExpression (
            (PGenericfunction)CloneNode (_genericfunction_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGenericfunctionExpression(this);
    }

    public PGenericfunction GetGenericfunction ()
    {
        return _genericfunction_;
    }

    public void SetGenericfunction (PGenericfunction node)
    {
        if(_genericfunction_ != null)
        {
            _genericfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _genericfunction_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_genericfunction_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _genericfunction_ == child )
        {
            _genericfunction_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _genericfunction_ == oldChild )
        {
            SetGenericfunction ((PGenericfunction) newChild);
            return;
        }
    }

}
public sealed class AGenericinterfaceExpression : PExpression
{
    private PGenericinterface _genericinterface_;

    public AGenericinterfaceExpression ()
    {
    }

    public AGenericinterfaceExpression (
            PGenericinterface _genericinterface_
    )
    {
        SetGenericinterface (_genericinterface_);
    }

    public override Object Clone()
    {
        return new AGenericinterfaceExpression (
            (PGenericinterface)CloneNode (_genericinterface_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGenericinterfaceExpression(this);
    }

    public PGenericinterface GetGenericinterface ()
    {
        return _genericinterface_;
    }

    public void SetGenericinterface (PGenericinterface node)
    {
        if(_genericinterface_ != null)
        {
            _genericinterface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _genericinterface_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_genericinterface_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _genericinterface_ == child )
        {
            _genericinterface_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _genericinterface_ == oldChild )
        {
            SetGenericinterface ((PGenericinterface) newChild);
            return;
        }
    }

}
public sealed class AInstantiategenericExpression : PExpression
{
    private PInstantiategeneric _instantiategeneric_;

    public AInstantiategenericExpression ()
    {
    }

    public AInstantiategenericExpression (
            PInstantiategeneric _instantiategeneric_
    )
    {
        SetInstantiategeneric (_instantiategeneric_);
    }

    public override Object Clone()
    {
        return new AInstantiategenericExpression (
            (PInstantiategeneric)CloneNode (_instantiategeneric_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInstantiategenericExpression(this);
    }

    public PInstantiategeneric GetInstantiategeneric ()
    {
        return _instantiategeneric_;
    }

    public void SetInstantiategeneric (PInstantiategeneric node)
    {
        if(_instantiategeneric_ != null)
        {
            _instantiategeneric_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _instantiategeneric_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_instantiategeneric_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _instantiategeneric_ == child )
        {
            _instantiategeneric_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _instantiategeneric_ == oldChild )
        {
            SetInstantiategeneric ((PInstantiategeneric) newChild);
            return;
        }
    }

}
public sealed class AIntegerExpression : PExpression
{
    private TInteger _integer_;

    public AIntegerExpression ()
    {
    }

    public AIntegerExpression (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntegerExpression (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerExpression(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AInterfaceExpression : PExpression
{
    private PInterface _interface_;

    public AInterfaceExpression ()
    {
    }

    public AInterfaceExpression (
            PInterface _interface_
    )
    {
        SetInterface (_interface_);
    }

    public override Object Clone()
    {
        return new AInterfaceExpression (
            (PInterface)CloneNode (_interface_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInterfaceExpression(this);
    }

    public PInterface GetInterface ()
    {
        return _interface_;
    }

    public void SetInterface (PInterface node)
    {
        if(_interface_ != null)
        {
            _interface_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _interface_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_interface_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _interface_ == child )
        {
            _interface_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _interface_ == oldChild )
        {
            SetInterface ((PInterface) newChild);
            return;
        }
    }

}
public sealed class ARationalExpression : PExpression
{
    private TRational _rational_;

    public ARationalExpression ()
    {
    }

    public ARationalExpression (
            TRational _rational_
    )
    {
        SetRational (_rational_);
    }

    public override Object Clone()
    {
        return new ARationalExpression (
            (TRational)CloneNode (_rational_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARationalExpression(this);
    }

    public TRational GetRational ()
    {
        return _rational_;
    }

    public void SetRational (TRational node)
    {
        if(_rational_ != null)
        {
            _rational_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rational_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rational_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rational_ == child )
        {
            _rational_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rational_ == oldChild )
        {
            SetRational ((TRational) newChild);
            return;
        }
    }

}
public sealed class AStringExpression : PExpression
{
    private TString _string_;

    public AStringExpression ()
    {
    }

    public AStringExpression (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringExpression (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringExpression(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AEnumentry : PEnumentry
{
    private TIdentifier _name_;
    private PExpression _value_;

    public AEnumentry ()
    {
    }

    public AEnumentry (
            TIdentifier _name_,
            PExpression _value_
    )
    {
        SetName (_name_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AEnumentry (
            (TIdentifier)CloneNode (_name_),
            (PExpression)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEnumentry(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABreeder : PBreeder
{
    private PExpression _type_;

    public ABreeder ()
    {
    }

    public ABreeder (
            PExpression _type_
    )
    {
        SetType (_type_);
    }

    public override Object Clone()
    {
        return new ABreeder (
            (PExpression)CloneNode (_type_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABreeder(this);
    }

    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AProperty : PProperty
{
    private TIdentifier _name_;
    private PBoolean _writable_;
    private PExpression _type_;

    public AProperty ()
    {
    }

    public AProperty (
            TIdentifier _name_,
            PBoolean _writable_,
            PExpression _type_
    )
    {
        SetName (_name_);
        SetWritable (_writable_);
        SetType (_type_);
    }

    public override Object Clone()
    {
        return new AProperty (
            (TIdentifier)CloneNode (_name_),
            (PBoolean)CloneNode (_writable_),
            (PExpression)CloneNode (_type_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProperty(this);
    }

    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public PBoolean GetWritable ()
    {
        return _writable_;
    }

    public void SetWritable (PBoolean node)
    {
        if(_writable_ != null)
        {
            _writable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _writable_ = node;
    }
    public PExpression GetType ()
    {
        return _type_;
    }

    public void SetType (PExpression node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_writable_)
            + ToString (_type_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _writable_ == child )
        {
            _writable_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _writable_ == oldChild )
        {
            SetWritable ((PBoolean) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ACurry : PCurry
{
    private PExpression _function_;
    private TypedList _argument_;
    private PBoolean _call_;

    public ACurry ()
    {
        this._argument_ = new TypedList(new Argument_Cast(this));
    }

    public ACurry (
            PExpression _function_,
            IList _argument_,
            PBoolean _call_
    )
    {
        SetFunction (_function_);
        this._argument_ = new TypedList(new Argument_Cast(this));
        this._argument_.Clear();
        this._argument_.AddAll(_argument_);
        SetCall (_call_);
    }

    public override Object Clone()
    {
        return new ACurry (
            (PExpression)CloneNode (_function_),
            CloneList (_argument_),
            (PBoolean)CloneNode (_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACurry(this);
    }

    public PExpression GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PExpression node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public IList GetArgument ()
    {
        return _argument_;
    }

    public void setArgument (IList list)
    {
        _argument_.Clear();
        _argument_.AddAll(list);
    }
    public PBoolean GetCall ()
    {
        return _call_;
    }

    public void SetCall (PBoolean node)
    {
        if(_call_ != null)
        {
            _call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_argument_)
            + ToString (_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _argument_.Contains(child) )
        {
            _argument_.Remove(child);
            return;
        }
        if ( _call_ == child )
        {
            _call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PExpression) newChild);
            return;
        }
        for ( int i = 0; i < _argument_.Count; i++ )
        {
            Node n = (Node)_argument_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _argument_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _argument_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _call_ == oldChild )
        {
            SetCall ((PBoolean) newChild);
            return;
        }
    }

    private class Argument_Cast : Cast
    {
        ACurry obj;

        internal Argument_Cast (ACurry obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PArgument node = (PArgument) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PArgument node = (PArgument) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOr : POr
{
    private PExpression _first_;
    private PExpression _second_;

    public AOr ()
    {
    }

    public AOr (
            PExpression _first_,
            PExpression _second_
    )
    {
        SetFirst (_first_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new AOr (
            (PExpression)CloneNode (_first_),
            (PExpression)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOr(this);
    }

    public PExpression GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PExpression GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PDocument _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PDocument _base_,
        EOF _eof_)
    {
        SetPDocument(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PDocument) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PDocument GetPDocument()
    {
        return _base_;
    }
    public void SetPDocument(PDocument node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPDocument((PDocument) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
