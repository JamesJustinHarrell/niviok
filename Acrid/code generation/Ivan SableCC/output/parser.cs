/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using Acrid.Ivan.SableCC.node;
using Acrid.Ivan.SableCC.lexer;
using Acrid.Ivan.SableCC.analysis;

namespace Acrid.Ivan.SableCC.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTIdentifier(TIdentifier node)
    {
        index = 0;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 1;
    }

    public override void CaseTRational(TRational node)
    {
        index = 2;
    }

    public override void CaseTString(TString node)
    {
        index = 3;
    }

    public override void CaseTKConstant(TKConstant node)
    {
        index = 4;
    }

    public override void CaseTKExpose(TKExpose node)
    {
        index = 5;
    }

    public override void CaseTKFirst(TKFirst node)
    {
        index = 6;
    }

    public override void CaseTKFunction(TKFunction node)
    {
        index = 7;
    }

    public override void CaseTKHidden(TKHidden node)
    {
        index = 8;
    }

    public override void CaseTKImport(TKImport node)
    {
        index = 9;
    }

    public override void CaseTKIn(TKIn node)
    {
        index = 10;
    }

    public override void CaseTKInout(TKInout node)
    {
        index = 11;
    }

    public override void CaseTKOut(TKOut node)
    {
        index = 12;
    }

    public override void CaseTKOverload(TKOverload node)
    {
        index = 13;
    }

    public override void CaseTKRaise(TKRaise node)
    {
        index = 14;
    }

    public override void CaseTKSieve(TKSieve node)
    {
        index = 15;
    }

    public override void CaseTKVariable(TKVariable node)
    {
        index = 16;
    }

    public override void CaseTKVersion(TKVersion node)
    {
        index = 17;
    }

    public override void CaseTKVisible(TKVisible node)
    {
        index = 18;
    }

    public override void CaseTOAssign(TOAssign node)
    {
        index = 19;
    }

    public override void CaseTOAssignbreed(TOAssignbreed node)
    {
        index = 20;
    }

    public override void CaseTOCurlyclose(TOCurlyclose node)
    {
        index = 21;
    }

    public override void CaseTOCurlyopen(TOCurlyopen node)
    {
        index = 22;
    }

    public override void CaseTOParenopen(TOParenopen node)
    {
        index = 23;
    }

    public override void CaseTOParenclose(TOParenclose node)
    {
        index = 24;
    }

    public override void CaseTOPeriod(TOPeriod node)
    {
        index = 25;
    }

    public override void CaseTOPlaceholder(TOPlaceholder node)
    {
        index = 26;
    }

    public override void CaseTOSemicolon(TOSemicolon node)
    {
        index = 27;
    }

    public override void CaseEOF(EOF node)
    {
        index = 28;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(1), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(1), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(2), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(2), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(3), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(5), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(6), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(6), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(6), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(7), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(7), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(7), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(7), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(8), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(8), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(9), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(9), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(10), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(10), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(10), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(10), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(11), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(12), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(12), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(12), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(12), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(13), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(14), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(15), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(16), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(16), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(17), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(17), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(18), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(18), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(19), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(19), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(20), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(20), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(21), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(21), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(22), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(22), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PDocument node1 = (PDocument) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PModule pmoduleNode2 = (PModule)nodeArrayList1[0];
        ADocument pdocumentNode1 = new ADocument (
              pmoduleNode2
        );
        nodeList.Add(pdocumentNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclareempty pdeclareemptyNode2 = (PDeclareempty)nodeArrayList1[0];
        ADeclareemptyExpression pexpressionNode1 = new ADeclareemptyExpression (
              pdeclareemptyNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PRaise praiseNode2 = (PRaise)nodeArrayList1[0];
        ARaiseExpression pexpressionNode1 = new ARaiseExpression (
              praiseNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList1[0];
        AIdentifierExpression pexpressionNode1 = new AIdentifierExpression (
              tidentifierNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunction pfunctionNode2 = (PFunction)nodeArrayList1[0];
        AFunctionExpression pexpressionNode1 = new AFunctionExpression (
              pfunctionNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntegerExpression pexpressionNode1 = new AIntegerExpression (
              tintegerNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarefirst pdeclarefirstNode2 = (PDeclarefirst)nodeArrayList1[0];
        ADeclarefirstStatementdeclaration pstatementdeclarationNode1 = new ADeclarefirstStatementdeclaration (
              pdeclarefirstNode2
        );
        nodeList.Add(pstatementdeclarationNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PSieve psieveNode2 = (PSieve)nodeArrayList1[0];
        ASieveStatementdeclaration pstatementdeclarationNode1 = new ASieveStatementdeclaration (
              psieveNode2
        );
        nodeList.Add(pstatementdeclarationNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode4 = new TypedList();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList2[0];
        TypedList listNode3 = (TypedList)nodeArrayList4[0];
        if ( listNode3 != null )
        {
            listNode4.AddAll(listNode3);
        }
        AImport pimportNode1 = new AImport (
              tidentifierNode2,
              listNode4
        );
        nodeList.Add(pimportNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        TString tstringNode3 = (TString)nodeArrayList2[0];
        AImportattempt pimportattemptNode1 = new AImportattempt (
              tstringNode2,
              tstringNode3
        );
        nodeList.Add(pimportattemptNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDirection pdirectionNode2 = (PDirection)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TIdentifier tidentifierNode4 = (TIdentifier)nodeArrayList3[0];
        AParameterimpl pparameterimplNode1 = new AParameterimpl (
              pdirectionNode2,
              pexpressionNode3,
              tidentifierNode4,
              null
        );
        nodeList.Add(pparameterimplNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDirection pdirectionNode2 = (PDirection)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TIdentifier tidentifierNode4 = (TIdentifier)nodeArrayList3[0];
        PExpression pexpressionNode5 = (PExpression)nodeArrayList5[0];
        AParameterimpl pparameterimplNode1 = new AParameterimpl (
              pdirectionNode2,
              pexpressionNode3,
              tidentifierNode4,
              pexpressionNode5
        );
        nodeList.Add(pparameterimplNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AInDirection pdirectionNode1 = new AInDirection (
        );
        nodeList.Add(pdirectionNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AOutDirection pdirectionNode1 = new AOutDirection (
        );
        nodeList.Add(pdirectionNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AInoutDirection pdirectionNode1 = new AInoutDirection (
        );
        nodeList.Add(pdirectionNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList4[0];
        ATrueBoolean pbooleanNode3 = new ATrueBoolean (
        );
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AFalseBoolean pbooleanNode5 = new AFalseBoolean (
        );
        PExpression pexpressionNode6 = (PExpression)nodeArrayList6[0];
        ADeclarefirst pdeclarefirstNode1 = new ADeclarefirst (
              tidentifierNode2,
              pbooleanNode3,
              pexpressionNode4,
              pbooleanNode5,
              pexpressionNode6
        );
        nodeList.Add(pdeclarefirstNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList4[0];
        ATrueBoolean pbooleanNode3 = new ATrueBoolean (
        );
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ATrueBoolean pbooleanNode5 = new ATrueBoolean (
        );
        PExpression pexpressionNode6 = (PExpression)nodeArrayList6[0];
        ADeclarefirst pdeclarefirstNode1 = new ADeclarefirst (
              tidentifierNode2,
              pbooleanNode3,
              pexpressionNode4,
              pbooleanNode5,
              pexpressionNode6
        );
        nodeList.Add(pdeclarefirstNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList4[0];
        AFalseBoolean pbooleanNode3 = new AFalseBoolean (
        );
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AFalseBoolean pbooleanNode5 = new AFalseBoolean (
        );
        PExpression pexpressionNode6 = (PExpression)nodeArrayList6[0];
        ADeclarefirst pdeclarefirstNode1 = new ADeclarefirst (
              tidentifierNode2,
              pbooleanNode3,
              pexpressionNode4,
              pbooleanNode5,
              pexpressionNode6
        );
        nodeList.Add(pdeclarefirstNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList4[0];
        AFalseBoolean pbooleanNode3 = new AFalseBoolean (
        );
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ATrueBoolean pbooleanNode5 = new ATrueBoolean (
        );
        PExpression pexpressionNode6 = (PExpression)nodeArrayList6[0];
        ADeclarefirst pdeclarefirstNode1 = new ADeclarefirst (
              tidentifierNode2,
              pbooleanNode3,
              pexpressionNode4,
              pbooleanNode5,
              pexpressionNode6
        );
        nodeList.Add(pdeclarefirstNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        ATrueBoolean pbooleanNode2 = new ATrueBoolean (
        );
        PStatementdeclaration pstatementdeclarationNode3 = (PStatementdeclaration)nodeArrayList2[0];
        AHidable phidableNode1 = new AHidable (
              pbooleanNode2,
              pstatementdeclarationNode3
        );
        nodeList.Add(phidableNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        AFalseBoolean pbooleanNode2 = new AFalseBoolean (
        );
        PStatementdeclaration pstatementdeclarationNode3 = (PStatementdeclaration)nodeArrayList2[0];
        AHidable phidableNode1 = new AHidable (
              pbooleanNode2,
              pstatementdeclarationNode3
        );
        nodeList.Add(phidableNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode4 = new TypedList();
        TInteger tintegerNode2 = (TInteger)nodeArrayList2[0];
        TInteger tintegerNode3 = (TInteger)nodeArrayList3[0];
        PSieve psieveNode5 = (PSieve)nodeArrayList5[0];
        AModule pmoduleNode1 = new AModule (
              tintegerNode2,
              tintegerNode3,
              listNode4,
              psieveNode5
        );
        nodeList.Add(pmoduleNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode5 = new TypedList();
        TInteger tintegerNode2 = (TInteger)nodeArrayList2[0];
        TInteger tintegerNode3 = (TInteger)nodeArrayList3[0];
        TypedList listNode4 = (TypedList)nodeArrayList5[0];
        if ( listNode4 != null )
        {
            listNode5.AddAll(listNode4);
        }
        PSieve psieveNode6 = (PSieve)nodeArrayList6[0];
        AModule pmoduleNode1 = new AModule (
              tintegerNode2,
              tintegerNode3,
              listNode5,
              psieveNode6
        );
        nodeList.Add(pmoduleNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        TypedList listNode2 = new TypedList();
        TypedList listNode3 = new TypedList();
        ASieve psieveNode1 = new ASieve (
              listNode2,
              listNode3
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        ASieve psieveNode1 = new ASieve (
              listNode3,
              listNode4
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode3 = (TypedList)nodeArrayList1[0];
        if ( listNode3 != null )
        {
            listNode4.AddAll(listNode3);
        }
        ASieve psieveNode1 = new ASieve (
              listNode2,
              listNode4
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode5 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        TypedList listNode4 = (TypedList)nodeArrayList2[0];
        if ( listNode4 != null )
        {
            listNode5.AddAll(listNode4);
        }
        ASieve psieveNode1 = new ASieve (
              listNode3,
              listNode5
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode1 = (PExpression)nodeArrayList2[0];
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode3 = new TypedList();
        ASieve psieveNode1 = new ASieve (
              listNode2,
              listNode3
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList3[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        ASieve psieveNode1 = new ASieve (
              listNode3,
              listNode4
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode3 = (TypedList)nodeArrayList3[0];
        if ( listNode3 != null )
        {
            listNode4.AddAll(listNode3);
        }
        ASieve psieveNode1 = new ASieve (
              listNode2,
              listNode4
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode5 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList3[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        TypedList listNode4 = (TypedList)nodeArrayList4[0];
        if ( listNode4 != null )
        {
            listNode5.AddAll(listNode4);
        }
        ASieve psieveNode1 = new ASieve (
              listNode3,
              listNode5
        );
        nodeList.Add(psieveNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode1 = (PExpression)nodeArrayList2[0];
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIdentifier tidentifierNode2 = (TIdentifier)nodeArrayList3[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        ADeclareempty pdeclareemptyNode1 = new ADeclareempty (
              tidentifierNode2,
              pexpressionNode3
        );
        nodeList.Add(pdeclareemptyNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList2[0];
        ARaise praiseNode1 = new ARaise (
              pexpressionNode2
        );
        nodeList.Add(praiseNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PExpression pexpressionNode3 = (PExpression)nodeArrayList4[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList6[0];
        AFunction pfunctionNode1 = new AFunction (
              listNode2,
              pexpressionNode3,
              pexpressionNode4
        );
        nodeList.Add(pfunctionNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList3[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        PExpression pexpressionNode4 = (PExpression)nodeArrayList5[0];
        PExpression pexpressionNode5 = (PExpression)nodeArrayList7[0];
        AFunction pfunctionNode1 = new AFunction (
              listNode3,
              pexpressionNode4,
              pexpressionNode5
        );
        nodeList.Add(pfunctionNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PImportattempt pimportattemptNode1 = (PImportattempt)nodeArrayList1[0];
        if ( pimportattemptNode1 != null )
        {
            listNode2.Add(pimportattemptNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PImportattempt pimportattemptNode2 = (PImportattempt)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pimportattemptNode2 != null )
        {
            listNode3.Add(pimportattemptNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PImport pimportNode1 = (PImport)nodeArrayList1[0];
        if ( pimportNode1 != null )
        {
            listNode2.Add(pimportNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PImport pimportNode2 = (PImport)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pimportNode2 != null )
        {
            listNode3.Add(pimportNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PExpression pexpressionNode1 = (PExpression)nodeArrayList1[0];
        if ( pexpressionNode1 != null )
        {
            listNode2.Add(pexpressionNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PExpression pexpressionNode2 = (PExpression)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pexpressionNode2 != null )
        {
            listNode3.Add(pexpressionNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PHidable phidableNode1 = (PHidable)nodeArrayList1[0];
        if ( phidableNode1 != null )
        {
            listNode2.Add(phidableNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PHidable phidableNode2 = (PHidable)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( phidableNode2 != null )
        {
            listNode3.Add(phidableNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PExpression pexpressionNode1 = (PExpression)nodeArrayList1[0];
        if ( pexpressionNode1 != null )
        {
            listNode2.Add(pexpressionNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PExpression pexpressionNode2 = (PExpression)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pexpressionNode2 != null )
        {
            listNode3.Add(pexpressionNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PParameterimpl pparameterimplNode1 = (PParameterimpl)nodeArrayList1[0];
        if ( pparameterimplNode1 != null )
        {
            listNode2.Add(pparameterimplNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PParameterimpl pparameterimplNode2 = (PParameterimpl)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pparameterimplNode2 != null )
        {
            listNode3.Add(pparameterimplNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {17, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {1, 0, 4},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {28, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {1, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {27, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {5, 0, 7},
        new int[] {8, 0, 8},
        new int[] {9, 0, 9},
        new int[] {18, 0, 10},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {6, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {0, 0, 32},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {6, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 1, 39},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {5, 0, 7},
        new int[] {8, 0, 8},
        new int[] {9, 0, 9},
        new int[] {18, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {5, 0, 7},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 25},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {23, 0, 39},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {27, 0, 42},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {4, 0, 43},
        new int[] {13, 0, 44},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {22, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {22, 0, 47},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {27, 0, 48},
      },
      new int[][] {
        new int[] {-1, 1, 40},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 1, 26},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {10, 0, 49},
        new int[] {11, 0, 50},
        new int[] {12, 0, 51},
        new int[] {24, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {0, 0, 56},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 44},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {5, 0, 59},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
        new int[] {21, 0, 60},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {3, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {10, 0, 49},
        new int[] {11, 0, 50},
        new int[] {12, 0, 51},
        new int[] {24, 0, 69},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 3, 57},
        new int[] {0, 0, 71},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {0, 0, 72},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 3, 62},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
        new int[] {21, 0, 74},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {5, 0, 59},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
        new int[] {21, 0, 75},
      },
      new int[][] {
        new int[] {-1, 3, 64},
        new int[] {3, 0, 78},
      },
      new int[][] {
        new int[] {-1, 1, 37},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {3, 0, 64},
        new int[] {21, 0, 79},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {22, 0, 81},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {0, 0, 82},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 3, 71},
        new int[] {19, 0, 84},
        new int[] {20, 0, 85},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {19, 0, 86},
        new int[] {20, 0, 87},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {27, 0, 88},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 3, 77},
        new int[] {8, 0, 8},
        new int[] {18, 0, 10},
        new int[] {21, 0, 89},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {27, 0, 90},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {19, 0, 92},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {22, 0, 93},
      },
      new int[][] {
        new int[] {-1, 3, 84},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {21, 0, 98},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {0, 0, 18},
        new int[] {1, 0, 19},
        new int[] {7, 0, 20},
        new int[] {14, 0, 21},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 3, 100},
        new int[] {21, 0, 101},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 23},
        new int[] {21, 40},
        new int[] {22, 41},
        new int[] {43, 57},
        new int[] {44, 58},
        new int[] {52, 67},
        new int[] {54, 68},
        new int[] {59, 73},
        new int[] {69, 83},
        new int[] {81, 91},
        new int[] {84, 94},
        new int[] {85, 95},
        new int[] {86, 96},
        new int[] {87, 97},
        new int[] {92, 99},
        new int[] {93, 100},
      },
      new int[][] {
        new int[] {-1, 29},
        new int[] {10, 33},
      },
      new int[][] {
        new int[] {-1, 11},
        new int[] {15, 34},
      },
      new int[][] {
        new int[] {-1, 65},
        new int[] {66, 80},
      },
      new int[][] {
        new int[] {-1, 53},
        new int[] {55, 70},
      },
      new int[][] {
        new int[] {-1, 54},
      },
      new int[][] {
        new int[] {-1, 30},
      },
      new int[][] {
        new int[] {-1, 12},
        new int[] {17, 38},
        new int[] {37, 38},
        new int[] {62, 38},
        new int[] {77, 38},
      },
      new int[][] {
        new int[] {-1, 3},
      },
      new int[][] {
        new int[] {-1, 13},
        new int[] {15, 35},
      },
      new int[][] {
        new int[] {-1, 14},
        new int[] {16, 36},
      },
      new int[][] {
        new int[] {-1, 31},
      },
      new int[][] {
        new int[] {-1, 61},
        new int[] {63, 76},
      },
      new int[][] {
        new int[] {-1, 24},
      },
      new int[][] {
        new int[] {-1, 25},
      },
      new int[][] {
        new int[] {-1, 26},
      },
      new int[][] {
        new int[] {-1, 66},
      },
      new int[][] {
        new int[] {-1, 15},
      },
      new int[][] {
        new int[] {-1, 16},
      },
      new int[][] {
        new int[] {-1, 17},
        new int[] {16, 37},
        new int[] {45, 62},
        new int[] {63, 77},
      },
      new int[][] {
        new int[] {-1, 63},
      },
      new int[][] {
        new int[] {-1, 55},
      },
    };

    private static String[] errorMessages = {
      "expecting: '!version'",
      "expecting: integer",
      "expecting: EOF",
      "expecting: ';'",
      "expecting: '!expose', '!hidden', '!import', '!visible', EOF",
      "expecting: identifier, integer, '!function', '!raise', '!variable'",
      "expecting: '!first', '!sieve'",
      "expecting: identifier",
      "expecting: '!hidden', '!visible', '}', EOF",
      "expecting: '!expose', '!hidden', '!visible', EOF",
      "expecting: '!hidden', '!visible', EOF",
      "expecting: identifier, '!in', '!inout', '!out', '}', '{', ')', ';'",
      "expecting: '('",
      "expecting: '!constant', '!overload'",
      "expecting: '{'",
      "expecting: '!in', '!inout', '!out', ')'",
      "expecting: '!expose', '!hidden', '!visible', '}'",
      "expecting: string",
      "expecting: '!hidden', '!visible', '}'",
      "expecting: string, '}'",
      "expecting: '=', ':='",
      "expecting: '!in', '!inout', '!out', '=', ')'",
      "expecting: '}'",
    };

    private static int[] errors = {
      0, 1, 2, 2, 1, 3, 4, 5, 6, 7, 6, 4, 8, 2, 9, 4, 
      9, 10, 11, 11, 12, 5, 5, 3, 11, 11, 11, 13, 14, 3, 3, 3, 
      14, 3, 4, 2, 9, 10, 8, 15, 11, 7, 9, 5, 5, 16, 8, 17, 
      8, 5, 5, 5, 5, 15, 5, 15, 11, 7, 7, 5, 3, 16, 18, 16, 
      17, 19, 19, 14, 7, 5, 15, 20, 20, 3, 3, 3, 16, 18, 3, 4, 
      19, 5, 21, 14, 5, 5, 5, 5, 16, 3, 19, 22, 5, 5, 3, 3, 
      3, 3, 11, 15, 22, 11, 
    };
}
}
