/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Acrid.Ivan.SableCC.analysis;

namespace Acrid.Ivan.SableCC.node {


public sealed class TIdentifier : Token
{
    public TIdentifier(string text)
    {
        Text = text;
    }

    public TIdentifier(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TIdentifier(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTIdentifier(this);
    }
}

public sealed class TInteger : Token
{
    public TInteger(string text)
    {
        Text = text;
    }

    public TInteger(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TInteger(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTInteger(this);
    }
}

public sealed class TRational : Token
{
    public TRational(string text)
    {
        Text = text;
    }

    public TRational(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRational(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRational(this);
    }
}

public sealed class TString : Token
{
    public TString(string text)
    {
        Text = text;
    }

    public TString(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TString(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTString(this);
    }
}

public sealed class TTWhitespace : Token
{
    public TTWhitespace(string text)
    {
        Text = text;
    }

    public TTWhitespace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTWhitespace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTWhitespace(this);
    }
}

public sealed class TTLinecomment : Token
{
    public TTLinecomment(string text)
    {
        Text = text;
    }

    public TTLinecomment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTLinecomment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTLinecomment(this);
    }
}

public sealed class TTMultilinecomment : Token
{
    public TTMultilinecomment(string text)
    {
        Text = text;
    }

    public TTMultilinecomment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TTMultilinecomment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTTMultilinecomment(this);
    }
}

public sealed class TKConstant : Token
{
    public TKConstant(string text)
    {
        Text = text;
    }

    public TKConstant(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKConstant(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKConstant(this);
    }
}

public sealed class TKExpose : Token
{
    public TKExpose(string text)
    {
        Text = text;
    }

    public TKExpose(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKExpose(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKExpose(this);
    }
}

public sealed class TKFirst : Token
{
    public TKFirst(string text)
    {
        Text = text;
    }

    public TKFirst(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKFirst(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKFirst(this);
    }
}

public sealed class TKFunction : Token
{
    public TKFunction(string text)
    {
        Text = text;
    }

    public TKFunction(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKFunction(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKFunction(this);
    }
}

public sealed class TKHidden : Token
{
    public TKHidden(string text)
    {
        Text = text;
    }

    public TKHidden(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKHidden(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKHidden(this);
    }
}

public sealed class TKImport : Token
{
    public TKImport(string text)
    {
        Text = text;
    }

    public TKImport(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKImport(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKImport(this);
    }
}

public sealed class TKIn : Token
{
    public TKIn(string text)
    {
        Text = text;
    }

    public TKIn(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKIn(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKIn(this);
    }
}

public sealed class TKInout : Token
{
    public TKInout(string text)
    {
        Text = text;
    }

    public TKInout(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKInout(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKInout(this);
    }
}

public sealed class TKOut : Token
{
    public TKOut(string text)
    {
        Text = text;
    }

    public TKOut(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKOut(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKOut(this);
    }
}

public sealed class TKOverload : Token
{
    public TKOverload(string text)
    {
        Text = text;
    }

    public TKOverload(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKOverload(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKOverload(this);
    }
}

public sealed class TKRaise : Token
{
    public TKRaise(string text)
    {
        Text = text;
    }

    public TKRaise(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKRaise(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKRaise(this);
    }
}

public sealed class TKSieve : Token
{
    public TKSieve(string text)
    {
        Text = text;
    }

    public TKSieve(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKSieve(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKSieve(this);
    }
}

public sealed class TKVariable : Token
{
    public TKVariable(string text)
    {
        Text = text;
    }

    public TKVariable(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKVariable(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKVariable(this);
    }
}

public sealed class TKVersion : Token
{
    public TKVersion(string text)
    {
        Text = text;
    }

    public TKVersion(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKVersion(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKVersion(this);
    }
}

public sealed class TKVisible : Token
{
    public TKVisible(string text)
    {
        Text = text;
    }

    public TKVisible(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TKVisible(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTKVisible(this);
    }
}

public sealed class TOAssign : Token
{
    public TOAssign(string text)
    {
        Text = text;
    }

    public TOAssign(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOAssign(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOAssign(this);
    }
}

public sealed class TOAssignbreed : Token
{
    public TOAssignbreed(string text)
    {
        Text = text;
    }

    public TOAssignbreed(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOAssignbreed(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOAssignbreed(this);
    }
}

public sealed class TOCurlyclose : Token
{
    public TOCurlyclose(string text)
    {
        Text = text;
    }

    public TOCurlyclose(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOCurlyclose(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOCurlyclose(this);
    }
}

public sealed class TOCurlyopen : Token
{
    public TOCurlyopen(string text)
    {
        Text = text;
    }

    public TOCurlyopen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOCurlyopen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOCurlyopen(this);
    }
}

public sealed class TOParenopen : Token
{
    public TOParenopen(string text)
    {
        Text = text;
    }

    public TOParenopen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOParenopen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOParenopen(this);
    }
}

public sealed class TOParenclose : Token
{
    public TOParenclose(string text)
    {
        Text = text;
    }

    public TOParenclose(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOParenclose(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOParenclose(this);
    }
}

public sealed class TOPeriod : Token
{
    public TOPeriod(string text)
    {
        Text = text;
    }

    public TOPeriod(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOPeriod(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOPeriod(this);
    }
}

public sealed class TOPlaceholder : Token
{
    public TOPlaceholder(string text)
    {
        Text = text;
    }

    public TOPlaceholder(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOPlaceholder(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOPlaceholder(this);
    }
}

public sealed class TOSemicolon : Token
{
    public TOSemicolon(string text)
    {
        Text = text;
    }

    public TOSemicolon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOSemicolon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOSemicolon(this);
    }
}


public abstract class Token : Node
{
    private string text;
    private int line;
    private int pos;

    public virtual string Text
    {
      get { return text; }
      set { text = value; }
    }

    public int Line
    {
      get { return line; }
      set { line = value; }
    }

    public int Pos
    {
      get { return pos; }
      set { pos = value; }
    }

    public override string ToString()
    {
        return text + " ";
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }
}

public sealed class EOF : Token
{
    public EOF()
    {
        Text = "";
    }

    public EOF(int line, int pos)
    {
        Text = "";
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
        return new EOF(Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseEOF(this);
    }
}
}
