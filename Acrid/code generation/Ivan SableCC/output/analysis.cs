/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using Acrid.Ivan.SableCC.node;

namespace Acrid.Ivan.SableCC.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseADocument(ADocument node);
    void CaseATrueBoolean(ATrueBoolean node);
    void CaseAFalseBoolean(AFalseBoolean node);
    void CaseAInDirection(AInDirection node);
    void CaseAOutDirection(AOutDirection node);
    void CaseAInoutDirection(AInoutDirection node);
    void CaseANewMemberstatus(ANewMemberstatus node);
    void CaseANormalMemberstatus(ANormalMemberstatus node);
    void CaseADeprecatedMemberstatus(ADeprecatedMemberstatus node);
    void CaseABreederMembertype(ABreederMembertype node);
    void CaseACalleeMembertype(ACalleeMembertype node);
    void CaseAGetterMembertype(AGetterMembertype node);
    void CaseASetterMembertype(ASetterMembertype node);
    void CaseAMethodMembertype(AMethodMembertype node);
    void CaseAAnd(AAnd node);
    void CaseADeclarefirst(ADeclarefirst node);
    void CaseAConditional(AConditional node);
    void CaseADeclareempty(ADeclareempty node);
    void CaseAArgument(AArgument node);
    void CaseAModule(AModule node);
    void CaseAParameterinfo(AParameterinfo node);
    void CaseAStatusedmember(AStatusedmember node);
    void CaseADictionaryentry(ADictionaryentry node);
    void CaseAImportattempt(AImportattempt node);
    void CaseASelect(ASelect node);
    void CaseAGenericinterface(AGenericinterface node);
    void CaseAParameterimpl(AParameterimpl node);
    void CaseAXor(AXor node);
    void CaseARaise(ARaise node);
    void CaseAGenerator(AGenerator node);
    void CaseABreed(ABreed node);
    void CaseANand(ANand node);
    void CaseAHidable(AHidable node);
    void CaseAFunctioninterface(AFunctioninterface node);
    void CaseACall(ACall node);
    void CaseATypeselect(ATypeselect node);
    void CaseATypecase(ATypecase node);
    void CaseAImport(AImport node);
    void CaseAMethod(AMethod node);
    void CaseAFunction(AFunction node);
    void CaseAXnor(AXnor node);
    void CaseAInstantiategeneric(AInstantiategeneric node);
    void CaseADictionary(ADictionary node);
    void CaseAObject(AObject node);
    void CaseAWorker(AWorker node);
    void CaseAGenericfunction(AGenericfunction node);
    void CaseAEnum(AEnum node);
    void CaseADeclareassign(ADeclareassign node);
    void CaseACompound(ACompound node);
    void CaseAInterface(AInterface node);
    void CaseADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node);
    void CaseASieveStatementdeclaration(ASieveStatementdeclaration node);
    void CaseASetproperty(ASetproperty node);
    void CaseASieve(ASieve node);
    void CaseAExtractmember(AExtractmember node);
    void CaseANor(ANor node);
    void CaseACase(ACase node);
    void CaseACatcher(ACatcher node);
    void CaseATrycatch(ATrycatch node);
    void CaseACallee(ACallee node);
    void CaseACaller(ACaller node);
    void CaseAAssign(AAssign node);
    void CaseAMemberimplementation(AMemberimplementation node);
    void CaseABreederInterfacemember(ABreederInterfacemember node);
    void CaseACalleeInterfacemember(ACalleeInterfacemember node);
    void CaseAPropertyInterfacemember(APropertyInterfacemember node);
    void CaseAMethodInterfacemember(AMethodInterfacemember node);
    void CaseADeclareemptyExpression(ADeclareemptyExpression node);
    void CaseARaiseExpression(ARaiseExpression node);
    void CaseAAssignExpression(AAssignExpression node);
    void CaseACallExpression(ACallExpression node);
    void CaseACompoundExpression(ACompoundExpression node);
    void CaseAConditionalExpression(AConditionalExpression node);
    void CaseACurryExpression(ACurryExpression node);
    void CaseADeclareassignExpression(ADeclareassignExpression node);
    void CaseAIdentifierExpression(AIdentifierExpression node);
    void CaseASelectExpression(ASelectExpression node);
    void CaseASetpropertyExpression(ASetpropertyExpression node);
    void CaseATrycatchExpression(ATrycatchExpression node);
    void CaseATypeselectExpression(ATypeselectExpression node);
    void CaseAAndExpression(AAndExpression node);
    void CaseANandExpression(ANandExpression node);
    void CaseAOrExpression(AOrExpression node);
    void CaseANorExpression(ANorExpression node);
    void CaseAXorExpression(AXorExpression node);
    void CaseAXnorExpression(AXnorExpression node);
    void CaseABreedExpression(ABreedExpression node);
    void CaseACallerExpression(ACallerExpression node);
    void CaseAObjectExpression(AObjectExpression node);
    void CaseADictionaryExpression(ADictionaryExpression node);
    void CaseAEnumExpression(AEnumExpression node);
    void CaseAExtractmemberExpression(AExtractmemberExpression node);
    void CaseAFunctionExpression(AFunctionExpression node);
    void CaseAFunctioninterfaceExpression(AFunctioninterfaceExpression node);
    void CaseAGeneratorExpression(AGeneratorExpression node);
    void CaseAGenericfunctionExpression(AGenericfunctionExpression node);
    void CaseAGenericinterfaceExpression(AGenericinterfaceExpression node);
    void CaseAInstantiategenericExpression(AInstantiategenericExpression node);
    void CaseAIntegerExpression(AIntegerExpression node);
    void CaseAInterfaceExpression(AInterfaceExpression node);
    void CaseARationalExpression(ARationalExpression node);
    void CaseAStringExpression(AStringExpression node);
    void CaseAEnumentry(AEnumentry node);
    void CaseABreeder(ABreeder node);
    void CaseAProperty(AProperty node);
    void CaseACurry(ACurry node);
    void CaseAOr(AOr node);

    void CaseTIdentifier(TIdentifier node);
    void CaseTInteger(TInteger node);
    void CaseTRational(TRational node);
    void CaseTString(TString node);
    void CaseTTWhitespace(TTWhitespace node);
    void CaseTTLinecomment(TTLinecomment node);
    void CaseTTMultilinecomment(TTMultilinecomment node);
    void CaseTKConstant(TKConstant node);
    void CaseTKExpose(TKExpose node);
    void CaseTKFirst(TKFirst node);
    void CaseTKFunction(TKFunction node);
    void CaseTKHidden(TKHidden node);
    void CaseTKImport(TKImport node);
    void CaseTKIn(TKIn node);
    void CaseTKInout(TKInout node);
    void CaseTKOut(TKOut node);
    void CaseTKOverload(TKOverload node);
    void CaseTKRaise(TKRaise node);
    void CaseTKSieve(TKSieve node);
    void CaseTKVariable(TKVariable node);
    void CaseTKVersion(TKVersion node);
    void CaseTKVisible(TKVisible node);
    void CaseTOAssign(TOAssign node);
    void CaseTOAssignbreed(TOAssignbreed node);
    void CaseTOCurlyclose(TOCurlyclose node);
    void CaseTOCurlyopen(TOCurlyopen node);
    void CaseTOParenopen(TOParenopen node);
    void CaseTOParenclose(TOParenclose node);
    void CaseTOPeriod(TOPeriod node);
    void CaseTOPlaceholder(TOPlaceholder node);
    void CaseTOSemicolon(TOSemicolon node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseADocument(ADocument node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATrueBoolean(ATrueBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFalseBoolean(AFalseBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInDirection(AInDirection node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOutDirection(AOutDirection node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInoutDirection(AInoutDirection node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANewMemberstatus(ANewMemberstatus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANormalMemberstatus(ANormalMemberstatus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABreederMembertype(ABreederMembertype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACalleeMembertype(ACalleeMembertype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGetterMembertype(AGetterMembertype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASetterMembertype(ASetterMembertype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodMembertype(AMethodMembertype node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAnd(AAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarefirst(ADeclarefirst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConditional(AConditional node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareempty(ADeclareempty node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArgument(AArgument node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAModule(AModule node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameterinfo(AParameterinfo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStatusedmember(AStatusedmember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADictionaryentry(ADictionaryentry node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAImportattempt(AImportattempt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASelect(ASelect node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGenericinterface(AGenericinterface node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameterimpl(AParameterimpl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAXor(AXor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARaise(ARaise node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGenerator(AGenerator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABreed(ABreed node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANand(ANand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHidable(AHidable node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctioninterface(AFunctioninterface node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACall(ACall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATypeselect(ATypeselect node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATypecase(ATypecase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAImport(AImport node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethod(AMethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunction(AFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAXnor(AXnor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInstantiategeneric(AInstantiategeneric node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADictionary(ADictionary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAObject(AObject node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWorker(AWorker node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGenericfunction(AGenericfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEnum(AEnum node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareassign(ADeclareassign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompound(ACompound node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInterface(AInterface node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASetproperty(ASetproperty node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASieve(ASieve node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExtractmember(AExtractmember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANor(ANor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACase(ACase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACatcher(ACatcher node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATrycatch(ATrycatch node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallee(ACallee node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACaller(ACaller node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssign(AAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMemberimplementation(AMemberimplementation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABreederInterfacemember(ABreederInterfacemember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACalleeInterfacemember(ACalleeInterfacemember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPropertyInterfacemember(APropertyInterfacemember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodInterfacemember(AMethodInterfacemember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareemptyExpression(ADeclareemptyExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARaiseExpression(ARaiseExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignExpression(AAssignExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallExpression(ACallExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompoundExpression(ACompoundExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConditionalExpression(AConditionalExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACurryExpression(ACurryExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareassignExpression(ADeclareassignExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdentifierExpression(AIdentifierExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASelectExpression(ASelectExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASetpropertyExpression(ASetpropertyExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATrycatchExpression(ATrycatchExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATypeselectExpression(ATypeselectExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExpression(AAndExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANandExpression(ANandExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrExpression(AOrExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANorExpression(ANorExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAXorExpression(AXorExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAXnorExpression(AXnorExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABreedExpression(ABreedExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallerExpression(ACallerExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAObjectExpression(AObjectExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADictionaryExpression(ADictionaryExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEnumExpression(AEnumExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExtractmemberExpression(AExtractmemberExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionExpression(AFunctionExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGeneratorExpression(AGeneratorExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerExpression(AIntegerExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInterfaceExpression(AInterfaceExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARationalExpression(ARationalExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringExpression(AStringExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEnumentry(AEnumentry node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABreeder(ABreeder node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProperty(AProperty node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACurry(ACurry node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOr(AOr node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTIdentifier(TIdentifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRational(TRational node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTWhitespace(TTWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTLinecomment(TTLinecomment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTMultilinecomment(TTMultilinecomment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKConstant(TKConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKExpose(TKExpose node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKFirst(TKFirst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKFunction(TKFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKHidden(TKHidden node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKImport(TKImport node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKIn(TKIn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKInout(TKInout node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKOut(TKOut node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKOverload(TKOverload node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKRaise(TKRaise node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKSieve(TKSieve node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKVariable(TKVariable node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKVersion(TKVersion node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKVisible(TKVisible node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOAssign(TOAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOAssignbreed(TOAssignbreed node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOCurlyclose(TOCurlyclose node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOCurlyopen(TOCurlyopen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOParenopen(TOParenopen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOParenclose(TOParenclose node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOPeriod(TOPeriod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOPlaceholder(TOPlaceholder node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOSemicolon(TOSemicolon node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPDocument().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InADocument(ADocument node)
    {
        DefaultIn(node);
    }

    public virtual void OutADocument(ADocument node)
    {
        DefaultOut(node);
    }

    public override void CaseADocument(ADocument node)
    {
        InADocument(node);
        if(node.GetModule() != null)
        {
            node.GetModule().Apply(this);
        }
        OutADocument(node);
    }
    public virtual void InATrueBoolean(ATrueBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrueBoolean(ATrueBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseATrueBoolean(ATrueBoolean node)
    {
        InATrueBoolean(node);
        OutATrueBoolean(node);
    }
    public virtual void InAFalseBoolean(AFalseBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFalseBoolean(AFalseBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAFalseBoolean(AFalseBoolean node)
    {
        InAFalseBoolean(node);
        OutAFalseBoolean(node);
    }
    public virtual void InAInDirection(AInDirection node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInDirection(AInDirection node)
    {
        DefaultOut(node);
    }

    public override void CaseAInDirection(AInDirection node)
    {
        InAInDirection(node);
        OutAInDirection(node);
    }
    public virtual void InAOutDirection(AOutDirection node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOutDirection(AOutDirection node)
    {
        DefaultOut(node);
    }

    public override void CaseAOutDirection(AOutDirection node)
    {
        InAOutDirection(node);
        OutAOutDirection(node);
    }
    public virtual void InAInoutDirection(AInoutDirection node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInoutDirection(AInoutDirection node)
    {
        DefaultOut(node);
    }

    public override void CaseAInoutDirection(AInoutDirection node)
    {
        InAInoutDirection(node);
        OutAInoutDirection(node);
    }
    public virtual void InANewMemberstatus(ANewMemberstatus node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewMemberstatus(ANewMemberstatus node)
    {
        DefaultOut(node);
    }

    public override void CaseANewMemberstatus(ANewMemberstatus node)
    {
        InANewMemberstatus(node);
        OutANewMemberstatus(node);
    }
    public virtual void InANormalMemberstatus(ANormalMemberstatus node)
    {
        DefaultIn(node);
    }

    public virtual void OutANormalMemberstatus(ANormalMemberstatus node)
    {
        DefaultOut(node);
    }

    public override void CaseANormalMemberstatus(ANormalMemberstatus node)
    {
        InANormalMemberstatus(node);
        OutANormalMemberstatus(node);
    }
    public virtual void InADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        DefaultOut(node);
    }

    public override void CaseADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        InADeprecatedMemberstatus(node);
        OutADeprecatedMemberstatus(node);
    }
    public virtual void InABreederMembertype(ABreederMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreederMembertype(ABreederMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseABreederMembertype(ABreederMembertype node)
    {
        InABreederMembertype(node);
        OutABreederMembertype(node);
    }
    public virtual void InACalleeMembertype(ACalleeMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutACalleeMembertype(ACalleeMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseACalleeMembertype(ACalleeMembertype node)
    {
        InACalleeMembertype(node);
        OutACalleeMembertype(node);
    }
    public virtual void InAGetterMembertype(AGetterMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGetterMembertype(AGetterMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseAGetterMembertype(AGetterMembertype node)
    {
        InAGetterMembertype(node);
        OutAGetterMembertype(node);
    }
    public virtual void InASetterMembertype(ASetterMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetterMembertype(ASetterMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseASetterMembertype(ASetterMembertype node)
    {
        InASetterMembertype(node);
        OutASetterMembertype(node);
    }
    public virtual void InAMethodMembertype(AMethodMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodMembertype(AMethodMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodMembertype(AMethodMembertype node)
    {
        InAMethodMembertype(node);
        OutAMethodMembertype(node);
    }
    public virtual void InAAnd(AAnd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAnd(AAnd node)
    {
        DefaultOut(node);
    }

    public override void CaseAAnd(AAnd node)
    {
        InAAnd(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAAnd(node);
    }
    public virtual void InADeclarefirst(ADeclarefirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarefirst(ADeclarefirst node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarefirst(ADeclarefirst node)
    {
        InADeclarefirst(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetOverload() != null)
        {
            node.GetOverload().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutADeclarefirst(node);
    }
    public virtual void InAConditional(AConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditional(AConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditional(AConditional node)
    {
        InAConditional(node);
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAConditional(node);
    }
    public virtual void InADeclareempty(ADeclareempty node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareempty(ADeclareempty node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareempty(ADeclareempty node)
    {
        InADeclareempty(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareempty(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetParametername() != null)
        {
            node.GetParametername().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAModule(AModule node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModule(AModule node)
    {
        DefaultOut(node);
    }

    public override void CaseAModule(AModule node)
    {
        InAModule(node);
        if(node.GetNiviokmajorversionnumber() != null)
        {
            node.GetNiviokmajorversionnumber().Apply(this);
        }
        if(node.GetNiviokminorversionnumber() != null)
        {
            node.GetNiviokminorversionnumber().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetImport().Count];
            node.GetImport().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PImport) temp[i]).Apply(this);
            }
        }
        if(node.GetSieve() != null)
        {
            node.GetSieve().Apply(this);
        }
        OutAModule(node);
    }
    public virtual void InAParameterinfo(AParameterinfo node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameterinfo(AParameterinfo node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameterinfo(AParameterinfo node)
    {
        InAParameterinfo(node);
        if(node.GetDirection() != null)
        {
            node.GetDirection().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetHasdefaultvalue() != null)
        {
            node.GetHasdefaultvalue().Apply(this);
        }
        OutAParameterinfo(node);
    }
    public virtual void InAStatusedmember(AStatusedmember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStatusedmember(AStatusedmember node)
    {
        DefaultOut(node);
    }

    public override void CaseAStatusedmember(AStatusedmember node)
    {
        InAStatusedmember(node);
        if(node.GetMemberstatus() != null)
        {
            node.GetMemberstatus().Apply(this);
        }
        if(node.GetMember() != null)
        {
            node.GetMember().Apply(this);
        }
        OutAStatusedmember(node);
    }
    public virtual void InADictionaryentry(ADictionaryentry node)
    {
        DefaultIn(node);
    }

    public virtual void OutADictionaryentry(ADictionaryentry node)
    {
        DefaultOut(node);
    }

    public override void CaseADictionaryentry(ADictionaryentry node)
    {
        InADictionaryentry(node);
        if(node.GetKey() != null)
        {
            node.GetKey().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutADictionaryentry(node);
    }
    public virtual void InAImportattempt(AImportattempt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAImportattempt(AImportattempt node)
    {
        DefaultOut(node);
    }

    public override void CaseAImportattempt(AImportattempt node)
    {
        InAImportattempt(node);
        if(node.GetScheme() != null)
        {
            node.GetScheme().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAImportattempt(node);
    }
    public virtual void InASelect(ASelect node)
    {
        DefaultIn(node);
    }

    public virtual void OutASelect(ASelect node)
    {
        DefaultOut(node);
    }

    public override void CaseASelect(ASelect node)
    {
        InASelect(node);
        if(node.GetInputvalue() != null)
        {
            node.GetInputvalue().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetCase().Count];
            node.GetCase().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PCase) temp[i]).Apply(this);
            }
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutASelect(node);
    }
    public virtual void InAGenericinterface(AGenericinterface node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericinterface(AGenericinterface node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericinterface(AGenericinterface node)
    {
        InAGenericinterface(node);
        {
            Object[] temp = new Object[node.GetParameter().Count];
            node.GetParameter().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        OutAGenericinterface(node);
    }
    public virtual void InAParameterimpl(AParameterimpl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameterimpl(AParameterimpl node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameterimpl(AParameterimpl node)
    {
        InAParameterimpl(node);
        if(node.GetDirection() != null)
        {
            node.GetDirection().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetDefaultvalue() != null)
        {
            node.GetDefaultvalue().Apply(this);
        }
        OutAParameterimpl(node);
    }
    public virtual void InAXor(AXor node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXor(AXor node)
    {
        DefaultOut(node);
    }

    public override void CaseAXor(AXor node)
    {
        InAXor(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAXor(node);
    }
    public virtual void InARaise(ARaise node)
    {
        DefaultIn(node);
    }

    public virtual void OutARaise(ARaise node)
    {
        DefaultOut(node);
    }

    public override void CaseARaise(ARaise node)
    {
        InARaise(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutARaise(node);
    }
    public virtual void InAGenerator(AGenerator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenerator(AGenerator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenerator(AGenerator node)
    {
        InAGenerator(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAGenerator(node);
    }
    public virtual void InABreed(ABreed node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreed(ABreed node)
    {
        DefaultOut(node);
    }

    public override void CaseABreed(ABreed node)
    {
        InABreed(node);
        if(node.GetParent() != null)
        {
            node.GetParent().Apply(this);
        }
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        OutABreed(node);
    }
    public virtual void InANand(ANand node)
    {
        DefaultIn(node);
    }

    public virtual void OutANand(ANand node)
    {
        DefaultOut(node);
    }

    public override void CaseANand(ANand node)
    {
        InANand(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutANand(node);
    }
    public virtual void InAHidable(AHidable node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHidable(AHidable node)
    {
        DefaultOut(node);
    }

    public override void CaseAHidable(AHidable node)
    {
        InAHidable(node);
        if(node.GetHidden() != null)
        {
            node.GetHidden().Apply(this);
        }
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutAHidable(node);
    }
    public virtual void InAFunctioninterface(AFunctioninterface node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioninterface(AFunctioninterface node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioninterface(AFunctioninterface node)
    {
        InAFunctioninterface(node);
        if(node.GetTemplateargumentcount() != null)
        {
            node.GetTemplateargumentcount().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParameterinfo().Count];
            node.GetParameterinfo().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        if(node.GetReturntype() != null)
        {
            node.GetReturntype().Apply(this);
        }
        OutAFunctioninterface(node);
    }
    public virtual void InACall(ACall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACall(ACall node)
    {
        DefaultOut(node);
    }

    public override void CaseACall(ACall node)
    {
        InACall(node);
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgument().Count];
            node.GetArgument().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PArgument) temp[i]).Apply(this);
            }
        }
        OutACall(node);
    }
    public virtual void InATypeselect(ATypeselect node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypeselect(ATypeselect node)
    {
        DefaultOut(node);
    }

    public override void CaseATypeselect(ATypeselect node)
    {
        InATypeselect(node);
        if(node.GetInputvalue() != null)
        {
            node.GetInputvalue().Apply(this);
        }
        if(node.GetCastedname() != null)
        {
            node.GetCastedname().Apply(this);
        }
        if(node.GetRequirematch() != null)
        {
            node.GetRequirematch().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTypecase().Count];
            node.GetTypecase().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PTypecase) temp[i]).Apply(this);
            }
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutATypeselect(node);
    }
    public virtual void InATypecase(ATypecase node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypecase(ATypecase node)
    {
        DefaultOut(node);
    }

    public override void CaseATypecase(ATypecase node)
    {
        InATypecase(node);
        {
            Object[] temp = new Object[node.GetTesttype().Count];
            node.GetTesttype().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        OutATypecase(node);
    }
    public virtual void InAImport(AImport node)
    {
        DefaultIn(node);
    }

    public virtual void OutAImport(AImport node)
    {
        DefaultOut(node);
    }

    public override void CaseAImport(AImport node)
    {
        InAImport(node);
        if(node.GetAlias() != null)
        {
            node.GetAlias().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetImportattempt().Count];
            node.GetImportattempt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PImportattempt) temp[i]).Apply(this);
            }
        }
        OutAImport(node);
    }
    public virtual void InAMethod(AMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethod(AMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethod(AMethod node)
    {
        InAMethod(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        OutAMethod(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        {
            Object[] temp = new Object[node.GetParameterimpl().Count];
            node.GetParameterimpl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PParameterimpl) temp[i]).Apply(this);
            }
        }
        if(node.GetReturntype() != null)
        {
            node.GetReturntype().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAXnor(AXnor node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXnor(AXnor node)
    {
        DefaultOut(node);
    }

    public override void CaseAXnor(AXnor node)
    {
        InAXnor(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAXnor(node);
    }
    public virtual void InAInstantiategeneric(AInstantiategeneric node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInstantiategeneric(AInstantiategeneric node)
    {
        DefaultOut(node);
    }

    public override void CaseAInstantiategeneric(AInstantiategeneric node)
    {
        InAInstantiategeneric(node);
        if(node.GetGeneric() != null)
        {
            node.GetGeneric().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgument().Count];
            node.GetArgument().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PArgument) temp[i]).Apply(this);
            }
        }
        OutAInstantiategeneric(node);
    }
    public virtual void InADictionary(ADictionary node)
    {
        DefaultIn(node);
    }

    public virtual void OutADictionary(ADictionary node)
    {
        DefaultOut(node);
    }

    public override void CaseADictionary(ADictionary node)
    {
        InADictionary(node);
        if(node.GetKeytype() != null)
        {
            node.GetKeytype().Apply(this);
        }
        if(node.GetValuetype() != null)
        {
            node.GetValuetype().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDictionaryentry().Count];
            node.GetDictionaryentry().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDictionaryentry) temp[i]).Apply(this);
            }
        }
        OutADictionary(node);
    }
    public virtual void InAObject(AObject node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObject(AObject node)
    {
        DefaultOut(node);
    }

    public override void CaseAObject(AObject node)
    {
        InAObject(node);
        {
            Object[] temp = new Object[node.GetWorker().Count];
            node.GetWorker().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PWorker) temp[i]).Apply(this);
            }
        }
        OutAObject(node);
    }
    public virtual void InAWorker(AWorker node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWorker(AWorker node)
    {
        DefaultOut(node);
    }

    public override void CaseAWorker(AWorker node)
    {
        InAWorker(node);
        if(node.GetFace() != null)
        {
            node.GetFace().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetChildworker().Count];
            node.GetChildworker().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PWorker) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetMemberimplementation().Count];
            node.GetMemberimplementation().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PMemberimplementation) temp[i]).Apply(this);
            }
        }
        OutAWorker(node);
    }
    public virtual void InAGenericfunction(AGenericfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericfunction(AGenericfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericfunction(AGenericfunction node)
    {
        InAGenericfunction(node);
        {
            Object[] temp = new Object[node.GetParameter().Count];
            node.GetParameter().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAGenericfunction(node);
    }
    public virtual void InAEnum(AEnum node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnum(AEnum node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnum(AEnum node)
    {
        InAEnum(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetEnumentry().Count];
            node.GetEnumentry().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PEnumentry) temp[i]).Apply(this);
            }
        }
        OutAEnum(node);
    }
    public virtual void InADeclareassign(ADeclareassign node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareassign(ADeclareassign node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareassign(ADeclareassign node)
    {
        InADeclareassign(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutADeclareassign(node);
    }
    public virtual void InACompound(ACompound node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompound(ACompound node)
    {
        DefaultOut(node);
    }

    public override void CaseACompound(ACompound node)
    {
        InACompound(node);
        {
            Object[] temp = new Object[node.GetExpose().Count];
            node.GetExpose().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetDeclaration().Count];
            node.GetDeclaration().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStatementdeclaration) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetMember().Count];
            node.GetMember().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        OutACompound(node);
    }
    public virtual void InAInterface(AInterface node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInterface(AInterface node)
    {
        DefaultOut(node);
    }

    public override void CaseAInterface(AInterface node)
    {
        InAInterface(node);
        {
            Object[] temp = new Object[node.GetInheritee().Count];
            node.GetInheritee().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetMember().Count];
            node.GetMember().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStatusedmember) temp[i]).Apply(this);
            }
        }
        OutAInterface(node);
    }
    public virtual void InADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        InADeclarefirstStatementdeclaration(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutADeclarefirstStatementdeclaration(node);
    }
    public virtual void InASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        InASieveStatementdeclaration(node);
        if(node.GetSieve() != null)
        {
            node.GetSieve().Apply(this);
        }
        OutASieveStatementdeclaration(node);
    }
    public virtual void InASetproperty(ASetproperty node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetproperty(ASetproperty node)
    {
        DefaultOut(node);
    }

    public override void CaseASetproperty(ASetproperty node)
    {
        InASetproperty(node);
        if(node.GetSource() != null)
        {
            node.GetSource().Apply(this);
        }
        if(node.GetPropertyname() != null)
        {
            node.GetPropertyname().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutASetproperty(node);
    }
    public virtual void InASieve(ASieve node)
    {
        DefaultIn(node);
    }

    public virtual void OutASieve(ASieve node)
    {
        DefaultOut(node);
    }

    public override void CaseASieve(ASieve node)
    {
        InASieve(node);
        {
            Object[] temp = new Object[node.GetExpose().Count];
            node.GetExpose().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetHidable().Count];
            node.GetHidable().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PHidable) temp[i]).Apply(this);
            }
        }
        OutASieve(node);
    }
    public virtual void InAExtractmember(AExtractmember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExtractmember(AExtractmember node)
    {
        DefaultOut(node);
    }

    public override void CaseAExtractmember(AExtractmember node)
    {
        InAExtractmember(node);
        if(node.GetSource() != null)
        {
            node.GetSource().Apply(this);
        }
        if(node.GetMembername() != null)
        {
            node.GetMembername().Apply(this);
        }
        OutAExtractmember(node);
    }
    public virtual void InANor(ANor node)
    {
        DefaultIn(node);
    }

    public virtual void OutANor(ANor node)
    {
        DefaultOut(node);
    }

    public override void CaseANor(ANor node)
    {
        InANor(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutANor(node);
    }
    public virtual void InACase(ACase node)
    {
        DefaultIn(node);
    }

    public virtual void OutACase(ACase node)
    {
        DefaultOut(node);
    }

    public override void CaseACase(ACase node)
    {
        InACase(node);
        {
            Object[] temp = new Object[node.GetTestvalue().Count];
            node.GetTestvalue().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        OutACase(node);
    }
    public virtual void InACatcher(ACatcher node)
    {
        DefaultIn(node);
    }

    public virtual void OutACatcher(ACatcher node)
    {
        DefaultOut(node);
    }

    public override void CaseACatcher(ACatcher node)
    {
        InACatcher(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        OutACatcher(node);
    }
    public virtual void InATrycatch(ATrycatch node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrycatch(ATrycatch node)
    {
        DefaultOut(node);
    }

    public override void CaseATrycatch(ATrycatch node)
    {
        InATrycatch(node);
        if(node.GetTry() != null)
        {
            node.GetTry().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetCatcher().Count];
            node.GetCatcher().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PCatcher) temp[i]).Apply(this);
            }
        }
        if(node.GetOnsuccess() != null)
        {
            node.GetOnsuccess().Apply(this);
        }
        if(node.GetFinally() != null)
        {
            node.GetFinally().Apply(this);
        }
        OutATrycatch(node);
    }
    public virtual void InACallee(ACallee node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallee(ACallee node)
    {
        DefaultOut(node);
    }

    public override void CaseACallee(ACallee node)
    {
        InACallee(node);
        {
            Object[] temp = new Object[node.GetParameterinfo().Count];
            node.GetParameterinfo().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        if(node.GetReturntype() != null)
        {
            node.GetReturntype().Apply(this);
        }
        OutACallee(node);
    }
    public virtual void InACaller(ACaller node)
    {
        DefaultIn(node);
    }

    public virtual void OutACaller(ACaller node)
    {
        DefaultOut(node);
    }

    public override void CaseACaller(ACaller node)
    {
        InACaller(node);
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        if(node.GetMethodname() != null)
        {
            node.GetMethodname().Apply(this);
        }
        OutACaller(node);
    }
    public virtual void InAAssign(AAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssign(AAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssign(AAssign node)
    {
        InAAssign(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAAssign(node);
    }
    public virtual void InAMemberimplementation(AMemberimplementation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMemberimplementation(AMemberimplementation node)
    {
        DefaultOut(node);
    }

    public override void CaseAMemberimplementation(AMemberimplementation node)
    {
        InAMemberimplementation(node);
        if(node.GetMembertype() != null)
        {
            node.GetMembertype().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAMemberimplementation(node);
    }
    public virtual void InABreederInterfacemember(ABreederInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreederInterfacemember(ABreederInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseABreederInterfacemember(ABreederInterfacemember node)
    {
        InABreederInterfacemember(node);
        if(node.GetBreeder() != null)
        {
            node.GetBreeder().Apply(this);
        }
        OutABreederInterfacemember(node);
    }
    public virtual void InACalleeInterfacemember(ACalleeInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutACalleeInterfacemember(ACalleeInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseACalleeInterfacemember(ACalleeInterfacemember node)
    {
        InACalleeInterfacemember(node);
        if(node.GetCallee() != null)
        {
            node.GetCallee().Apply(this);
        }
        OutACalleeInterfacemember(node);
    }
    public virtual void InAPropertyInterfacemember(APropertyInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPropertyInterfacemember(APropertyInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseAPropertyInterfacemember(APropertyInterfacemember node)
    {
        InAPropertyInterfacemember(node);
        if(node.GetProperty() != null)
        {
            node.GetProperty().Apply(this);
        }
        OutAPropertyInterfacemember(node);
    }
    public virtual void InAMethodInterfacemember(AMethodInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodInterfacemember(AMethodInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodInterfacemember(AMethodInterfacemember node)
    {
        InAMethodInterfacemember(node);
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        OutAMethodInterfacemember(node);
    }
    public virtual void InADeclareemptyExpression(ADeclareemptyExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareemptyExpression(ADeclareemptyExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareemptyExpression(ADeclareemptyExpression node)
    {
        InADeclareemptyExpression(node);
        if(node.GetDeclareempty() != null)
        {
            node.GetDeclareempty().Apply(this);
        }
        OutADeclareemptyExpression(node);
    }
    public virtual void InARaiseExpression(ARaiseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutARaiseExpression(ARaiseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseARaiseExpression(ARaiseExpression node)
    {
        InARaiseExpression(node);
        if(node.GetRaise() != null)
        {
            node.GetRaise().Apply(this);
        }
        OutARaiseExpression(node);
    }
    public virtual void InAAssignExpression(AAssignExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignExpression(AAssignExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignExpression(AAssignExpression node)
    {
        InAAssignExpression(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutAAssignExpression(node);
    }
    public virtual void InACallExpression(ACallExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallExpression(ACallExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACallExpression(ACallExpression node)
    {
        InACallExpression(node);
        if(node.GetCall() != null)
        {
            node.GetCall().Apply(this);
        }
        OutACallExpression(node);
    }
    public virtual void InACompoundExpression(ACompoundExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompoundExpression(ACompoundExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACompoundExpression(ACompoundExpression node)
    {
        InACompoundExpression(node);
        if(node.GetCompound() != null)
        {
            node.GetCompound().Apply(this);
        }
        OutACompoundExpression(node);
    }
    public virtual void InAConditionalExpression(AConditionalExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionalExpression(AConditionalExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionalExpression(AConditionalExpression node)
    {
        InAConditionalExpression(node);
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        OutAConditionalExpression(node);
    }
    public virtual void InACurryExpression(ACurryExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACurryExpression(ACurryExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACurryExpression(ACurryExpression node)
    {
        InACurryExpression(node);
        if(node.GetCurry() != null)
        {
            node.GetCurry().Apply(this);
        }
        OutACurryExpression(node);
    }
    public virtual void InADeclareassignExpression(ADeclareassignExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareassignExpression(ADeclareassignExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareassignExpression(ADeclareassignExpression node)
    {
        InADeclareassignExpression(node);
        if(node.GetDeclareassign() != null)
        {
            node.GetDeclareassign().Apply(this);
        }
        OutADeclareassignExpression(node);
    }
    public virtual void InAIdentifierExpression(AIdentifierExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierExpression(AIdentifierExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierExpression(AIdentifierExpression node)
    {
        InAIdentifierExpression(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdentifierExpression(node);
    }
    public virtual void InASelectExpression(ASelectExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASelectExpression(ASelectExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASelectExpression(ASelectExpression node)
    {
        InASelectExpression(node);
        if(node.GetSelect() != null)
        {
            node.GetSelect().Apply(this);
        }
        OutASelectExpression(node);
    }
    public virtual void InASetpropertyExpression(ASetpropertyExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetpropertyExpression(ASetpropertyExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASetpropertyExpression(ASetpropertyExpression node)
    {
        InASetpropertyExpression(node);
        if(node.GetSetproperty() != null)
        {
            node.GetSetproperty().Apply(this);
        }
        OutASetpropertyExpression(node);
    }
    public virtual void InATrycatchExpression(ATrycatchExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrycatchExpression(ATrycatchExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATrycatchExpression(ATrycatchExpression node)
    {
        InATrycatchExpression(node);
        if(node.GetTrycatch() != null)
        {
            node.GetTrycatch().Apply(this);
        }
        OutATrycatchExpression(node);
    }
    public virtual void InATypeselectExpression(ATypeselectExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypeselectExpression(ATypeselectExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATypeselectExpression(ATypeselectExpression node)
    {
        InATypeselectExpression(node);
        if(node.GetTypeselect() != null)
        {
            node.GetTypeselect().Apply(this);
        }
        OutATypeselectExpression(node);
    }
    public virtual void InAAndExpression(AAndExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpression(AAndExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpression(AAndExpression node)
    {
        InAAndExpression(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndExpression(node);
    }
    public virtual void InANandExpression(ANandExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANandExpression(ANandExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANandExpression(ANandExpression node)
    {
        InANandExpression(node);
        if(node.GetNand() != null)
        {
            node.GetNand().Apply(this);
        }
        OutANandExpression(node);
    }
    public virtual void InAOrExpression(AOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpression(AOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpression(AOrExpression node)
    {
        InAOrExpression(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrExpression(node);
    }
    public virtual void InANorExpression(ANorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANorExpression(ANorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANorExpression(ANorExpression node)
    {
        InANorExpression(node);
        if(node.GetNor() != null)
        {
            node.GetNor().Apply(this);
        }
        OutANorExpression(node);
    }
    public virtual void InAXorExpression(AXorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXorExpression(AXorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAXorExpression(AXorExpression node)
    {
        InAXorExpression(node);
        if(node.GetXor() != null)
        {
            node.GetXor().Apply(this);
        }
        OutAXorExpression(node);
    }
    public virtual void InAXnorExpression(AXnorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXnorExpression(AXnorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAXnorExpression(AXnorExpression node)
    {
        InAXnorExpression(node);
        if(node.GetXnor() != null)
        {
            node.GetXnor().Apply(this);
        }
        OutAXnorExpression(node);
    }
    public virtual void InABreedExpression(ABreedExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreedExpression(ABreedExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABreedExpression(ABreedExpression node)
    {
        InABreedExpression(node);
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        OutABreedExpression(node);
    }
    public virtual void InACallerExpression(ACallerExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallerExpression(ACallerExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACallerExpression(ACallerExpression node)
    {
        InACallerExpression(node);
        if(node.GetCaller() != null)
        {
            node.GetCaller().Apply(this);
        }
        OutACallerExpression(node);
    }
    public virtual void InAObjectExpression(AObjectExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectExpression(AObjectExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectExpression(AObjectExpression node)
    {
        InAObjectExpression(node);
        if(node.GetObject() != null)
        {
            node.GetObject().Apply(this);
        }
        OutAObjectExpression(node);
    }
    public virtual void InADictionaryExpression(ADictionaryExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADictionaryExpression(ADictionaryExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADictionaryExpression(ADictionaryExpression node)
    {
        InADictionaryExpression(node);
        if(node.GetDictionary() != null)
        {
            node.GetDictionary().Apply(this);
        }
        OutADictionaryExpression(node);
    }
    public virtual void InAEnumExpression(AEnumExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnumExpression(AEnumExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnumExpression(AEnumExpression node)
    {
        InAEnumExpression(node);
        if(node.GetEnum() != null)
        {
            node.GetEnum().Apply(this);
        }
        OutAEnumExpression(node);
    }
    public virtual void InAExtractmemberExpression(AExtractmemberExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExtractmemberExpression(AExtractmemberExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAExtractmemberExpression(AExtractmemberExpression node)
    {
        InAExtractmemberExpression(node);
        if(node.GetExtractmember() != null)
        {
            node.GetExtractmember().Apply(this);
        }
        OutAExtractmemberExpression(node);
    }
    public virtual void InAFunctionExpression(AFunctionExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionExpression(AFunctionExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionExpression(AFunctionExpression node)
    {
        InAFunctionExpression(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAFunctionExpression(node);
    }
    public virtual void InAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        InAFunctioninterfaceExpression(node);
        if(node.GetFunctioninterface() != null)
        {
            node.GetFunctioninterface().Apply(this);
        }
        OutAFunctioninterfaceExpression(node);
    }
    public virtual void InAGeneratorExpression(AGeneratorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeneratorExpression(AGeneratorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeneratorExpression(AGeneratorExpression node)
    {
        InAGeneratorExpression(node);
        if(node.GetGenerator() != null)
        {
            node.GetGenerator().Apply(this);
        }
        OutAGeneratorExpression(node);
    }
    public virtual void InAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        InAGenericfunctionExpression(node);
        if(node.GetGenericfunction() != null)
        {
            node.GetGenericfunction().Apply(this);
        }
        OutAGenericfunctionExpression(node);
    }
    public virtual void InAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        InAGenericinterfaceExpression(node);
        if(node.GetGenericinterface() != null)
        {
            node.GetGenericinterface().Apply(this);
        }
        OutAGenericinterfaceExpression(node);
    }
    public virtual void InAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        InAInstantiategenericExpression(node);
        if(node.GetInstantiategeneric() != null)
        {
            node.GetInstantiategeneric().Apply(this);
        }
        OutAInstantiategenericExpression(node);
    }
    public virtual void InAIntegerExpression(AIntegerExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerExpression(AIntegerExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerExpression(AIntegerExpression node)
    {
        InAIntegerExpression(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerExpression(node);
    }
    public virtual void InAInterfaceExpression(AInterfaceExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInterfaceExpression(AInterfaceExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAInterfaceExpression(AInterfaceExpression node)
    {
        InAInterfaceExpression(node);
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        OutAInterfaceExpression(node);
    }
    public virtual void InARationalExpression(ARationalExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutARationalExpression(ARationalExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseARationalExpression(ARationalExpression node)
    {
        InARationalExpression(node);
        if(node.GetRational() != null)
        {
            node.GetRational().Apply(this);
        }
        OutARationalExpression(node);
    }
    public virtual void InAStringExpression(AStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringExpression(AStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringExpression(AStringExpression node)
    {
        InAStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringExpression(node);
    }
    public virtual void InAEnumentry(AEnumentry node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnumentry(AEnumentry node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnumentry(AEnumentry node)
    {
        InAEnumentry(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAEnumentry(node);
    }
    public virtual void InABreeder(ABreeder node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreeder(ABreeder node)
    {
        DefaultOut(node);
    }

    public override void CaseABreeder(ABreeder node)
    {
        InABreeder(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutABreeder(node);
    }
    public virtual void InAProperty(AProperty node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProperty(AProperty node)
    {
        DefaultOut(node);
    }

    public override void CaseAProperty(AProperty node)
    {
        InAProperty(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetWritable() != null)
        {
            node.GetWritable().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAProperty(node);
    }
    public virtual void InACurry(ACurry node)
    {
        DefaultIn(node);
    }

    public virtual void OutACurry(ACurry node)
    {
        DefaultOut(node);
    }

    public override void CaseACurry(ACurry node)
    {
        InACurry(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgument().Count];
            node.GetArgument().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PArgument) temp[i]).Apply(this);
            }
        }
        if(node.GetCall() != null)
        {
            node.GetCall().Apply(this);
        }
        OutACurry(node);
    }
    public virtual void InAOr(AOr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOr(AOr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOr(AOr node)
    {
        InAOr(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAOr(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPDocument().Apply(this);
        OutStart(node);
    }

    public virtual void InADocument(ADocument node)
    {
        DefaultIn(node);
    }

    public virtual void OutADocument(ADocument node)
    {
        DefaultOut(node);
    }

    public override void CaseADocument(ADocument node)
    {
        InADocument(node);
        if(node.GetModule() != null)
        {
            node.GetModule().Apply(this);
        }
        OutADocument(node);
    }
    public virtual void InATrueBoolean(ATrueBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrueBoolean(ATrueBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseATrueBoolean(ATrueBoolean node)
    {
        InATrueBoolean(node);
        OutATrueBoolean(node);
    }
    public virtual void InAFalseBoolean(AFalseBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFalseBoolean(AFalseBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAFalseBoolean(AFalseBoolean node)
    {
        InAFalseBoolean(node);
        OutAFalseBoolean(node);
    }
    public virtual void InAInDirection(AInDirection node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInDirection(AInDirection node)
    {
        DefaultOut(node);
    }

    public override void CaseAInDirection(AInDirection node)
    {
        InAInDirection(node);
        OutAInDirection(node);
    }
    public virtual void InAOutDirection(AOutDirection node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOutDirection(AOutDirection node)
    {
        DefaultOut(node);
    }

    public override void CaseAOutDirection(AOutDirection node)
    {
        InAOutDirection(node);
        OutAOutDirection(node);
    }
    public virtual void InAInoutDirection(AInoutDirection node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInoutDirection(AInoutDirection node)
    {
        DefaultOut(node);
    }

    public override void CaseAInoutDirection(AInoutDirection node)
    {
        InAInoutDirection(node);
        OutAInoutDirection(node);
    }
    public virtual void InANewMemberstatus(ANewMemberstatus node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewMemberstatus(ANewMemberstatus node)
    {
        DefaultOut(node);
    }

    public override void CaseANewMemberstatus(ANewMemberstatus node)
    {
        InANewMemberstatus(node);
        OutANewMemberstatus(node);
    }
    public virtual void InANormalMemberstatus(ANormalMemberstatus node)
    {
        DefaultIn(node);
    }

    public virtual void OutANormalMemberstatus(ANormalMemberstatus node)
    {
        DefaultOut(node);
    }

    public override void CaseANormalMemberstatus(ANormalMemberstatus node)
    {
        InANormalMemberstatus(node);
        OutANormalMemberstatus(node);
    }
    public virtual void InADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        DefaultOut(node);
    }

    public override void CaseADeprecatedMemberstatus(ADeprecatedMemberstatus node)
    {
        InADeprecatedMemberstatus(node);
        OutADeprecatedMemberstatus(node);
    }
    public virtual void InABreederMembertype(ABreederMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreederMembertype(ABreederMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseABreederMembertype(ABreederMembertype node)
    {
        InABreederMembertype(node);
        OutABreederMembertype(node);
    }
    public virtual void InACalleeMembertype(ACalleeMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutACalleeMembertype(ACalleeMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseACalleeMembertype(ACalleeMembertype node)
    {
        InACalleeMembertype(node);
        OutACalleeMembertype(node);
    }
    public virtual void InAGetterMembertype(AGetterMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGetterMembertype(AGetterMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseAGetterMembertype(AGetterMembertype node)
    {
        InAGetterMembertype(node);
        OutAGetterMembertype(node);
    }
    public virtual void InASetterMembertype(ASetterMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetterMembertype(ASetterMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseASetterMembertype(ASetterMembertype node)
    {
        InASetterMembertype(node);
        OutASetterMembertype(node);
    }
    public virtual void InAMethodMembertype(AMethodMembertype node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodMembertype(AMethodMembertype node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodMembertype(AMethodMembertype node)
    {
        InAMethodMembertype(node);
        OutAMethodMembertype(node);
    }
    public virtual void InAAnd(AAnd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAnd(AAnd node)
    {
        DefaultOut(node);
    }

    public override void CaseAAnd(AAnd node)
    {
        InAAnd(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAAnd(node);
    }
    public virtual void InADeclarefirst(ADeclarefirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarefirst(ADeclarefirst node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarefirst(ADeclarefirst node)
    {
        InADeclarefirst(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetOverload() != null)
        {
            node.GetOverload().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutADeclarefirst(node);
    }
    public virtual void InAConditional(AConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditional(AConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditional(AConditional node)
    {
        InAConditional(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        OutAConditional(node);
    }
    public virtual void InADeclareempty(ADeclareempty node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareempty(ADeclareempty node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareempty(ADeclareempty node)
    {
        InADeclareempty(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutADeclareempty(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetParametername() != null)
        {
            node.GetParametername().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAModule(AModule node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModule(AModule node)
    {
        DefaultOut(node);
    }

    public override void CaseAModule(AModule node)
    {
        InAModule(node);
        if(node.GetSieve() != null)
        {
            node.GetSieve().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetImport().Count];
            node.GetImport().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PImport) temp[i]).Apply(this);
            }
        }
        if(node.GetNiviokminorversionnumber() != null)
        {
            node.GetNiviokminorversionnumber().Apply(this);
        }
        if(node.GetNiviokmajorversionnumber() != null)
        {
            node.GetNiviokmajorversionnumber().Apply(this);
        }
        OutAModule(node);
    }
    public virtual void InAParameterinfo(AParameterinfo node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameterinfo(AParameterinfo node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameterinfo(AParameterinfo node)
    {
        InAParameterinfo(node);
        if(node.GetHasdefaultvalue() != null)
        {
            node.GetHasdefaultvalue().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetDirection() != null)
        {
            node.GetDirection().Apply(this);
        }
        OutAParameterinfo(node);
    }
    public virtual void InAStatusedmember(AStatusedmember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStatusedmember(AStatusedmember node)
    {
        DefaultOut(node);
    }

    public override void CaseAStatusedmember(AStatusedmember node)
    {
        InAStatusedmember(node);
        if(node.GetMember() != null)
        {
            node.GetMember().Apply(this);
        }
        if(node.GetMemberstatus() != null)
        {
            node.GetMemberstatus().Apply(this);
        }
        OutAStatusedmember(node);
    }
    public virtual void InADictionaryentry(ADictionaryentry node)
    {
        DefaultIn(node);
    }

    public virtual void OutADictionaryentry(ADictionaryentry node)
    {
        DefaultOut(node);
    }

    public override void CaseADictionaryentry(ADictionaryentry node)
    {
        InADictionaryentry(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetKey() != null)
        {
            node.GetKey().Apply(this);
        }
        OutADictionaryentry(node);
    }
    public virtual void InAImportattempt(AImportattempt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAImportattempt(AImportattempt node)
    {
        DefaultOut(node);
    }

    public override void CaseAImportattempt(AImportattempt node)
    {
        InAImportattempt(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetScheme() != null)
        {
            node.GetScheme().Apply(this);
        }
        OutAImportattempt(node);
    }
    public virtual void InASelect(ASelect node)
    {
        DefaultIn(node);
    }

    public virtual void OutASelect(ASelect node)
    {
        DefaultOut(node);
    }

    public override void CaseASelect(ASelect node)
    {
        InASelect(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetCase().Count];
            node.GetCase().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PCase) temp[i]).Apply(this);
            }
        }
        if(node.GetInputvalue() != null)
        {
            node.GetInputvalue().Apply(this);
        }
        OutASelect(node);
    }
    public virtual void InAGenericinterface(AGenericinterface node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericinterface(AGenericinterface node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericinterface(AGenericinterface node)
    {
        InAGenericinterface(node);
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParameter().Count];
            node.GetParameter().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        OutAGenericinterface(node);
    }
    public virtual void InAParameterimpl(AParameterimpl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameterimpl(AParameterimpl node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameterimpl(AParameterimpl node)
    {
        InAParameterimpl(node);
        if(node.GetDefaultvalue() != null)
        {
            node.GetDefaultvalue().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetDirection() != null)
        {
            node.GetDirection().Apply(this);
        }
        OutAParameterimpl(node);
    }
    public virtual void InAXor(AXor node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXor(AXor node)
    {
        DefaultOut(node);
    }

    public override void CaseAXor(AXor node)
    {
        InAXor(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAXor(node);
    }
    public virtual void InARaise(ARaise node)
    {
        DefaultIn(node);
    }

    public virtual void OutARaise(ARaise node)
    {
        DefaultOut(node);
    }

    public override void CaseARaise(ARaise node)
    {
        InARaise(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutARaise(node);
    }
    public virtual void InAGenerator(AGenerator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenerator(AGenerator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenerator(AGenerator node)
    {
        InAGenerator(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAGenerator(node);
    }
    public virtual void InABreed(ABreed node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreed(ABreed node)
    {
        DefaultOut(node);
    }

    public override void CaseABreed(ABreed node)
    {
        InABreed(node);
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        if(node.GetParent() != null)
        {
            node.GetParent().Apply(this);
        }
        OutABreed(node);
    }
    public virtual void InANand(ANand node)
    {
        DefaultIn(node);
    }

    public virtual void OutANand(ANand node)
    {
        DefaultOut(node);
    }

    public override void CaseANand(ANand node)
    {
        InANand(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutANand(node);
    }
    public virtual void InAHidable(AHidable node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHidable(AHidable node)
    {
        DefaultOut(node);
    }

    public override void CaseAHidable(AHidable node)
    {
        InAHidable(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        if(node.GetHidden() != null)
        {
            node.GetHidden().Apply(this);
        }
        OutAHidable(node);
    }
    public virtual void InAFunctioninterface(AFunctioninterface node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioninterface(AFunctioninterface node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioninterface(AFunctioninterface node)
    {
        InAFunctioninterface(node);
        if(node.GetReturntype() != null)
        {
            node.GetReturntype().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParameterinfo().Count];
            node.GetParameterinfo().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        if(node.GetTemplateargumentcount() != null)
        {
            node.GetTemplateargumentcount().Apply(this);
        }
        OutAFunctioninterface(node);
    }
    public virtual void InACall(ACall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACall(ACall node)
    {
        DefaultOut(node);
    }

    public override void CaseACall(ACall node)
    {
        InACall(node);
        {
            Object[] temp = new Object[node.GetArgument().Count];
            node.GetArgument().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).Apply(this);
            }
        }
        if(node.GetReceiver() != null)
        {
            node.GetReceiver().Apply(this);
        }
        OutACall(node);
    }
    public virtual void InATypeselect(ATypeselect node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypeselect(ATypeselect node)
    {
        DefaultOut(node);
    }

    public override void CaseATypeselect(ATypeselect node)
    {
        InATypeselect(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTypecase().Count];
            node.GetTypecase().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PTypecase) temp[i]).Apply(this);
            }
        }
        if(node.GetRequirematch() != null)
        {
            node.GetRequirematch().Apply(this);
        }
        if(node.GetCastedname() != null)
        {
            node.GetCastedname().Apply(this);
        }
        if(node.GetInputvalue() != null)
        {
            node.GetInputvalue().Apply(this);
        }
        OutATypeselect(node);
    }
    public virtual void InATypecase(ATypecase node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypecase(ATypecase node)
    {
        DefaultOut(node);
    }

    public override void CaseATypecase(ATypecase node)
    {
        InATypecase(node);
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTesttype().Count];
            node.GetTesttype().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        OutATypecase(node);
    }
    public virtual void InAImport(AImport node)
    {
        DefaultIn(node);
    }

    public virtual void OutAImport(AImport node)
    {
        DefaultOut(node);
    }

    public override void CaseAImport(AImport node)
    {
        InAImport(node);
        {
            Object[] temp = new Object[node.GetImportattempt().Count];
            node.GetImportattempt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PImportattempt) temp[i]).Apply(this);
            }
        }
        if(node.GetAlias() != null)
        {
            node.GetAlias().Apply(this);
        }
        OutAImport(node);
    }
    public virtual void InAMethod(AMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethod(AMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethod(AMethod node)
    {
        InAMethod(node);
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAMethod(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetReturntype() != null)
        {
            node.GetReturntype().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParameterimpl().Count];
            node.GetParameterimpl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PParameterimpl) temp[i]).Apply(this);
            }
        }
        OutAFunction(node);
    }
    public virtual void InAXnor(AXnor node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXnor(AXnor node)
    {
        DefaultOut(node);
    }

    public override void CaseAXnor(AXnor node)
    {
        InAXnor(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAXnor(node);
    }
    public virtual void InAInstantiategeneric(AInstantiategeneric node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInstantiategeneric(AInstantiategeneric node)
    {
        DefaultOut(node);
    }

    public override void CaseAInstantiategeneric(AInstantiategeneric node)
    {
        InAInstantiategeneric(node);
        {
            Object[] temp = new Object[node.GetArgument().Count];
            node.GetArgument().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).Apply(this);
            }
        }
        if(node.GetGeneric() != null)
        {
            node.GetGeneric().Apply(this);
        }
        OutAInstantiategeneric(node);
    }
    public virtual void InADictionary(ADictionary node)
    {
        DefaultIn(node);
    }

    public virtual void OutADictionary(ADictionary node)
    {
        DefaultOut(node);
    }

    public override void CaseADictionary(ADictionary node)
    {
        InADictionary(node);
        {
            Object[] temp = new Object[node.GetDictionaryentry().Count];
            node.GetDictionaryentry().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDictionaryentry) temp[i]).Apply(this);
            }
        }
        if(node.GetValuetype() != null)
        {
            node.GetValuetype().Apply(this);
        }
        if(node.GetKeytype() != null)
        {
            node.GetKeytype().Apply(this);
        }
        OutADictionary(node);
    }
    public virtual void InAObject(AObject node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObject(AObject node)
    {
        DefaultOut(node);
    }

    public override void CaseAObject(AObject node)
    {
        InAObject(node);
        {
            Object[] temp = new Object[node.GetWorker().Count];
            node.GetWorker().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PWorker) temp[i]).Apply(this);
            }
        }
        OutAObject(node);
    }
    public virtual void InAWorker(AWorker node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWorker(AWorker node)
    {
        DefaultOut(node);
    }

    public override void CaseAWorker(AWorker node)
    {
        InAWorker(node);
        {
            Object[] temp = new Object[node.GetMemberimplementation().Count];
            node.GetMemberimplementation().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PMemberimplementation) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetChildworker().Count];
            node.GetChildworker().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PWorker) temp[i]).Apply(this);
            }
        }
        if(node.GetFace() != null)
        {
            node.GetFace().Apply(this);
        }
        OutAWorker(node);
    }
    public virtual void InAGenericfunction(AGenericfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericfunction(AGenericfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericfunction(AGenericfunction node)
    {
        InAGenericfunction(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParameter().Count];
            node.GetParameter().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        OutAGenericfunction(node);
    }
    public virtual void InAEnum(AEnum node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnum(AEnum node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnum(AEnum node)
    {
        InAEnum(node);
        {
            Object[] temp = new Object[node.GetEnumentry().Count];
            node.GetEnumentry().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PEnumentry) temp[i]).Apply(this);
            }
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAEnum(node);
    }
    public virtual void InADeclareassign(ADeclareassign node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareassign(ADeclareassign node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareassign(ADeclareassign node)
    {
        InADeclareassign(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutADeclareassign(node);
    }
    public virtual void InACompound(ACompound node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompound(ACompound node)
    {
        DefaultOut(node);
    }

    public override void CaseACompound(ACompound node)
    {
        InACompound(node);
        {
            Object[] temp = new Object[node.GetMember().Count];
            node.GetMember().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetDeclaration().Count];
            node.GetDeclaration().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStatementdeclaration) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetExpose().Count];
            node.GetExpose().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        OutACompound(node);
    }
    public virtual void InAInterface(AInterface node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInterface(AInterface node)
    {
        DefaultOut(node);
    }

    public override void CaseAInterface(AInterface node)
    {
        InAInterface(node);
        {
            Object[] temp = new Object[node.GetMember().Count];
            node.GetMember().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStatusedmember) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetInheritee().Count];
            node.GetInheritee().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        OutAInterface(node);
    }
    public virtual void InADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarefirstStatementdeclaration(ADeclarefirstStatementdeclaration node)
    {
        InADeclarefirstStatementdeclaration(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutADeclarefirstStatementdeclaration(node);
    }
    public virtual void InASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASieveStatementdeclaration(ASieveStatementdeclaration node)
    {
        InASieveStatementdeclaration(node);
        if(node.GetSieve() != null)
        {
            node.GetSieve().Apply(this);
        }
        OutASieveStatementdeclaration(node);
    }
    public virtual void InASetproperty(ASetproperty node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetproperty(ASetproperty node)
    {
        DefaultOut(node);
    }

    public override void CaseASetproperty(ASetproperty node)
    {
        InASetproperty(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetPropertyname() != null)
        {
            node.GetPropertyname().Apply(this);
        }
        if(node.GetSource() != null)
        {
            node.GetSource().Apply(this);
        }
        OutASetproperty(node);
    }
    public virtual void InASieve(ASieve node)
    {
        DefaultIn(node);
    }

    public virtual void OutASieve(ASieve node)
    {
        DefaultOut(node);
    }

    public override void CaseASieve(ASieve node)
    {
        InASieve(node);
        {
            Object[] temp = new Object[node.GetHidable().Count];
            node.GetHidable().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PHidable) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetExpose().Count];
            node.GetExpose().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        OutASieve(node);
    }
    public virtual void InAExtractmember(AExtractmember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExtractmember(AExtractmember node)
    {
        DefaultOut(node);
    }

    public override void CaseAExtractmember(AExtractmember node)
    {
        InAExtractmember(node);
        if(node.GetMembername() != null)
        {
            node.GetMembername().Apply(this);
        }
        if(node.GetSource() != null)
        {
            node.GetSource().Apply(this);
        }
        OutAExtractmember(node);
    }
    public virtual void InANor(ANor node)
    {
        DefaultIn(node);
    }

    public virtual void OutANor(ANor node)
    {
        DefaultOut(node);
    }

    public override void CaseANor(ANor node)
    {
        InANor(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutANor(node);
    }
    public virtual void InACase(ACase node)
    {
        DefaultIn(node);
    }

    public virtual void OutACase(ACase node)
    {
        DefaultOut(node);
    }

    public override void CaseACase(ACase node)
    {
        InACase(node);
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTestvalue().Count];
            node.GetTestvalue().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpression) temp[i]).Apply(this);
            }
        }
        OutACase(node);
    }
    public virtual void InACatcher(ACatcher node)
    {
        DefaultIn(node);
    }

    public virtual void OutACatcher(ACatcher node)
    {
        DefaultOut(node);
    }

    public override void CaseACatcher(ACatcher node)
    {
        InACatcher(node);
        if(node.GetResult() != null)
        {
            node.GetResult().Apply(this);
        }
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutACatcher(node);
    }
    public virtual void InATrycatch(ATrycatch node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrycatch(ATrycatch node)
    {
        DefaultOut(node);
    }

    public override void CaseATrycatch(ATrycatch node)
    {
        InATrycatch(node);
        if(node.GetFinally() != null)
        {
            node.GetFinally().Apply(this);
        }
        if(node.GetOnsuccess() != null)
        {
            node.GetOnsuccess().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetCatcher().Count];
            node.GetCatcher().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PCatcher) temp[i]).Apply(this);
            }
        }
        if(node.GetTry() != null)
        {
            node.GetTry().Apply(this);
        }
        OutATrycatch(node);
    }
    public virtual void InACallee(ACallee node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallee(ACallee node)
    {
        DefaultOut(node);
    }

    public override void CaseACallee(ACallee node)
    {
        InACallee(node);
        if(node.GetReturntype() != null)
        {
            node.GetReturntype().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParameterinfo().Count];
            node.GetParameterinfo().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PParameterinfo) temp[i]).Apply(this);
            }
        }
        OutACallee(node);
    }
    public virtual void InACaller(ACaller node)
    {
        DefaultIn(node);
    }

    public virtual void OutACaller(ACaller node)
    {
        DefaultOut(node);
    }

    public override void CaseACaller(ACaller node)
    {
        InACaller(node);
        if(node.GetMethodname() != null)
        {
            node.GetMethodname().Apply(this);
        }
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        OutACaller(node);
    }
    public virtual void InAAssign(AAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssign(AAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssign(AAssign node)
    {
        InAAssign(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAAssign(node);
    }
    public virtual void InAMemberimplementation(AMemberimplementation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMemberimplementation(AMemberimplementation node)
    {
        DefaultOut(node);
    }

    public override void CaseAMemberimplementation(AMemberimplementation node)
    {
        InAMemberimplementation(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetMembertype() != null)
        {
            node.GetMembertype().Apply(this);
        }
        OutAMemberimplementation(node);
    }
    public virtual void InABreederInterfacemember(ABreederInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreederInterfacemember(ABreederInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseABreederInterfacemember(ABreederInterfacemember node)
    {
        InABreederInterfacemember(node);
        if(node.GetBreeder() != null)
        {
            node.GetBreeder().Apply(this);
        }
        OutABreederInterfacemember(node);
    }
    public virtual void InACalleeInterfacemember(ACalleeInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutACalleeInterfacemember(ACalleeInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseACalleeInterfacemember(ACalleeInterfacemember node)
    {
        InACalleeInterfacemember(node);
        if(node.GetCallee() != null)
        {
            node.GetCallee().Apply(this);
        }
        OutACalleeInterfacemember(node);
    }
    public virtual void InAPropertyInterfacemember(APropertyInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPropertyInterfacemember(APropertyInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseAPropertyInterfacemember(APropertyInterfacemember node)
    {
        InAPropertyInterfacemember(node);
        if(node.GetProperty() != null)
        {
            node.GetProperty().Apply(this);
        }
        OutAPropertyInterfacemember(node);
    }
    public virtual void InAMethodInterfacemember(AMethodInterfacemember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodInterfacemember(AMethodInterfacemember node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodInterfacemember(AMethodInterfacemember node)
    {
        InAMethodInterfacemember(node);
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        OutAMethodInterfacemember(node);
    }
    public virtual void InADeclareemptyExpression(ADeclareemptyExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareemptyExpression(ADeclareemptyExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareemptyExpression(ADeclareemptyExpression node)
    {
        InADeclareemptyExpression(node);
        if(node.GetDeclareempty() != null)
        {
            node.GetDeclareempty().Apply(this);
        }
        OutADeclareemptyExpression(node);
    }
    public virtual void InARaiseExpression(ARaiseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutARaiseExpression(ARaiseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseARaiseExpression(ARaiseExpression node)
    {
        InARaiseExpression(node);
        if(node.GetRaise() != null)
        {
            node.GetRaise().Apply(this);
        }
        OutARaiseExpression(node);
    }
    public virtual void InAAssignExpression(AAssignExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignExpression(AAssignExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignExpression(AAssignExpression node)
    {
        InAAssignExpression(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutAAssignExpression(node);
    }
    public virtual void InACallExpression(ACallExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallExpression(ACallExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACallExpression(ACallExpression node)
    {
        InACallExpression(node);
        if(node.GetCall() != null)
        {
            node.GetCall().Apply(this);
        }
        OutACallExpression(node);
    }
    public virtual void InACompoundExpression(ACompoundExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompoundExpression(ACompoundExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACompoundExpression(ACompoundExpression node)
    {
        InACompoundExpression(node);
        if(node.GetCompound() != null)
        {
            node.GetCompound().Apply(this);
        }
        OutACompoundExpression(node);
    }
    public virtual void InAConditionalExpression(AConditionalExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionalExpression(AConditionalExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionalExpression(AConditionalExpression node)
    {
        InAConditionalExpression(node);
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        OutAConditionalExpression(node);
    }
    public virtual void InACurryExpression(ACurryExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACurryExpression(ACurryExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACurryExpression(ACurryExpression node)
    {
        InACurryExpression(node);
        if(node.GetCurry() != null)
        {
            node.GetCurry().Apply(this);
        }
        OutACurryExpression(node);
    }
    public virtual void InADeclareassignExpression(ADeclareassignExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareassignExpression(ADeclareassignExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareassignExpression(ADeclareassignExpression node)
    {
        InADeclareassignExpression(node);
        if(node.GetDeclareassign() != null)
        {
            node.GetDeclareassign().Apply(this);
        }
        OutADeclareassignExpression(node);
    }
    public virtual void InAIdentifierExpression(AIdentifierExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierExpression(AIdentifierExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierExpression(AIdentifierExpression node)
    {
        InAIdentifierExpression(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdentifierExpression(node);
    }
    public virtual void InASelectExpression(ASelectExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASelectExpression(ASelectExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASelectExpression(ASelectExpression node)
    {
        InASelectExpression(node);
        if(node.GetSelect() != null)
        {
            node.GetSelect().Apply(this);
        }
        OutASelectExpression(node);
    }
    public virtual void InASetpropertyExpression(ASetpropertyExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetpropertyExpression(ASetpropertyExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASetpropertyExpression(ASetpropertyExpression node)
    {
        InASetpropertyExpression(node);
        if(node.GetSetproperty() != null)
        {
            node.GetSetproperty().Apply(this);
        }
        OutASetpropertyExpression(node);
    }
    public virtual void InATrycatchExpression(ATrycatchExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATrycatchExpression(ATrycatchExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATrycatchExpression(ATrycatchExpression node)
    {
        InATrycatchExpression(node);
        if(node.GetTrycatch() != null)
        {
            node.GetTrycatch().Apply(this);
        }
        OutATrycatchExpression(node);
    }
    public virtual void InATypeselectExpression(ATypeselectExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATypeselectExpression(ATypeselectExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATypeselectExpression(ATypeselectExpression node)
    {
        InATypeselectExpression(node);
        if(node.GetTypeselect() != null)
        {
            node.GetTypeselect().Apply(this);
        }
        OutATypeselectExpression(node);
    }
    public virtual void InAAndExpression(AAndExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpression(AAndExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpression(AAndExpression node)
    {
        InAAndExpression(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndExpression(node);
    }
    public virtual void InANandExpression(ANandExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANandExpression(ANandExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANandExpression(ANandExpression node)
    {
        InANandExpression(node);
        if(node.GetNand() != null)
        {
            node.GetNand().Apply(this);
        }
        OutANandExpression(node);
    }
    public virtual void InAOrExpression(AOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpression(AOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpression(AOrExpression node)
    {
        InAOrExpression(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrExpression(node);
    }
    public virtual void InANorExpression(ANorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANorExpression(ANorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANorExpression(ANorExpression node)
    {
        InANorExpression(node);
        if(node.GetNor() != null)
        {
            node.GetNor().Apply(this);
        }
        OutANorExpression(node);
    }
    public virtual void InAXorExpression(AXorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXorExpression(AXorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAXorExpression(AXorExpression node)
    {
        InAXorExpression(node);
        if(node.GetXor() != null)
        {
            node.GetXor().Apply(this);
        }
        OutAXorExpression(node);
    }
    public virtual void InAXnorExpression(AXnorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAXnorExpression(AXnorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAXnorExpression(AXnorExpression node)
    {
        InAXnorExpression(node);
        if(node.GetXnor() != null)
        {
            node.GetXnor().Apply(this);
        }
        OutAXnorExpression(node);
    }
    public virtual void InABreedExpression(ABreedExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreedExpression(ABreedExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABreedExpression(ABreedExpression node)
    {
        InABreedExpression(node);
        if(node.GetBreed() != null)
        {
            node.GetBreed().Apply(this);
        }
        OutABreedExpression(node);
    }
    public virtual void InACallerExpression(ACallerExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallerExpression(ACallerExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACallerExpression(ACallerExpression node)
    {
        InACallerExpression(node);
        if(node.GetCaller() != null)
        {
            node.GetCaller().Apply(this);
        }
        OutACallerExpression(node);
    }
    public virtual void InAObjectExpression(AObjectExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAObjectExpression(AObjectExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAObjectExpression(AObjectExpression node)
    {
        InAObjectExpression(node);
        if(node.GetObject() != null)
        {
            node.GetObject().Apply(this);
        }
        OutAObjectExpression(node);
    }
    public virtual void InADictionaryExpression(ADictionaryExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADictionaryExpression(ADictionaryExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADictionaryExpression(ADictionaryExpression node)
    {
        InADictionaryExpression(node);
        if(node.GetDictionary() != null)
        {
            node.GetDictionary().Apply(this);
        }
        OutADictionaryExpression(node);
    }
    public virtual void InAEnumExpression(AEnumExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnumExpression(AEnumExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnumExpression(AEnumExpression node)
    {
        InAEnumExpression(node);
        if(node.GetEnum() != null)
        {
            node.GetEnum().Apply(this);
        }
        OutAEnumExpression(node);
    }
    public virtual void InAExtractmemberExpression(AExtractmemberExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExtractmemberExpression(AExtractmemberExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAExtractmemberExpression(AExtractmemberExpression node)
    {
        InAExtractmemberExpression(node);
        if(node.GetExtractmember() != null)
        {
            node.GetExtractmember().Apply(this);
        }
        OutAExtractmemberExpression(node);
    }
    public virtual void InAFunctionExpression(AFunctionExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionExpression(AFunctionExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionExpression(AFunctionExpression node)
    {
        InAFunctionExpression(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAFunctionExpression(node);
    }
    public virtual void InAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioninterfaceExpression(AFunctioninterfaceExpression node)
    {
        InAFunctioninterfaceExpression(node);
        if(node.GetFunctioninterface() != null)
        {
            node.GetFunctioninterface().Apply(this);
        }
        OutAFunctioninterfaceExpression(node);
    }
    public virtual void InAGeneratorExpression(AGeneratorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeneratorExpression(AGeneratorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeneratorExpression(AGeneratorExpression node)
    {
        InAGeneratorExpression(node);
        if(node.GetGenerator() != null)
        {
            node.GetGenerator().Apply(this);
        }
        OutAGeneratorExpression(node);
    }
    public virtual void InAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericfunctionExpression(AGenericfunctionExpression node)
    {
        InAGenericfunctionExpression(node);
        if(node.GetGenericfunction() != null)
        {
            node.GetGenericfunction().Apply(this);
        }
        OutAGenericfunctionExpression(node);
    }
    public virtual void InAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGenericinterfaceExpression(AGenericinterfaceExpression node)
    {
        InAGenericinterfaceExpression(node);
        if(node.GetGenericinterface() != null)
        {
            node.GetGenericinterface().Apply(this);
        }
        OutAGenericinterfaceExpression(node);
    }
    public virtual void InAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAInstantiategenericExpression(AInstantiategenericExpression node)
    {
        InAInstantiategenericExpression(node);
        if(node.GetInstantiategeneric() != null)
        {
            node.GetInstantiategeneric().Apply(this);
        }
        OutAInstantiategenericExpression(node);
    }
    public virtual void InAIntegerExpression(AIntegerExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerExpression(AIntegerExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerExpression(AIntegerExpression node)
    {
        InAIntegerExpression(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerExpression(node);
    }
    public virtual void InAInterfaceExpression(AInterfaceExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInterfaceExpression(AInterfaceExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAInterfaceExpression(AInterfaceExpression node)
    {
        InAInterfaceExpression(node);
        if(node.GetInterface() != null)
        {
            node.GetInterface().Apply(this);
        }
        OutAInterfaceExpression(node);
    }
    public virtual void InARationalExpression(ARationalExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutARationalExpression(ARationalExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseARationalExpression(ARationalExpression node)
    {
        InARationalExpression(node);
        if(node.GetRational() != null)
        {
            node.GetRational().Apply(this);
        }
        OutARationalExpression(node);
    }
    public virtual void InAStringExpression(AStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringExpression(AStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringExpression(AStringExpression node)
    {
        InAStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringExpression(node);
    }
    public virtual void InAEnumentry(AEnumentry node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEnumentry(AEnumentry node)
    {
        DefaultOut(node);
    }

    public override void CaseAEnumentry(AEnumentry node)
    {
        InAEnumentry(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAEnumentry(node);
    }
    public virtual void InABreeder(ABreeder node)
    {
        DefaultIn(node);
    }

    public virtual void OutABreeder(ABreeder node)
    {
        DefaultOut(node);
    }

    public override void CaseABreeder(ABreeder node)
    {
        InABreeder(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutABreeder(node);
    }
    public virtual void InAProperty(AProperty node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProperty(AProperty node)
    {
        DefaultOut(node);
    }

    public override void CaseAProperty(AProperty node)
    {
        InAProperty(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetWritable() != null)
        {
            node.GetWritable().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAProperty(node);
    }
    public virtual void InACurry(ACurry node)
    {
        DefaultIn(node);
    }

    public virtual void OutACurry(ACurry node)
    {
        DefaultOut(node);
    }

    public override void CaseACurry(ACurry node)
    {
        InACurry(node);
        if(node.GetCall() != null)
        {
            node.GetCall().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgument().Count];
            node.GetArgument().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).Apply(this);
            }
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutACurry(node);
    }
    public virtual void InAOr(AOr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOr(AOr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOr(AOr node)
    {
        InAOr(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAOr(node);
    }
}
} // namespace Acrid.Ivan.SableCC.analysis
