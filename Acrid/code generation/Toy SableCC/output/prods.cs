/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Acrid.Toy.SableCC.analysis;

namespace Acrid.Toy.SableCC.node {

public abstract class PDocument : Node
{
}

public abstract class PSexp : Node
{
}


public sealed class ADocument : PDocument
{
    private TypedList _sexp_;

    public ADocument ()
    {
        this._sexp_ = new TypedList(new Sexp_Cast(this));
    }

    public ADocument (
            IList _sexp_
    )
    {
        this._sexp_ = new TypedList(new Sexp_Cast(this));
        this._sexp_.Clear();
        this._sexp_.AddAll(_sexp_);
    }

    public override Object Clone()
    {
        return new ADocument (
            CloneList (_sexp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADocument(this);
    }

    public IList GetSexp ()
    {
        return _sexp_;
    }

    public void setSexp (IList list)
    {
        _sexp_.Clear();
        _sexp_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_sexp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sexp_.Contains(child) )
        {
            _sexp_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _sexp_.Count; i++ )
        {
            Node n = (Node)_sexp_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _sexp_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _sexp_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Sexp_Cast : Cast
    {
        ADocument obj;

        internal Sexp_Cast (ADocument obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PSexp node = (PSexp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PSexp node = (PSexp) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWordSexp : PSexp
{
    private TTWord _t_word_;

    public AWordSexp ()
    {
    }

    public AWordSexp (
            TTWord _t_word_
    )
    {
        SetTWord (_t_word_);
    }

    public override Object Clone()
    {
        return new AWordSexp (
            (TTWord)CloneNode (_t_word_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWordSexp(this);
    }

    public TTWord GetTWord ()
    {
        return _t_word_;
    }

    public void SetTWord (TTWord node)
    {
        if(_t_word_ != null)
        {
            _t_word_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _t_word_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_t_word_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _t_word_ == child )
        {
            _t_word_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _t_word_ == oldChild )
        {
            SetTWord ((TTWord) newChild);
            return;
        }
    }

}
public sealed class AIntegerSexp : PSexp
{
    private TTInteger _t_integer_;

    public AIntegerSexp ()
    {
    }

    public AIntegerSexp (
            TTInteger _t_integer_
    )
    {
        SetTInteger (_t_integer_);
    }

    public override Object Clone()
    {
        return new AIntegerSexp (
            (TTInteger)CloneNode (_t_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerSexp(this);
    }

    public TTInteger GetTInteger ()
    {
        return _t_integer_;
    }

    public void SetTInteger (TTInteger node)
    {
        if(_t_integer_ != null)
        {
            _t_integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _t_integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_t_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _t_integer_ == child )
        {
            _t_integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _t_integer_ == oldChild )
        {
            SetTInteger ((TTInteger) newChild);
            return;
        }
    }

}
public sealed class ARationalSexp : PSexp
{
    private TTRational _t_rational_;

    public ARationalSexp ()
    {
    }

    public ARationalSexp (
            TTRational _t_rational_
    )
    {
        SetTRational (_t_rational_);
    }

    public override Object Clone()
    {
        return new ARationalSexp (
            (TTRational)CloneNode (_t_rational_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARationalSexp(this);
    }

    public TTRational GetTRational ()
    {
        return _t_rational_;
    }

    public void SetTRational (TTRational node)
    {
        if(_t_rational_ != null)
        {
            _t_rational_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _t_rational_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_t_rational_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _t_rational_ == child )
        {
            _t_rational_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _t_rational_ == oldChild )
        {
            SetTRational ((TTRational) newChild);
            return;
        }
    }

}
public sealed class AStringSexp : PSexp
{
    private TTString _t_string_;

    public AStringSexp ()
    {
    }

    public AStringSexp (
            TTString _t_string_
    )
    {
        SetTString (_t_string_);
    }

    public override Object Clone()
    {
        return new AStringSexp (
            (TTString)CloneNode (_t_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringSexp(this);
    }

    public TTString GetTString ()
    {
        return _t_string_;
    }

    public void SetTString (TTString node)
    {
        if(_t_string_ != null)
        {
            _t_string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _t_string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_t_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _t_string_ == child )
        {
            _t_string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _t_string_ == oldChild )
        {
            SetTString ((TTString) newChild);
            return;
        }
    }

}
public sealed class APlaceholderSexp : PSexp
{
    private TTPlaceholder _t_placeholder_;

    public APlaceholderSexp ()
    {
    }

    public APlaceholderSexp (
            TTPlaceholder _t_placeholder_
    )
    {
        SetTPlaceholder (_t_placeholder_);
    }

    public override Object Clone()
    {
        return new APlaceholderSexp (
            (TTPlaceholder)CloneNode (_t_placeholder_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlaceholderSexp(this);
    }

    public TTPlaceholder GetTPlaceholder ()
    {
        return _t_placeholder_;
    }

    public void SetTPlaceholder (TTPlaceholder node)
    {
        if(_t_placeholder_ != null)
        {
            _t_placeholder_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _t_placeholder_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_t_placeholder_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _t_placeholder_ == child )
        {
            _t_placeholder_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _t_placeholder_ == oldChild )
        {
            SetTPlaceholder ((TTPlaceholder) newChild);
            return;
        }
    }

}
public sealed class AListSexp : PSexp
{
    private TTParenopen _t_parenopen_;
    private TypedList _sexp_;

    public AListSexp ()
    {
        this._sexp_ = new TypedList(new Sexp_Cast(this));
    }

    public AListSexp (
            TTParenopen _t_parenopen_,
            IList _sexp_
    )
    {
        SetTParenopen (_t_parenopen_);
        this._sexp_ = new TypedList(new Sexp_Cast(this));
        this._sexp_.Clear();
        this._sexp_.AddAll(_sexp_);
    }

    public override Object Clone()
    {
        return new AListSexp (
            (TTParenopen)CloneNode (_t_parenopen_),
            CloneList (_sexp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListSexp(this);
    }

    public TTParenopen GetTParenopen ()
    {
        return _t_parenopen_;
    }

    public void SetTParenopen (TTParenopen node)
    {
        if(_t_parenopen_ != null)
        {
            _t_parenopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _t_parenopen_ = node;
    }
    public IList GetSexp ()
    {
        return _sexp_;
    }

    public void setSexp (IList list)
    {
        _sexp_.Clear();
        _sexp_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_t_parenopen_)
            + ToString (_sexp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _t_parenopen_ == child )
        {
            _t_parenopen_ = null;
            return;
        }
        if ( _sexp_.Contains(child) )
        {
            _sexp_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _t_parenopen_ == oldChild )
        {
            SetTParenopen ((TTParenopen) newChild);
            return;
        }
        for ( int i = 0; i < _sexp_.Count; i++ )
        {
            Node n = (Node)_sexp_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _sexp_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _sexp_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Sexp_Cast : Cast
    {
        AListSexp obj;

        internal Sexp_Cast (AListSexp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PSexp node = (PSexp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PSexp node = (PSexp) o;
            node.Parent(null);
            return node;
        }
    }
}

public sealed class Start : Node
{
    private PDocument _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PDocument _base_,
        EOF _eof_)
    {
        SetPDocument(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PDocument) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PDocument GetPDocument()
    {
        return _base_;
    }
    public void SetPDocument(PDocument node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPDocument((PDocument) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
