/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using Acrid.Toy.SableCC.node;
using Acrid.Toy.SableCC.lexer;
using Acrid.Toy.SableCC.analysis;

namespace Acrid.Toy.SableCC.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTTWord(TTWord node)
    {
        index = 0;
    }

    public override void CaseTTInteger(TTInteger node)
    {
        index = 1;
    }

    public override void CaseTTRational(TTRational node)
    {
        index = 2;
    }

    public override void CaseTTString(TTString node)
    {
        index = 3;
    }

    public override void CaseTTParenopen(TTParenopen node)
    {
        index = 4;
    }

    public override void CaseTTParenclose(TTParenclose node)
    {
        index = 5;
    }

    public override void CaseTTPlaceholder(TTPlaceholder node)
    {
        index = 6;
    }

    public override void CaseEOF(EOF node)
    {
        index = 7;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(2), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(2), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(2), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(2), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(3), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(3), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PDocument node1 = (PDocument) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        ADocument pdocumentNode1 = new ADocument (
              listNode3
        );
        nodeList.Add(pdocumentNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TTParenopen ttparenopenNode2 = (TTParenopen)nodeArrayList1[0];
        AListSexp psexpNode1 = new AListSexp (
              ttparenopenNode2,
              listNode3
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode4 = new TypedList();
        TTParenopen ttparenopenNode2 = (TTParenopen)nodeArrayList1[0];
        TypedList listNode3 = (TypedList)nodeArrayList2[0];
        if ( listNode3 != null )
        {
            listNode4.AddAll(listNode3);
        }
        AListSexp psexpNode1 = new AListSexp (
              ttparenopenNode2,
              listNode4
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TTWord ttwordNode2 = (TTWord)nodeArrayList1[0];
        AWordSexp psexpNode1 = new AWordSexp (
              ttwordNode2
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TTInteger ttintegerNode2 = (TTInteger)nodeArrayList1[0];
        AIntegerSexp psexpNode1 = new AIntegerSexp (
              ttintegerNode2
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TTRational ttrationalNode2 = (TTRational)nodeArrayList1[0];
        ARationalSexp psexpNode1 = new ARationalSexp (
              ttrationalNode2
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TTString ttstringNode2 = (TTString)nodeArrayList1[0];
        AStringSexp psexpNode1 = new AStringSexp (
              ttstringNode2
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TTPlaceholder ttplaceholderNode2 = (TTPlaceholder)nodeArrayList1[0];
        APlaceholderSexp psexpNode1 = new APlaceholderSexp (
              ttplaceholderNode2
        );
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PSexp psexpNode1 = (PSexp)nodeArrayList1[0];
        nodeList.Add(psexpNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PSexp psexpNode1 = (PSexp)nodeArrayList1[0];
        if ( psexpNode1 != null )
        {
            listNode2.Add(psexpNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PSexp psexpNode2 = (PSexp)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( psexpNode2 != null )
        {
            listNode3.Add(psexpNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {6, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 11},
        new int[] {6, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {7, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 0},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {6, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {0, 0, 1},
        new int[] {1, 0, 2},
        new int[] {2, 0, 3},
        new int[] {3, 0, 4},
        new int[] {4, 0, 5},
        new int[] {5, 0, 14},
        new int[] {6, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 7},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 9},
        new int[] {10, 13},
        new int[] {12, 13},
      },
      new int[][] {
        new int[] {-1, 10},
        new int[] {5, 12},
      },
    };

    private static String[] errorMessages = {
      "expecting: t word, t integer, t rational, t string, '(', '-'",
      "expecting: t word, t integer, t rational, t string, '(', ')', '-', EOF",
      "expecting: t word, t integer, t rational, t string, '(', ')', '-'",
      "expecting: EOF",
      "expecting: t word, t integer, t rational, t string, '(', '-', EOF",
    };

    private static int[] errors = {
      0, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 1, 2, 1, 1, 
    };
}
}
