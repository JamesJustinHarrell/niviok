/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Acrid.Toy.SableCC.node;

namespace Acrid.Toy.SableCC.lexer {

internal static class StringUtil {
	public static char replacement = (char)0xFFFD; //U+FFFD REPLACEMENT CHARACTER

	public static bool isHighSurrogate(uint codePoint) {
		return (0xD800 <= codePoint && codePoint <= 0xDBFF);
	}
	
	public static bool isLowSurrogate(uint codePoint) {
		return (0xDC00 <= codePoint && codePoint <= 0xDFFF);
	}

	public static bool isSurrogate(uint codePoint) {
		return (0xD800 <= codePoint && codePoint <= 0xDFFF);
	}
	
	public static uint fromSurrogatePair(uint high, uint low) {
		if( ! (isHighSurrogate(high) && isLowSurrogate(low)) )
			return replacement;
		return (high - 0xD800)*0x400 + (low - 0xDC00) + 0x10000;
	}

	public static char computeHighSurrogate(uint codePoint) {
		return (char)(
			((double)(codePoint - 0x10000)) /
			((double)(0x400 + 0xD800)) );
	}
	
	public static char computeLowSurrogate(uint codePoint) {
		return (char)( ((codePoint - 0x10000) % 0x400) + 0xDC00 );
	}
	
	public static IEnumerable<uint> toCodePoints(TextReader reader) {
		//key: H-high surrogate, L-low surrogate, N-non-surrogate
		//4 cases: HL, H<eof>|HN|HH, L, N
		while( reader.Peek() > -1 ) {
			char code1 = (char)reader.Read();
			if( isHighSurrogate(code1) ) {
				if( reader.Peek() > -1 && isLowSurrogate((char)reader.Peek()) )
					yield return fromSurrogatePair(code1, (char)reader.Read()); //HL
				else
					yield return replacement; //H<eof>|HN|HH
			}
			else if( isLowSurrogate(code1) ) //L
				yield return replacement;
			else
				yield return code1; //N
		}
	}
	
	public static string stringFromCodePoints(IList<uint> codePoints) {
		StringBuilder sb = new StringBuilder();
		foreach( uint codePoint in codePoints ) {
			if( codePoint > 0x10FFFF || isSurrogate(codePoint) )
				sb.Append(replacement);
			if( codePoint >= 0x10000 ) {
				sb.Append(computeHighSurrogate(codePoint));
				sb.Append(computeLowSurrogate(codePoint));
			}
			else sb.Append( (char)codePoint );
		}
		return sb.ToString();
	}
}

internal class PushbackReader {
  private IEnumerator<uint> reader;
  private Stack stack = new Stack ();


  internal PushbackReader (TextReader reader)
  {
    this.reader = StringUtil.toCodePoints(reader).GetEnumerator();
  }

  internal long Peek ()
  {
    if ( stack.Count > 0 ) return (long)stack.Peek();
    long value = __Read();
    Unread(value);
    return value;
  }

  internal long Read ()
  {
    long value = __Read();
    if( value > 127 )
      Console.WriteLine("code point: " + value.ToString());
    return value;
  }

  internal long __Read ()
  {
    if ( stack.Count > 0 ) return (long)stack.Pop();
    if ( reader.MoveNext() )
    	return reader.Current;
    else
    	return -1;
  }

  internal void Unread (long v)
  {
    stack.Push (v);
  }
}

public class LexerException : ApplicationException
{
    public LexerException(String message) : base (message)
    {
    }
}

public class Lexer
{
    protected Token token;
    protected State currentState = State.INITIAL;

    private PushbackReader input;
    private int line;
    private int pos;
    private bool cr;
    private bool eof;
    private List<uint> text = new List<uint>();


    private string TextToString() {
         return GetText(text.Count);
    }


    protected virtual void Filter()
    {
    }

    public Lexer(TextReader input)
    {
        this.input = new PushbackReader(input);
    }

    public virtual Token Peek()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        return token;
    }

    public virtual Token Next()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected virtual Token GetToken()
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = Lexer.gotoTable[currentState.id()];
        int[] accept = Lexer.accept[currentState.id()];
        text.Clear();

        while(true)
        {
            long c = GetChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.Add((uint)c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.Length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.Count;
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = New0(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = New1(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = New2(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = New3(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = New4(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = New5(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = New6(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = New7(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = New8(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = New9(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.Count > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + TextToString());
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    private Token New0(String text, int line, int pos) { return new TTWord(text, line, pos); }
    private Token New1(String text, int line, int pos) { return new TTInteger(text, line, pos); }
    private Token New2(String text, int line, int pos) { return new TTRational(text, line, pos); }
    private Token New3(String text, int line, int pos) { return new TTString(text, line, pos); }
    private Token New4(String text, int line, int pos) { return new TTParenopen(text, line, pos); }
    private Token New5(String text, int line, int pos) { return new TTParenclose(text, line, pos); }
    private Token New6(String text, int line, int pos) { return new TTPlaceholder(text, line, pos); }
    private Token New7(String text, int line, int pos) { return new TTWhitespace(text, line, pos); }
    private Token New8(String text, int line, int pos) { return new TTLinecomment(text, line, pos); }
    private Token New9(String text, int line, int pos) { return new TTMultilinecomment(text, line, pos); }

    private long GetChar()
    {
        if(eof)
        {
            return -1;
        }

        long result = input.Read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void PushBack(int acceptLength)
    {
        int length = text.Count;
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }
    }


    protected virtual void Unread(Token token)
    {
        String str = token.Text;
        if( str.Length > 0 )
        	eof = false;
        LinkedList<uint> codePoints = new LinkedList<uint>(
        	StringUtil.toCodePoints(new StringReader(str)));
        while( codePoints.Last != null ) {
        	input.Unread(codePoints.Last.Value);
        	codePoints.RemoveLast();
        }

        pos = token.Pos - 1;
        line = token.Line - 1;
    }

    private string GetText(int acceptLength)
    {
        StringBuilder s = new StringBuilder(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.Append(StringUtil.stringFromCodePoints(new uint[]{text[i]}));
        }

        return s.ToString();
    }

    private static int[][][][] gotoTable = {
      new int[][][] {
        new int[][] {
          new int[] {0, 8, 1},
          new int[] {9, 10, 2},
          new int[] {11, 12, 1},
          new int[] {13, 13, 2},
          new int[] {14, 31, 1},
          new int[] {32, 32, 2},
          new int[] {33, 33, 1},
          new int[] {34, 34, 3},
          new int[] {35, 35, 4},
          new int[] {36, 39, 1},
          new int[] {40, 40, 5},
          new int[] {41, 41, 6},
          new int[] {42, 44, 1},
          new int[] {45, 45, 7},
          new int[] {46, 46, 1},
          new int[] {47, 47, 8},
          new int[] {48, 57, 9},
          new int[] {58, 65535, 1},
        },
        new int[][] {
          new int[] {0, 32, 10},
          new int[] {33, 33, 11},
          new int[] {34, 44, 10},
          new int[] {45, 45, 12},
          new int[] {46, 47, 10},
          new int[] {48, 57, 13},
          new int[] {58, 62, 10},
          new int[] {63, 63, 14},
          new int[] {64, 65535, 10},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 8, 10},
          new int[] {9, 32, 15},
          new int[] {33, 33, 16},
          new int[] {34, 34, 17},
          new int[] {35, 44, 15},
          new int[] {45, 45, 18},
          new int[] {46, 47, 15},
          new int[] {48, 57, 19},
          new int[] {58, 62, 15},
          new int[] {63, 63, 20},
          new int[] {64, 65535, 15},
        },
        new int[][] {
          new int[] {0, 8, 10},
          new int[] {9, 9, 21},
          new int[] {10, 10, 10},
          new int[] {11, 12, 21},
          new int[] {13, 13, 10},
          new int[] {14, 32, 21},
          new int[] {33, 33, 22},
          new int[] {34, 34, 21},
          new int[] {35, 35, 10},
          new int[] {36, 44, 21},
          new int[] {45, 45, 23},
          new int[] {46, 47, 21},
          new int[] {48, 57, 24},
          new int[] {58, 62, 21},
          new int[] {63, 63, 25},
          new int[] {64, 65535, 21},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 33, -3},
          new int[] {34, 41, 10},
          new int[] {42, 42, 26},
          new int[] {43, 44, 10},
          new int[] {45, 65535, -3},
        },
        new int[][] {
          new int[] {0, 45, -3},
          new int[] {46, 46, 27},
          new int[] {47, 47, 10},
          new int[] {48, 57, 28},
          new int[] {58, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -5},
        },
        new int[][] {
          new int[] {0, 65535, -5},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -5},
        },
        new int[][] {
          new int[] {0, 65535, -5},
        },
        new int[][] {
          new int[] {0, 65535, -5},
        },
        new int[][] {
          new int[] {0, 65535, -6},
        },
        new int[][] {
          new int[] {0, 65535, -6},
        },
        new int[][] {
          new int[] {0, 65535, -6},
        },
        new int[][] {
          new int[] {0, 65535, -6},
        },
        new int[][] {
          new int[] {0, 65535, -6},
        },
        new int[][] {
          new int[] {0, 8, 10},
          new int[] {9, 32, 29},
          new int[] {33, 33, 30},
          new int[] {34, 41, 29},
          new int[] {42, 42, 31},
          new int[] {43, 44, 29},
          new int[] {45, 45, 32},
          new int[] {46, 47, 29},
          new int[] {48, 57, 33},
          new int[] {58, 62, 29},
          new int[] {63, 63, 34},
          new int[] {64, 65535, 29},
        },
        new int[][] {
          new int[] {0, 47, -3},
          new int[] {48, 57, 35},
          new int[] {58, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -11},
        },
        new int[][] {
          new int[] {0, 65535, -28},
        },
        new int[][] {
          new int[] {0, 65535, -28},
        },
        new int[][] {
          new int[] {0, 45, -3},
          new int[] {46, 46, 10},
          new int[] {47, 47, 36},
          new int[] {48, 65535, -3},
        },
        new int[][] {
          new int[] {0, 65535, -28},
        },
        new int[][] {
          new int[] {0, 65535, -28},
        },
        new int[][] {
          new int[] {0, 65535, -28},
        },
        new int[][] {
          new int[] {0, 65535, -29},
        },
        new int[][] {
          new int[] {0, 65535, -3},
        },
      },
    };

    private static int[][] accept = {
      new int[] {
        -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
      },
    };

    public class State
    {
        public static State INITIAL = new State(0);

        private int _id;

        private State(int _id)
        {
            this._id = _id;
        }

        public int id()
        {
            return _id;
        }
    }
}
}
