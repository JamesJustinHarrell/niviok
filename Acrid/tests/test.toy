#test comment test

/* test comment test */

1 0 #niviok version 1.0

() #imports

( #sieve

( #expose
	std
	stdio
)

( #statement-declaration list

#child nodes below are "hidable" nodes

(false
(declare-first header true any false
	(function
		(
			(in any title -))
		any
		(compound () () (
			(println "")
			(println ((extract-member title concat) " :"))
		)))))

(false
(declare-first headerize true any false
	(function
		(
			(in any title -)
			(in any func -))
		any
		(compound () () (
			(header ((extract-member "calling " concat) title))
			(func)
			(println "")
			(println ((extract-member "done with " concat) title))
		)))))

(false
(declare-first main true any false
	(function () any
		(compound () () (
			(headerize "doStuff" doStuff)
			(headerize "testNonProducers" testNonProducers)
			(headerize "testSometimesProducers" testSometimesProducers)
			(headerize "testAlwaysProducers" testAlwaysProducers)
		)))))

(false
(declare-first Test false Interface false
	(interface () (
		(normal (property number false Int))
		(normal (property text true String))
		))))

(false
(declare-first createObject true any false
	(function () any
		(compound () () (
			(declare-assign mText false String false "initial text")
			
			(object (
				(Test () (
					(
						getter
						number
						any
						(function()any 123)
					)
					(
						getter
						text
						any
						(function()any mText)
					)
					(
						setter
						text
						any
						(function(
							(in String newval any)
						)any
							(assign mText false newval))
					)
				))
			))
		)))))

(false
(declare-first doStuff true any false
	(function () any
		(compound () () (
			(conditional
				true (println "this is a test")
				any )
			(declare-assign str true String false
				((extract-member "ðŸ¿° Hello," concat) " World ðŸ¿±"))
			(println str)
			(println (extract-member str length))

/* xxx enumerator-loop node removed and not yet added back
			(enumerator-loop - (range 1 20 false) ((any x)) -
				(println ((extract-member x add) 10000)))
*/

/* xxx -- SableCC can't handle astral characters
			(declare-assign ðŸ¿°ðŸ¿± true String false
				"astral characters in identifiers")
			(println ðŸ¿°ðŸ¿±)
*/
			(declare-assign obj true Test false
				(createObject))
			
			(println (extract-member obj number))
			(println (extract-member obj text))
			(set-property obj text "text set through set-property node")
			(println (extract-member obj text))
			
/* xxx -- yield node replaced with yield function that hasn't been implemented yet
			(declare-assign gen true any false
				(generator any (compound () () (
					(println "printed by generator")
					(yield "yielded from generator")
					))))
			
			(println ((extract-member gen yield)))
			
			(try-catch
				nonexistantidentikey #try
				( #exception-handlers
					(Object -  - (println "exception caught"))
				)
				(println "no exception") #else
				(println "finally!") ) #finally
*/
		)))))

(false
(declare-first testNonProducers true any false
	(function () any
		(compound () (
			(declare-first dfval false any false "declare-first value")
		) (
			(println dfval)
		))
)))

(false
(declare-first testSometimesProducers true any false
	(function () any
		(compound () () (
			(header "assign, block, call")
			(declare-empty foo any)
			(assign foo false (compound () () (123)))
			(println foo)
			
/* xxx enable when Bridge.getBreederFace is implemented
			(header "cast")
			(println (cast 123 (Object false)))
*/
			(header "conditional")
			(println
				(conditional
					false 000
					(conditional
						true 111
						(222))))
			(println (conditional true 123 -))
			(println (conditional false 123 -))
		)))))

(false
(declare-first testAlwaysProducers true any false
	(function () any
		(compound () () (
			(header "testBooleanLogic")
			(testBooleanLogic)
			
			(header "function")
			(println ((function()any "some stuff")))

			(header "identifier")
			(println true)
			
			(header "integer")
			(println 98765)
			
			(header "rational")
			(println 123.456)
			
			(header "string")
			(println "This is some text.")
			
		)))))

(false
(declare-first testBooleanLogic true any false
	(function () any
		(compound () () (
			/*
			for "and", "nand", "or", and "nor" node tests:
			first come values that should shortcut,
			then values that should not shortcut
			*/
			(declare-assign t true any false
				true)
			(declare-assign f true any false
				false)
		
			(header "and")
			(println (and f t))
			(println (and t t))
			
			(header "nand")
			(println (nand f t))
			(println (nand t t))
			
			(header "or")
			(println (or t f))
			(println (or f f))
			
			(header "nor")
			(println (nor t f))
			(println (nor f f))

			(header "xor")
			(println (xor t f))
			(println (xor t t))
			
			(header "xnor")
			(println (xnor t f))
			(println (xnor t t))

		)))))

) #close statement-declaration list

) #close sieve
