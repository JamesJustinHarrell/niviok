<?xml version="1.0" ?>
<root>
	<node>
		<spec-type>
			argument
		</spec-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				parameter name
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			boolean
		</spec-type>
	</node>
	<node>
		<spec-type>
			direction
		</spec-type>
	</node>
	<node>
		<spec-type>
			expose
		</spec-type>
		<spec-super-type>
			scope-alteration
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				identifier
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			generic-parameter
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				default interface
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			identikey-category
		</spec-type>
	</node>
	<node>
		<spec-type>
			identikey-type
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identikey-category
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			import
		</spec-type>
		<spec-super-type>
			scope-alteration
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				string
			</spec-type>
			<spec-name>
				library
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				alias
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			nullable-type
		</spec-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				nullable
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			parameter
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				direction
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				has default value
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				default value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			plane
		</spec-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				scope-alteration
			</spec-type>
			<spec-name>
				alt
			</spec-name>
		</child>
		<child>
			<count>
				+
			</count>
			<spec-type>
				declare-first
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			scope-alteration
		</spec-type>
	</node>
	<node>
		<spec-type>
			using
		</spec-type>
		<spec-super-type>
			scope-alteration
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				target
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			do-while
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			do-times
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				times
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			for-key
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				container
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				key interface
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			for-pair
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				container
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				key interface
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				key name
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value interface
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				value name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			for-manual
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				initializer
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				post action
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			for-range
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				start
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				limit
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				inclusive
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			for-value
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				container
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value interface
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				action
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			loop
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			while
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				block
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			break
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				label
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			continue
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
	</node>
	<node>
		<spec-type>
			declare-empty
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identikey-type
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			labeled
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				label
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				child
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			null
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
	</node>
	<node>
		<spec-type>
			return
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			throw
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			yield
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			assign
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				breed
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			block
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				scope-alteration
			</spec-type>
			<spec-name>
				alt
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				member
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			call
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				receiver
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				argument
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			cast
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				source
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			conditional
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				possibility
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				else
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			curry
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				function
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				argument
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				call
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			declare-assign
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identikey-type
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				breed
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			declare-first
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identikey-type
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				breed
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			ignore
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				content
			</spec-name>
		</child>
		<child>
			<count>
				+
			</count>
			<spec-type>
				ignore-member
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			ignore-member
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				string
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				integer
			</spec-type>
			<spec-name>
				depth
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			namespaced-value-identikey
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				namespace
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				identikey name
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			possibility
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				result
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			select
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				case
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				else
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			case
		</spec-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				result
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			try-catch
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				try
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				exception-handler
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				else
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				finally
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			exception-handler
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				catch
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				result
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			and
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				first
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				second
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			nand
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				first
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				second
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			or
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				first
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				second
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			nor
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				first
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				second
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			xor
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				first
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				second
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			xnor
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				first
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				second
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			array
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				element
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			breed
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				parent
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			bundle
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				import
			</spec-type>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				scope-alteration
			</spec-type>
			<spec-name>
				alt
			</spec-name>
		</child>
		<child>
			<count>
				+
			</count>
			<spec-type>
				plane
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			caller
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				method name
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			chain
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				element
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			class
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				static-member
			</spec-type>
			<spec-name>
				static declaration
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				block
			</spec-type>
			<spec-name>
				static constructor
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				function
			</spec-type>
			<spec-name>
				static callee
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				class-property
			</spec-type>
			<spec-name>
				static property
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				function
			</spec-type>
			<spec-name>
				instance constructor
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				declaration
			</spec-type>
			<spec-name>
				instance declaration
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				interface-implementation
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			static-member
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				declaration
			</spec-type>
			<spec-name>
				decl
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				access
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			declaration
		</spec-type>
	</node>
	<node>
		<spec-type>
			declare-const-empty
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identikey-type
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			interface-implementation
		</spec-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				interface-implementation
			</spec-type>
			<spec-name>
				child implemenatation
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				function
			</spec-type>
			<spec-name>
				callee
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				named-function
			</spec-type>
			<spec-name>
				getter
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				named-function
			</spec-type>
			<spec-name>
				setter
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				named-function
			</spec-type>
			<spec-name>
				method
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				boolean
			</spec-type>
			<spec-name>
				default
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			named-function
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				function
			</spec-type>
			<spec-name>
				function
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			class-property
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identikey-type
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				function
			</spec-type>
			<spec-name>
				getter
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				function
			</spec-type>
			<spec-name>
				setter
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			comprehension
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				comprehension-type
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				destination collection
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				source collection
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				element name
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				test
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				output
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			comprehension-type
		</spec-type>
	</node>
	<node>
		<spec-type>
			dictionary
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
			<spec-name>
				key type
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
			<spec-name>
				value type
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				dictionary-entry
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			dictionary-entry
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				key
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			enum
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
		<child>
			<count>
				+
			</count>
			<spec-type>
				enum-entry
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			enum-entry
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			extract-member
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				source
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				member name
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			function
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				parameter
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				nullable-type
			</spec-type>
			<spec-name>
				return info
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				body
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			function-interface
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				template-argument-count
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				parameter
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				nullable-type
			</spec-type>
			<spec-name>
				return info
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			generator
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				body
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			generic-class
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				generic-parameter
			</spec-type>
			<spec-name>
				parameter
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				class
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			generic-function
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				generic-parameter
			</spec-type>
			<spec-name>
				parameter
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				function
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			generic-interface
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				+
			</count>
			<spec-type>
				generic-parameter
			</spec-type>
			<spec-name>
				parameter
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				interface
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			identifier
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
	</node>
	<node>
		<spec-type>
			instantiate-generic
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				generic
			</spec-name>
		</child>
		<child>
			<count>
				+
			</count>
			<spec-type>
				argument
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			integer
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
	</node>
	<node>
		<spec-type>
			interface
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				inheritee
			</spec-name>
		</child>
		<child>
			<count>
				*
			</count>
			<spec-type>
				statused-member
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			statused-member
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				member-status
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				interface-member
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			member-status
		</spec-type>
	</node>
	<node>
		<spec-type>
			interface-member
		</spec-type>
	</node>
	<node>
		<spec-type>
			convertor
		</spec-type>
		<child>
			<count>
				?
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			callee
		</spec-type>
		<child>
			<count>
				*
			</count>
			<spec-type>
				parameter
			</spec-type>
		</child>
		<child>
			<count>
				?
			</count>
			<spec-type>
				nullable-type
			</spec-type>
			<spec-name>
				return info
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			property
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				nullable-type
			</spec-type>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				access
			</spec-type>
		</child>
	</node>
	<node>
		<spec-type>
			method
		</spec-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			access
		</spec-type>
	</node>
	<node>
		<spec-type>
			implements
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				interface
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			rational
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
	</node>
	<node>
		<spec-type>
			set-property
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				source
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				identifier
			</spec-type>
			<spec-name>
				property name
			</spec-name>
		</child>
		<child>
			<count>
				1
			</count>
			<spec-type>
				expression
			</spec-type>
			<spec-name>
				value
			</spec-name>
		</child>
	</node>
	<node>
		<spec-type>
			string
		</spec-type>
		<spec-super-type>
			expression
		</spec-super-type>
	</node>
</root>
