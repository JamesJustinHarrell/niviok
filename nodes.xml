<?xml version="1.0" ?><node-types>
	<family>
		<typename>expression</typename>
		<members>
			<typename>remit</typename>
			<typename>throw</typename>
			<typename>yield</typename>
			<typename>declare-empty</typename>
			<typename>assign</typename>
			<typename>call</typename>
			<typename>compound</typename>
			<typename>conditional</typename>
			<typename>curry</typename>
			<typename>declare-assign</typename>
			<typename>identifier</typename>
			<typename>select</typename>
			<typename>set-property</typename>
			<typename>try-catch</typename>
			<typename>type-select</typename>
			<typename>and</typename>
			<typename>nand</typename>
			<typename>or</typename>
			<typename>nor</typename>
			<typename>xor</typename>
			<typename>xnor</typename>
			<typename>breed</typename>
			<typename>caller</typename>
			<typename>object</typename>
			<typename>dictionary</typename>
			<typename>enum</typename>
			<typename>extract-member</typename>
			<typename>function</typename>
			<typename>function-interface</typename>
			<typename>generator</typename>
			<typename>generic-function</typename>
			<typename>generic-interface</typename>
			<typename>instantiate-generic</typename>
			<typename>integer</typename>
			<typename>interface</typename>
			<typename>rational</typename>
			<typename>string</typename>
		</members>
	</family>
	<family>
		<typename>statement-declaration</typename>
		<members>
			<typename>declare-first</typename>
			<typename>sieve</typename>
		</members>
	</family>
	<family>
		<typename>interface-member</typename>
		<members>
			<typename>breeder</typename>
			<typename>callee</typename>
			<typename>property</typename>
			<typename>method</typename>
		</members>
	</family>
	<tree>
		<typename>argument</typename>
		<entry>
			<count>?</count>
			<typename>identifier</typename>
			<label>parameter name</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<terminal>
		<typename>boolean</typename>
	</terminal>
	<terminal>
		<typename>direction</typename>
	</terminal>
	<tree>
		<typename>import</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>alias</label>
		</entry>
		<entry>
			<count>+</count>
			<typename>import-attempt</typename>
		</entry>
	</tree>
	<tree>
		<typename>import-attempt</typename>
		<entry>
			<count>1</count>
			<typename>string</typename>
			<label>scheme</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>string</typename>
			<label>body</label>
		</entry>
	</tree>
	<tree>
		<typename>member-implementation</typename>
		<entry>
			<count>1</count>
			<typename>member-type</typename>
		</entry>
		<entry>
			<count>?</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>interface</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>function</label>
		</entry>
	</tree>
	<terminal>
		<typename>member-type</typename>
	</terminal>
	<tree>
		<typename>parameter-impl</typename>
		<entry>
			<count>1</count>
			<typename>direction</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>default value</label>
		</entry>
	</tree>
	<tree>
		<typename>parameter-info</typename>
		<entry>
			<count>1</count>
			<typename>direction</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>has default value</label>
		</entry>
	</tree>
	<tree>
		<typename>worker</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>face</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>worker</typename>
			<label>child worker</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>member-implementation</typename>
		</entry>
	</tree>
	<tree>
		<typename>declare-first</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>overload</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>breed</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>hidable</typename>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>hidden</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>statement-declaration</typename>
			<label>declaration</label>
		</entry>
	</tree>
	<tree>
		<typename>sieve</typename>
		<entry>
			<count>*</count>
			<typename>expression</typename>
			<label>expose</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>hidable</typename>
		</entry>
	</tree>
	<tree>
		<typename>module</typename>
		<entry>
			<count>1</count>
			<typename>integer</typename>
			<label>niviok major version number</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>integer</typename>
			<label>niviok minor version number</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>import</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>sieve</typename>
		</entry>
	</tree>
	<tree>
		<typename>remit</typename>
		<entry>
			<count>?</count>
			<typename>identifier</typename>
			<label>label</label>
		</entry>
	</tree>
	<tree>
		<typename>throw</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>yield</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>declare-empty</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
	</tree>
	<tree>
		<typename>assign</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>breed</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>call</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>receiver</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>argument</typename>
		</entry>
	</tree>
	<tree>
		<typename>compound</typename>
		<entry>
			<count>*</count>
			<typename>expression</typename>
			<label>expose</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>statement-declaration</typename>
			<label>declaration</label>
		</entry>
		<entry>
			<count>+</count>
			<typename>expression</typename>
			<label>member</label>
		</entry>
	</tree>
	<tree>
		<typename>conditional</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>test</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>result</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>else</label>
		</entry>
	</tree>
	<tree>
		<typename>curry</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>function</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>argument</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>call</label>
		</entry>
	</tree>
	<tree>
		<typename>declare-assign</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>constant</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>breed</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<terminal>
		<typename>identifier</typename>
	</terminal>
	<tree>
		<typename>select</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>input value</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>case</typename>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>else</label>
		</entry>
	</tree>
	<tree>
		<typename>case</typename>
		<entry>
			<count>+</count>
			<typename>expression</typename>
			<label>test value</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>result</label>
		</entry>
	</tree>
	<tree>
		<typename>set-property</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>source</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>property name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>try-catch</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>try</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>catcher</typename>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>on success</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>finally</label>
		</entry>
	</tree>
	<tree>
		<typename>catcher</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>test</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>result</label>
		</entry>
	</tree>
	<tree>
		<typename>type-select</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>input value</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>identifier</typename>
			<label>casted name</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>boolean</typename>
			<label>require match</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>type-case</typename>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>else</label>
		</entry>
	</tree>
	<tree>
		<typename>type-case</typename>
		<entry>
			<count>+</count>
			<typename>expression</typename>
			<label>test type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>result</label>
		</entry>
	</tree>
	<tree>
		<typename>and</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>first</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>second</label>
		</entry>
	</tree>
	<tree>
		<typename>nand</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>first</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>second</label>
		</entry>
	</tree>
	<tree>
		<typename>or</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>first</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>second</label>
		</entry>
	</tree>
	<tree>
		<typename>nor</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>first</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>second</label>
		</entry>
	</tree>
	<tree>
		<typename>xor</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>first</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>second</label>
		</entry>
	</tree>
	<tree>
		<typename>xnor</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>first</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>second</label>
		</entry>
	</tree>
	<tree>
		<typename>breed</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>parent</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>interface</label>
		</entry>
	</tree>
	<tree>
		<typename>caller</typename>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>interface</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>method name</label>
		</entry>
	</tree>
	<tree>
		<typename>object</typename>
		<entry>
			<count>+</count>
			<typename>worker</typename>
		</entry>
	</tree>
	<tree>
		<typename>dictionary</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>key type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value type</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>dictionary-entry</typename>
		</entry>
	</tree>
	<tree>
		<typename>dictionary-entry</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>key</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>enum</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>+</count>
			<typename>enum-entry</typename>
		</entry>
	</tree>
	<tree>
		<typename>enum-entry</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>value</label>
		</entry>
	</tree>
	<tree>
		<typename>extract-member</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>source</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>member name</label>
		</entry>
	</tree>
	<tree>
		<typename>function</typename>
		<entry>
			<count>*</count>
			<typename>parameter-impl</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>return type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>body</label>
		</entry>
	</tree>
	<tree>
		<typename>function-interface</typename>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>template-argument-count</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>parameter-info</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>return type</label>
		</entry>
	</tree>
	<tree>
		<typename>generator</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>body</label>
		</entry>
	</tree>
	<tree>
		<typename>generic-function</typename>
		<entry>
			<count>+</count>
			<typename>parameter-info</typename>
			<label>parameter</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>function</typename>
		</entry>
	</tree>
	<tree>
		<typename>generic-interface</typename>
		<entry>
			<count>+</count>
			<typename>parameter-info</typename>
			<label>parameter</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>interface</typename>
		</entry>
	</tree>
	<tree>
		<typename>instantiate-generic</typename>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>generic</label>
		</entry>
		<entry>
			<count>+</count>
			<typename>argument</typename>
		</entry>
	</tree>
	<terminal>
		<typename>integer</typename>
	</terminal>
	<tree>
		<typename>interface</typename>
		<entry>
			<count>*</count>
			<typename>expression</typename>
			<label>inheritee</label>
		</entry>
		<entry>
			<count>*</count>
			<typename>statused-member</typename>
			<label>member</label>
		</entry>
	</tree>
	<tree>
		<typename>statused-member</typename>
		<entry>
			<count>1</count>
			<typename>member-status</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>interface-member</typename>
			<label>member</label>
		</entry>
	</tree>
	<terminal>
		<typename>member-status</typename>
	</terminal>
	<tree>
		<typename>breeder</typename>
		<entry>
			<count>?</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
	</tree>
	<tree>
		<typename>callee</typename>
		<entry>
			<count>*</count>
			<typename>parameter-info</typename>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>return type</label>
		</entry>
	</tree>
	<tree>
		<typename>method</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>interface</label>
		</entry>
	</tree>
	<tree>
		<typename>property</typename>
		<entry>
			<count>1</count>
			<typename>identifier</typename>
			<label>name</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>boolean</typename>
			<label>writable</label>
		</entry>
		<entry>
			<count>1</count>
			<typename>expression</typename>
			<label>type</label>
		</entry>
	</tree>
	<terminal>
		<typename>rational</typename>
	</terminal>
	<terminal>
		<typename>string</typename>
	</terminal>
</node-types>