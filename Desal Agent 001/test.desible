<?xml version="1.0"?>
<?xml-stylesheet href="desible.css"?>

<bundle xmlns="urn:desible1" version="1.0"
	xmlns:des="urn:desible1" xmlns:foo="http://site.com/stuff">
	
<!--

All 96 nodes:
access, alias, and, argument, array, assign, assign-replication, block, boolean, break, bundle, call, callee, case, cast, chain, class, class-property, comprehension, comprehension-type, conditional, continue, convertor, curry, declaration, declare-assign, declare-class, declare-const-empty, declare-empty, declare-first, dictionary, dictionary-entry, direction, do-times, do-while, enum, enum-entry, exception-handler, for-key, for-manual, for-pair, for-range, for-value, function, function-interface, generator, generic-class, generic-function, generic-interface, generic-parameter, extract-member, identifier, identifier-chain, identikey-category, identikey-type, ignore, ignore-member, implements, import, instantiate-generic-class, instantiate-generic-interface, intantiate-generic-function, integer, interface, interface-implementation, interface-member, labeled, loop, member-status, method, named-function, namespaced-identikey, nand, nor, or, parameter, plane, possibility, property, rational, replicate, return, select, set-property, statused-member, string, throw, try-catch, type, unassign, unassign-function, using, while, xnor, xor, yield

var map = Array.map;
var filter = Array.filter;

var elements = document.getElementsByTagName('*');
var ids = map(elements, function(element){ return element.getAttribute("id") || ""; });
var wantedIds = filter(ids, function(id){ return id.indexOf("node.") == 0; });
var nodeNames = map(wantedIds, function(id){ return id.substr(5); });
var sortedNodeNames = nodeNames.sort();

var container = document.createElement("p");
container.innerHTML = "All " + sortedNodeNames.length + " nodes:<br />\n";
container.appendChild(document.createTextNode(sortedNodeNames.join(", ")));
document.body.appendChild(container);

-->
	
	<using>
		<identifier>std</identifier>
	</using>

	<inline-plane>
		<!--
		function header(title) {
			println("")
			println(title + " :")
		}
		-->
		<declare-first>
			<identifier label='name'>header</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<parameter>
					<nullable-type>
						<boolean label='nullable'>false</boolean>
					</nullable-type>
					<identifier label='name'>title</identifier>
					<boolean label='has-default-value'>false</boolean>
					<direction>in</direction>
				</parameter>
				<block label='body'>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<string label='value'/>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<call label='value'>
								<extract-member label='value'>
									<identifier label='source'>title</identifier>
									<identifier label='member-name'>concat</identifier>
								</extract-member>
								<argument>
									<string label='value'> :</string>
								</argument>
							</call>
						</argument>
					</call>
				</block>
			</function>
		</declare-first>
		
		<!--
		function headerize(title, function) {
			header("calling " & title)
			function()
			println("")
			println("done with " & title)
		}
		-->
		<declare-first>
			<identifier label='name'>headerize</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<parameter>
					<nullable-type>
						<boolean label='nullable'>false</boolean>
					</nullable-type>
					<identifier label='name'>title</identifier>
					<boolean label='has-default-value'>false</boolean>
					<direction>in</direction>
				</parameter>
				<parameter>
					<nullable-type>
						<boolean label='nullable'>false</boolean>
					</nullable-type>
					<identifier label='name'>function</identifier>
					<boolean label='has-default-value'>false</boolean>
					<direction>in</direction>
				</parameter>
				<block label='body'>
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<call label='value'>
								<extract-member label='value'>
									<string label='source'>calling </string>
									<identifier label='member-name'>concat</identifier>
								</extract-member>
								<argument>
									<identifier label='value'>title</identifier>
								</argument>
							</call>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>function</identifier>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<string label='value'/>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<call label='value'>
								<extract-member label='value'>
									<string label='source'>done with </string>
									<identifier label='member-name'>concat</identifier>
								</extract-member>
								<argument>
									<identifier label='value'>title</identifier>
								</argument>
							</call>
						</argument>
					</call>
				</block>
			</function>
		</declare-first>
		
		<!--
		function main() {
			headerize("doStuff", doStuff)
			headerize("testNonProducers", testNonProducers)
			headerize("testSometimesProducers", testSometimesProducers)
			headerize("testAlwaysProducers", testAlwaysProducers)
		}
		-->
		<!-- the des prefix shouldn't affect anything -->
		<des:declare-first>
			<identifier label='name'>main</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<!-- the foo:label shouldn't affect anything -->
				<block foo:label="stuff" label='body'>
					
					<!-- doStuff -->
					<call label='member'>
						<identifier label='value'>headerize</identifier>
						<argument>
							<string label='value'>doStuff</string>
						</argument>
						<argument>
							<!-- the des:label attribute shouldn't affect anything, since non-namespaced attributes are used -->
							<identifier label='value' des:label='foo'>doStuff</identifier>
						</argument>
					</call>
					
					<!-- testNonProducers -->
					<call label='member'>
						<identifier label='value'>headerize</identifier>
						<argument>
							<string label='value'>testNonProducers</string>
						</argument>
						<argument>
							<identifier label='value'>testNonProducers</identifier>
						</argument>
					</call>
					
					<!-- testSometimesProducers -->
					<call label='member'>
						<identifier label='value'>headerize</identifier>
						<argument>
							<string label='value'>testSometimesProducers</string>
						</argument>
						<argument>
							<identifier label='value'>testSometimesProducers</identifier>
						</argument>
					</call>
					
					<!-- testAlwaysProducers -->
					<call label='member'>
						<identifier label='value'>headerize</identifier>
						<argument>
							<string label='value'>testAlwaysProducers</string>
						</argument>
						<argument>
							<identifier label='value'>testAlwaysProducers</identifier>
						</argument>
					</call>
		
					<!-- this should be ignored since it's in a different namespace -->
					<foo:ignored-stuff label='member'>
						<candy>
							ABC
							<apple>
								<cinnamon/>
								DEF
							</apple>
						</candy>
					</foo:ignored-stuff>
				</block>
			</function>
		</des:declare-first>
		
		<!--
		function doStuff() {
			if true {
				println("this is a test")
			}
			string str = "ðŸ¿° Hello,".concat(" World ðŸ¿±")
			println(str)
			println(str.length)
			for x from 1 to 20  {
				println( x.add(10000) )
			}
		}
		-->
		<declare-first>
			<identifier label='name'>doStuff</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<block label='body'>
					<possibility label='member'>
						<identifier label='test'>true</identifier>
						<block label='result'>
							<call label='member'>
								<identifier label='value'>println</identifier>
								<argument>
									<string label='value'>this is a test</string>
								</argument>
							</call>
						</block>
					</possibility>
					<declare-assign label='member'>
						<identifier label='name'>str</identifier>
						<identikey-type>
							<identikey-category>strict</identikey-category>
							<nullable-type>
								<identifier label='interface'>String</identifier>
								<boolean label='nullable'>false</boolean>
							</nullable-type>
							<boolean label='constant'>true</boolean>
						</identikey-type>
						<boolean label='breed'>false</boolean>
						<call label='value'>
							<extract-member label='value'>
								<string label='source'>&#x1FFF0; Hello,</string>
								<identifier label='member-name'>concat</identifier>
							</extract-member>
							<argument>
								<string label='value'> World &#x1FFF1;</string>
							</argument>
						</call>
					</declare-assign>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<identifier label='value'>str</identifier>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<extract-member label='value'>
								<identifier label='source'>str</identifier>
								<identifier label='member-name'>length</identifier>
							</extract-member>
						</argument>
					</call>
					<for-range label='member'>
						<identifier label='name'>x</identifier>
						<integer label='start'>1</integer>
						<integer label='limit'>20</integer>
						<boolean label='inclusive'>false</boolean>
						<block label='action'>
							<call label='member'>
								<identifier label='value'>println</identifier>
								<argument>
									<call label='value'>
										<extract-member label='value'>
											<identifier label='source'>x</identifier>
											<identifier label='member-name'>add</identifier>
										</extract-member>
										<argument>
											<integer label='value'>10000</integer>
										</argument>
									</call>
								</argument>
							</call>
						</block>
					</for-range>
				</block>
			</function>
		</declare-first>

		<!--
		function testNonProducers() {
		}
		-->
		<declare-first>
			<identifier label='name'>testNonProducers</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<block label='body'>
				</block>
			</function>
		</declare-first>
		
		<!--
		function testSometimesProducers() {
		}
		-->
		<declare-first>
			<identifier label='name'>testSometimesProducers</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<block label='body'>
				</block>
			</function>
		</declare-first>
		
		<!--
		function testAlwaysProducers() {
			header("testBooleanLogic()")
			testBooleanLogic()

			header("active-interface")
			println( activeInterface(true) == Bool )
			
			//header("array")
			//println( array Int { 1, 2, 3, 4 } )
			
			header("function")
			println( (function(){ return "some stuff" })() )
			
			header("identifier")
			println( true )
			
			header("rational")
			println( 123.456 )
			
			header("string")
			println( "This is some text." )
		}
		-->
		<declare-first>
			<identifier label='name'>testAlwaysProducers</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<block label='body'>
					
					<!-- testBooleanLogic() -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>testBooleanLogic()</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>testBooleanLogic</identifier>
					</call>
					
					<!-- array - -> xxx generic interface implementations needed
					<call label='member'>
						<identifier label='value'>header</identifier>
						<string label='argument'>array</string>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<array label='argument'>
							<integer label='element'>1</integer>
						</array>
					</call>
					-->
					
					<!-- cast -->
					<!-- chain -->
					<!-- class -->
					<!-- comprehension -->
					<!-- copy -->
					<!-- convert (should make println easier to implement, untill Stringable and other toWhatever interfaces are automatically inherited) -->
					<!-- dictionary -->
					<!-- enum -->
					
					<!-- function -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>function</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<call label='value'>
								<function label='value'>
									<string label='body'>some stuff</string>
								</function>
							</call>
						</argument>
					</call>

					<!-- function-interface -->
					<!-- generator -->
					<!-- generic-class -->
					<!-- generic-function -->
					<!-- generic-interface -->
					<!-- extract-member -->

					<!-- identifier -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>identifier</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<identifier label='value'>true</identifier>
						</argument>
					</call>
					
					<!-- instantiate-generic-class -->
					<!-- instantiate-generic-function -->
					<!-- instantiate-generic-interface -->
					<!-- implements -->
					
					<!-- integer -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>integer</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<integer label='value'>9000</integer>
						</argument>
					</call>
					
					<!-- interface -->
					<!-- namespaced-identikey -->
					
					<!-- rational -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>rational</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<rational label='value'>123.456</rational>
						</argument>
					</call>
					
					<!-- set-property -->
					
					<!-- string -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>string</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<string label='value'>This is some text.</string>
						</argument>
					</call>
				</block>
			</function>
		</declare-first>
		
		<!--
		function testBooleanLogic() {
			decl t = true
			decl f = false
		
			//for (n)and and (n)or: shortcut, then not shortcut

			header("and")
			println( f and t )
			println( t and t )

			header("nand")
			println( f nand t )
			println( t nand t )

			header("or")
			println( t or f )
			println( f or f )

			header("nor")
			println( t nor f )
			println( f nor f )
			
			header("xor")
			println( t xor f )
			println( t xor t )
			
			header("xnor")
			println( t xnor f )
			println( t xnor t )
		}
		-->
		<declare-first>
			<identifier label='name'>testBooleanLogic</identifier>
			<identikey-type>
				<identikey-category>function</identikey-category>
				<nullable-type>
					<boolean label='nullable'>false</boolean>
				</nullable-type>
				<boolean label='constant'>true</boolean>
			</identikey-type>
			<boolean label='breed'>false</boolean>
			<function label='value'>
				<block label='body'>
					<!-- decl t = true -->
					<declare-assign label='member'>
						<identikey-type>
							<identikey-category>automatic</identikey-category>
							<nullable-type>
								<boolean label='nullable'>false</boolean>
							</nullable-type>
							<boolean label='constant'>true</boolean>
						</identikey-type>
						<identifier label='name'>t</identifier>
						<boolean label='breed'>false</boolean>
						<identifier label='value'>true</identifier>
					</declare-assign>
					
					<!-- decl f = false -->
					<declare-assign label='member'>
						<identikey-type>
							<identikey-category>automatic</identikey-category>
							<nullable-type>
								<boolean label='nullable'>false</boolean>
							</nullable-type>
							<boolean label='constant'>true</boolean>
						</identikey-type>
						<identifier label='name'>f</identifier>
						<boolean label='breed'>false</boolean>
						<identifier label='value'>false</identifier>
					</declare-assign>
					
					<!-- and -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>and</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<and label='value'>
								<identifier label='first'>f</identifier>
								<identifier label='second'>t</identifier>
							</and>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<and label='value'>
								<identifier label='first'>t</identifier>
								<identifier label='second'>t</identifier>
							</and>
						</argument>
					</call>
					
					<!-- nand -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>nand</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<nand label='value'>
								<identifier label='first'>f</identifier>
								<identifier label='second'>t</identifier>
							</nand>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<nand label='value'>
								<identifier label='first'>t</identifier>
								<identifier label='second'>t</identifier>
							</nand>
						</argument>
					</call>
					
					<!-- or -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>or</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<or label='value'>
								<identifier label='first'>f</identifier>
								<identifier label='second'>t</identifier>
							</or>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<or label='value'>
								<identifier label='first'>f</identifier>
								<identifier label='second'>f</identifier>
							</or>
						</argument>
					</call>
					
					<!-- nor -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>nor</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<nor label='value'>
								<identifier label='first'>f</identifier>
								<identifier label='second'>t</identifier>
							</nor>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<nor label='value'>
								<identifier label='first'>f</identifier>
								<identifier label='second'>f</identifier>
							</nor>
						</argument>
					</call>
					
					<!-- xor -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>xor</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<xor label='value'>
								<identifier label='first'>t</identifier>
								<identifier label='second'>f</identifier>
							</xor>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<xor label='value'>
								<identifier label='first'>t</identifier>
								<identifier label='second'>t</identifier>
							</xor>
						</argument>
					</call>
					
					<!-- xnor -->
					<call label='member'>
						<identifier label='value'>header</identifier>
						<argument>
							<string label='value'>xnor</string>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<xnor label='value'>
								<identifier label='first'>t</identifier>
								<identifier label='second'>f</identifier>
							</xnor>
						</argument>
					</call>
					<call label='member'>
						<identifier label='value'>println</identifier>
						<argument>
							<xnor label='value'>
								<identifier label='first'>t</identifier>
								<identifier label='second'>t</identifier>
							</xnor>
						</argument>
					</call>
				</block>
			</function>
		</declare-first>
			
	</inline-plane>
	
</bundle>