/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using Dextr.Sablecc.node;

namespace Dextr.Sablecc.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseADocument(ADocument node);
    void CaseAExpose(AExpose node);
    void CaseAADocumentinside(AADocumentinside node);
    void CaseABDocumentinside(ABDocumentinside node);
    void CaseACDocumentinside(ACDocumentinside node);
    void CaseAPlanereference(APlanereference node);
    void CaseAADeclarefirstlist(AADeclarefirstlist node);
    void CaseABDeclarefirstlist(ABDeclarefirstlist node);
    void CaseAAAdd(AAAdd node);
    void CaseABAdd(ABAdd node);
    void CaseACAdd(ACAdd node);
    void CaseAAArgumentlist(AAArgumentlist node);
    void CaseABArgumentlist(ABArgumentlist node);
    void CaseAABlock(AABlock node);
    void CaseABBlock(ABBlock node);
    void CaseACBlock(ACBlock node);
    void CaseABraceblock(ABraceblock node);
    void CaseABraceblockinside(ABraceblockinside node);
    void CaseATabblock(ATabblock node);
    void CaseAATabblockinside(AATabblockinside node);
    void CaseABTabblockinside(ABTabblockinside node);
    void CaseABracetabblock(ABracetabblock node);
    void CaseABooleanlogic(ABooleanlogic node);
    void CaseAABooleanfunction(AABooleanfunction node);
    void CaseABBooleanfunction(ABBooleanfunction node);
    void CaseACBooleanfunction(ACBooleanfunction node);
    void CaseADBooleanfunction(ADBooleanfunction node);
    void CaseAEBooleanfunction(AEBooleanfunction node);
    void CaseAFBooleanfunction(AFBooleanfunction node);
    void CaseACall(ACall node);
    void CaseADeclareassign(ADeclareassign node);
    void CaseADeclareempty(ADeclareempty node);
    void CaseAADeclarefirst(AADeclarefirst node);
    void CaseABDeclarefirst(ABDeclarefirst node);
    void CaseADeclarefirstnormal(ADeclarefirstnormal node);
    void CaseAAExpression(AAExpression node);
    void CaseABExpression(ABExpression node);
    void CaseACExpression(ACExpression node);
    void CaseADExpression(ADExpression node);
    void CaseAEExpression(AEExpression node);
    void CaseAFExpression(AFExpression node);
    void CaseAGExpression(AGExpression node);
    void CaseAHExpression(AHExpression node);
    void CaseAIExpression(AIExpression node);
    void CaseAExtractmember(AExtractmember node);
    void CaseAForrange(AForrange node);
    void CaseAFunction(AFunction node);
    void CaseAAType(AAType node);
    void CaseABType(ABType node);
    void CaseAFunctiondeclaration(AFunctiondeclaration node);
    void CaseAIfelse(AIfelse node);
    void CaseAAIfexpr(AAIfexpr node);
    void CaseABIfexpr(ABIfexpr node);
    void CaseAIf(AIf node);
    void CaseAAElif(AAElif node);
    void CaseABElif(ABElif node);
    void CaseAElse(AElse node);
    void CaseAAMult(AAMult node);
    void CaseABMult(ABMult node);
    void CaseACMult(ACMult node);
    void CaseAParameter(AParameter node);
    void CaseAAParameterlist(AAParameterlist node);
    void CaseABParameterlist(ABParameterlist node);
    void CaseAParenthetical(AParenthetical node);
    void CaseAAPrimary(AAPrimary node);
    void CaseABPrimary(ABPrimary node);
    void CaseACPrimary(ACPrimary node);
    void CaseADPrimary(ADPrimary node);
    void CaseAEPrimary(AEPrimary node);
    void CaseAASimple(AASimple node);
    void CaseABSimple(ABSimple node);
    void CaseACSimple(ACSimple node);
    void CaseADSimple(ADSimple node);
    void CaseATest(ATest node);
    void CaseAAComparisonfunction(AAComparisonfunction node);
    void CaseABComparisonfunction(ABComparisonfunction node);
    void CaseACComparisonfunction(ACComparisonfunction node);
    void CaseADComparisonfunction(ADComparisonfunction node);
    void CaseAEComparisonfunction(AEComparisonfunction node);
    void CaseAFComparisonfunction(AFComparisonfunction node);

    void CaseTOperatorMinus(TOperatorMinus node);
    void CaseTOperatorPlus(TOperatorPlus node);
    void CaseTOperatorClosingParenthesis(TOperatorClosingParenthesis node);
    void CaseTKeywordLt(TKeywordLt node);
    void CaseTKeywordFor(TKeywordFor node);
    void CaseTKeywordOr(TKeywordOr node);
    void CaseTKeywordDyn(TKeywordDyn node);
    void CaseTOperatorTimes(TOperatorTimes node);
    void CaseTKeywordDne(TKeywordDne node);
    void CaseTKeywordNand(TKeywordNand node);
    void CaseTKeywordGte(TKeywordGte node);
    void CaseTKeywordPlane(TKeywordPlane node);
    void CaseTOperatorClosingBrace(TOperatorClosingBrace node);
    void CaseTKeywordFrom(TKeywordFrom node);
    void CaseTKeywordElse(TKeywordElse node);
    void CaseTKeywordElif(TKeywordElif node);
    void CaseTOperatorDivide(TOperatorDivide node);
    void CaseTKeywordDeclfirst(TKeywordDeclfirst node);
    void CaseTKeywordGt(TKeywordGt node);
    void CaseTOperatorOpeningBrace(TOperatorOpeningBrace node);
    void CaseTKeywordIf(TKeywordIf node);
    void CaseTOperatorOpeningParenthesis(TOperatorOpeningParenthesis node);
    void CaseTKeywordVoid(TKeywordVoid node);
    void CaseTKeywordAnd(TKeywordAnd node);
    void CaseTKeywordXnor(TKeywordXnor node);
    void CaseTKeywordXor(TKeywordXor node);
    void CaseTKeywordNor(TKeywordNor node);
    void CaseTKeywordEql(TKeywordEql node);
    void CaseTKeywordTo(TKeywordTo node);
    void CaseTOperatorAssign(TOperatorAssign node);
    void CaseTKeywordDecl(TKeywordDecl node);
    void CaseTKeywordFunc(TKeywordFunc node);
    void CaseTKeywordLte(TKeywordLte node);
    void CaseTKeywordExpose(TKeywordExpose node);
    void CaseTOperatorExtractMember(TOperatorExtractMember node);
    void CaseTOperatorComma(TOperatorComma node);
    void CaseTNewline(TNewline node);
    void CaseTIdentifier(TIdentifier node);
    void CaseTInteger(TInteger node);
    void CaseTRational(TRational node);
    void CaseTString(TString node);
    void CaseTTab(TTab node);
    void CaseTSpace(TSpace node);
    void CaseTLineComment(TLineComment node);
    void CaseTMultilineComment(TMultilineComment node);
    void CaseTIndentOpen(TIndentOpen node);
    void CaseTIndentClose(TIndentClose node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseADocument(ADocument node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpose(AExpose node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAADocumentinside(AADocumentinside node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABDocumentinside(ABDocumentinside node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACDocumentinside(ACDocumentinside node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlanereference(APlanereference node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAADeclarefirstlist(AADeclarefirstlist node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABDeclarefirstlist(ABDeclarefirstlist node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAAdd(AAAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABAdd(ABAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACAdd(ACAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAArgumentlist(AAArgumentlist node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABArgumentlist(ABArgumentlist node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAABlock(AABlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABBlock(ABBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACBlock(ACBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABraceblock(ABraceblock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABraceblockinside(ABraceblockinside node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATabblock(ATabblock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAATabblockinside(AATabblockinside node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABTabblockinside(ABTabblockinside node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABracetabblock(ABracetabblock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanlogic(ABooleanlogic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAABooleanfunction(AABooleanfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABBooleanfunction(ABBooleanfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACBooleanfunction(ACBooleanfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADBooleanfunction(ADBooleanfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEBooleanfunction(AEBooleanfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFBooleanfunction(AFBooleanfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACall(ACall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareassign(ADeclareassign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareempty(ADeclareempty node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAADeclarefirst(AADeclarefirst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABDeclarefirst(ABDeclarefirst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarefirstnormal(ADeclarefirstnormal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAExpression(AAExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABExpression(ABExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACExpression(ACExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADExpression(ADExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEExpression(AEExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFExpression(AFExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGExpression(AGExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHExpression(AHExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIExpression(AIExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExtractmember(AExtractmember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAForrange(AForrange node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunction(AFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAType(AAType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABType(ABType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctiondeclaration(AFunctiondeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfelse(AIfelse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAIfexpr(AAIfexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABIfexpr(ABIfexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIf(AIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAElif(AAElif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABElif(ABElif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElse(AElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAMult(AAMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABMult(ABMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACMult(ACMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameter(AParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAParameterlist(AAParameterlist node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABParameterlist(ABParameterlist node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthetical(AParenthetical node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAPrimary(AAPrimary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABPrimary(ABPrimary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACPrimary(ACPrimary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADPrimary(ADPrimary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEPrimary(AEPrimary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAASimple(AASimple node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABSimple(ABSimple node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACSimple(ACSimple node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADSimple(ADSimple node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATest(ATest node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAComparisonfunction(AAComparisonfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABComparisonfunction(ABComparisonfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACComparisonfunction(ACComparisonfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADComparisonfunction(ADComparisonfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEComparisonfunction(AEComparisonfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFComparisonfunction(AFComparisonfunction node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTOperatorMinus(TOperatorMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorPlus(TOperatorPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorClosingParenthesis(TOperatorClosingParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordLt(TKeywordLt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordFor(TKeywordFor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordOr(TKeywordOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordDyn(TKeywordDyn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorTimes(TOperatorTimes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordDne(TKeywordDne node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordNand(TKeywordNand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordGte(TKeywordGte node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordPlane(TKeywordPlane node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorClosingBrace(TOperatorClosingBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordFrom(TKeywordFrom node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordElse(TKeywordElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordElif(TKeywordElif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorDivide(TOperatorDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordDeclfirst(TKeywordDeclfirst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordGt(TKeywordGt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorOpeningBrace(TOperatorOpeningBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordIf(TKeywordIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorOpeningParenthesis(TOperatorOpeningParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordVoid(TKeywordVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordAnd(TKeywordAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordXnor(TKeywordXnor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordXor(TKeywordXor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordNor(TKeywordNor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordEql(TKeywordEql node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordTo(TKeywordTo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorAssign(TOperatorAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordDecl(TKeywordDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordFunc(TKeywordFunc node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordLte(TKeywordLte node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordExpose(TKeywordExpose node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorExtractMember(TOperatorExtractMember node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOperatorComma(TOperatorComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNewline(TNewline node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIdentifier(TIdentifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRational(TRational node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTab(TTab node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSpace(TSpace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLineComment(TLineComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultilineComment(TMultilineComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIndentOpen(TIndentOpen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIndentClose(TIndentClose node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPDocument().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InADocument(ADocument node)
    {
        DefaultIn(node);
    }

    public virtual void OutADocument(ADocument node)
    {
        DefaultOut(node);
    }

    public override void CaseADocument(ADocument node)
    {
        InADocument(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetExpose().Count];
            node.GetExpose().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExpose) temp[i]).Apply(this);
            }
        }
        if(node.GetDocumentinside() != null)
        {
            node.GetDocumentinside().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        OutADocument(node);
    }
    public virtual void InAExpose(AExpose node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpose(AExpose node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpose(AExpose node)
    {
        InAExpose(node);
        if(node.GetKeywordExpose() != null)
        {
            node.GetKeywordExpose().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        OutAExpose(node);
    }
    public virtual void InAADocumentinside(AADocumentinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutAADocumentinside(AADocumentinside node)
    {
        DefaultOut(node);
    }

    public override void CaseAADocumentinside(AADocumentinside node)
    {
        InAADocumentinside(node);
        {
            Object[] temp = new Object[node.GetPlanereference().Count];
            node.GetPlanereference().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PPlanereference) temp[i]).Apply(this);
            }
        }
        OutAADocumentinside(node);
    }
    public virtual void InABDocumentinside(ABDocumentinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutABDocumentinside(ABDocumentinside node)
    {
        DefaultOut(node);
    }

    public override void CaseABDocumentinside(ABDocumentinside node)
    {
        InABDocumentinside(node);
        if(node.GetDeclarefirstlist() != null)
        {
            node.GetDeclarefirstlist().Apply(this);
        }
        OutABDocumentinside(node);
    }
    public virtual void InACDocumentinside(ACDocumentinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutACDocumentinside(ACDocumentinside node)
    {
        DefaultOut(node);
    }

    public override void CaseACDocumentinside(ACDocumentinside node)
    {
        InACDocumentinside(node);
        {
            Object[] temp = new Object[node.GetPlanereference().Count];
            node.GetPlanereference().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PPlanereference) temp[i]).Apply(this);
            }
        }
        if(node.GetDeclarefirstlist() != null)
        {
            node.GetDeclarefirstlist().Apply(this);
        }
        OutACDocumentinside(node);
    }
    public virtual void InAPlanereference(APlanereference node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlanereference(APlanereference node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlanereference(APlanereference node)
    {
        InAPlanereference(node);
        if(node.GetKeywordPlane() != null)
        {
            node.GetKeywordPlane().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        OutAPlanereference(node);
    }
    public virtual void InAADeclarefirstlist(AADeclarefirstlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutAADeclarefirstlist(AADeclarefirstlist node)
    {
        DefaultOut(node);
    }

    public override void CaseAADeclarefirstlist(AADeclarefirstlist node)
    {
        InAADeclarefirstlist(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutAADeclarefirstlist(node);
    }
    public virtual void InABDeclarefirstlist(ABDeclarefirstlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutABDeclarefirstlist(ABDeclarefirstlist node)
    {
        DefaultOut(node);
    }

    public override void CaseABDeclarefirstlist(ABDeclarefirstlist node)
    {
        InABDeclarefirstlist(node);
        if(node.GetDeclarefirstlist() != null)
        {
            node.GetDeclarefirstlist().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutABDeclarefirstlist(node);
    }
    public virtual void InAAAdd(AAAdd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAAdd(AAAdd node)
    {
        DefaultOut(node);
    }

    public override void CaseAAAdd(AAAdd node)
    {
        InAAAdd(node);
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        OutAAAdd(node);
    }
    public virtual void InABAdd(ABAdd node)
    {
        DefaultIn(node);
    }

    public virtual void OutABAdd(ABAdd node)
    {
        DefaultOut(node);
    }

    public override void CaseABAdd(ABAdd node)
    {
        InABAdd(node);
        if(node.GetAdd() != null)
        {
            node.GetAdd().Apply(this);
        }
        if(node.GetOperatorPlus() != null)
        {
            node.GetOperatorPlus().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        OutABAdd(node);
    }
    public virtual void InACAdd(ACAdd node)
    {
        DefaultIn(node);
    }

    public virtual void OutACAdd(ACAdd node)
    {
        DefaultOut(node);
    }

    public override void CaseACAdd(ACAdd node)
    {
        InACAdd(node);
        if(node.GetAdd() != null)
        {
            node.GetAdd().Apply(this);
        }
        if(node.GetOperatorMinus() != null)
        {
            node.GetOperatorMinus().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        OutACAdd(node);
    }
    public virtual void InAAArgumentlist(AAArgumentlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAArgumentlist(AAArgumentlist node)
    {
        DefaultOut(node);
    }

    public override void CaseAAArgumentlist(AAArgumentlist node)
    {
        InAAArgumentlist(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAArgumentlist(node);
    }
    public virtual void InABArgumentlist(ABArgumentlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutABArgumentlist(ABArgumentlist node)
    {
        DefaultOut(node);
    }

    public override void CaseABArgumentlist(ABArgumentlist node)
    {
        InABArgumentlist(node);
        if(node.GetArgumentlist() != null)
        {
            node.GetArgumentlist().Apply(this);
        }
        if(node.GetOperatorComma() != null)
        {
            node.GetOperatorComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutABArgumentlist(node);
    }
    public virtual void InAABlock(AABlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAABlock(AABlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAABlock(AABlock node)
    {
        InAABlock(node);
        if(node.GetBraceblock() != null)
        {
            node.GetBraceblock().Apply(this);
        }
        OutAABlock(node);
    }
    public virtual void InABBlock(ABBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABBlock(ABBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseABBlock(ABBlock node)
    {
        InABBlock(node);
        if(node.GetTabblock() != null)
        {
            node.GetTabblock().Apply(this);
        }
        OutABBlock(node);
    }
    public virtual void InACBlock(ACBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutACBlock(ACBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseACBlock(ACBlock node)
    {
        InACBlock(node);
        if(node.GetBracetabblock() != null)
        {
            node.GetBracetabblock().Apply(this);
        }
        OutACBlock(node);
    }
    public virtual void InABraceblock(ABraceblock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABraceblock(ABraceblock node)
    {
        DefaultOut(node);
    }

    public override void CaseABraceblock(ABraceblock node)
    {
        InABraceblock(node);
        if(node.GetOperatorOpeningBrace() != null)
        {
            node.GetOperatorOpeningBrace().Apply(this);
        }
        if(node.GetBraceblockinside() != null)
        {
            node.GetBraceblockinside().Apply(this);
        }
        if(node.GetOperatorClosingBrace() != null)
        {
            node.GetOperatorClosingBrace().Apply(this);
        }
        OutABraceblock(node);
    }
    public virtual void InABraceblockinside(ABraceblockinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutABraceblockinside(ABraceblockinside node)
    {
        DefaultOut(node);
    }

    public override void CaseABraceblockinside(ABraceblockinside node)
    {
        InABraceblockinside(node);
        if(node.GetPrimary() != null)
        {
            node.GetPrimary().Apply(this);
        }
        OutABraceblockinside(node);
    }
    public virtual void InATabblock(ATabblock node)
    {
        DefaultIn(node);
    }

    public virtual void OutATabblock(ATabblock node)
    {
        DefaultOut(node);
    }

    public override void CaseATabblock(ATabblock node)
    {
        InATabblock(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetIndentOpen() != null)
        {
            node.GetIndentOpen().Apply(this);
        }
        if(node.GetTabblockinside() != null)
        {
            node.GetTabblockinside().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetIndentClose() != null)
        {
            node.GetIndentClose().Apply(this);
        }
        OutATabblock(node);
    }
    public virtual void InAATabblockinside(AATabblockinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutAATabblockinside(AATabblockinside node)
    {
        DefaultOut(node);
    }

    public override void CaseAATabblockinside(AATabblockinside node)
    {
        InAATabblockinside(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAATabblockinside(node);
    }
    public virtual void InABTabblockinside(ABTabblockinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutABTabblockinside(ABTabblockinside node)
    {
        DefaultOut(node);
    }

    public override void CaseABTabblockinside(ABTabblockinside node)
    {
        InABTabblockinside(node);
        if(node.GetTabblockinside() != null)
        {
            node.GetTabblockinside().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutABTabblockinside(node);
    }
    public virtual void InABracetabblock(ABracetabblock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABracetabblock(ABracetabblock node)
    {
        DefaultOut(node);
    }

    public override void CaseABracetabblock(ABracetabblock node)
    {
        InABracetabblock(node);
        if(node.GetOperatorOpeningBrace() != null)
        {
            node.GetOperatorOpeningBrace().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetTabblock() != null)
        {
            node.GetTabblock().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetOperatorClosingBrace() != null)
        {
            node.GetOperatorClosingBrace().Apply(this);
        }
        OutABracetabblock(node);
    }
    public virtual void InABooleanlogic(ABooleanlogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanlogic(ABooleanlogic node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanlogic(ABooleanlogic node)
    {
        InABooleanlogic(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetBooleanfunction() != null)
        {
            node.GetBooleanfunction().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        OutABooleanlogic(node);
    }
    public virtual void InAABooleanfunction(AABooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAABooleanfunction(AABooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAABooleanfunction(AABooleanfunction node)
    {
        InAABooleanfunction(node);
        if(node.GetKeywordAnd() != null)
        {
            node.GetKeywordAnd().Apply(this);
        }
        OutAABooleanfunction(node);
    }
    public virtual void InABBooleanfunction(ABBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutABBooleanfunction(ABBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseABBooleanfunction(ABBooleanfunction node)
    {
        InABBooleanfunction(node);
        if(node.GetKeywordNand() != null)
        {
            node.GetKeywordNand().Apply(this);
        }
        OutABBooleanfunction(node);
    }
    public virtual void InACBooleanfunction(ACBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutACBooleanfunction(ACBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseACBooleanfunction(ACBooleanfunction node)
    {
        InACBooleanfunction(node);
        if(node.GetKeywordOr() != null)
        {
            node.GetKeywordOr().Apply(this);
        }
        OutACBooleanfunction(node);
    }
    public virtual void InADBooleanfunction(ADBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADBooleanfunction(ADBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADBooleanfunction(ADBooleanfunction node)
    {
        InADBooleanfunction(node);
        if(node.GetKeywordNor() != null)
        {
            node.GetKeywordNor().Apply(this);
        }
        OutADBooleanfunction(node);
    }
    public virtual void InAEBooleanfunction(AEBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEBooleanfunction(AEBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAEBooleanfunction(AEBooleanfunction node)
    {
        InAEBooleanfunction(node);
        if(node.GetKeywordXor() != null)
        {
            node.GetKeywordXor().Apply(this);
        }
        OutAEBooleanfunction(node);
    }
    public virtual void InAFBooleanfunction(AFBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFBooleanfunction(AFBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFBooleanfunction(AFBooleanfunction node)
    {
        InAFBooleanfunction(node);
        if(node.GetKeywordXnor() != null)
        {
            node.GetKeywordXnor().Apply(this);
        }
        OutAFBooleanfunction(node);
    }
    public virtual void InACall(ACall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACall(ACall node)
    {
        DefaultOut(node);
    }

    public override void CaseACall(ACall node)
    {
        InACall(node);
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetArgumentlist() != null)
        {
            node.GetArgumentlist().Apply(this);
        }
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        OutACall(node);
    }
    public virtual void InADeclareassign(ADeclareassign node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareassign(ADeclareassign node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareassign(ADeclareassign node)
    {
        InADeclareassign(node);
        if(node.GetKeywordDecl() != null)
        {
            node.GetKeywordDecl().Apply(this);
        }
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetOperatorAssign() != null)
        {
            node.GetOperatorAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutADeclareassign(node);
    }
    public virtual void InADeclareempty(ADeclareempty node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareempty(ADeclareempty node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareempty(ADeclareempty node)
    {
        InADeclareempty(node);
        if(node.GetKeywordDecl() != null)
        {
            node.GetKeywordDecl().Apply(this);
        }
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutADeclareempty(node);
    }
    public virtual void InAADeclarefirst(AADeclarefirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutAADeclarefirst(AADeclarefirst node)
    {
        DefaultOut(node);
    }

    public override void CaseAADeclarefirst(AADeclarefirst node)
    {
        InAADeclarefirst(node);
        if(node.GetDeclarefirstnormal() != null)
        {
            node.GetDeclarefirstnormal().Apply(this);
        }
        OutAADeclarefirst(node);
    }
    public virtual void InABDeclarefirst(ABDeclarefirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutABDeclarefirst(ABDeclarefirst node)
    {
        DefaultOut(node);
    }

    public override void CaseABDeclarefirst(ABDeclarefirst node)
    {
        InABDeclarefirst(node);
        if(node.GetFunctiondeclaration() != null)
        {
            node.GetFunctiondeclaration().Apply(this);
        }
        OutABDeclarefirst(node);
    }
    public virtual void InADeclarefirstnormal(ADeclarefirstnormal node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarefirstnormal(ADeclarefirstnormal node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarefirstnormal(ADeclarefirstnormal node)
    {
        InADeclarefirstnormal(node);
        if(node.GetKeywordDeclfirst() != null)
        {
            node.GetKeywordDeclfirst().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetOperatorAssign() != null)
        {
            node.GetOperatorAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutADeclarefirstnormal(node);
    }
    public virtual void InAAExpression(AAExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAExpression(AAExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAExpression(AAExpression node)
    {
        InAAExpression(node);
        if(node.GetAdd() != null)
        {
            node.GetAdd().Apply(this);
        }
        OutAAExpression(node);
    }
    public virtual void InABExpression(ABExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABExpression(ABExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABExpression(ABExpression node)
    {
        InABExpression(node);
        if(node.GetBooleanlogic() != null)
        {
            node.GetBooleanlogic().Apply(this);
        }
        OutABExpression(node);
    }
    public virtual void InACExpression(ACExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACExpression(ACExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACExpression(ACExpression node)
    {
        InACExpression(node);
        if(node.GetDeclareassign() != null)
        {
            node.GetDeclareassign().Apply(this);
        }
        OutACExpression(node);
    }
    public virtual void InADExpression(ADExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADExpression(ADExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADExpression(ADExpression node)
    {
        InADExpression(node);
        if(node.GetDeclareempty() != null)
        {
            node.GetDeclareempty().Apply(this);
        }
        OutADExpression(node);
    }
    public virtual void InAEExpression(AEExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEExpression(AEExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAEExpression(AEExpression node)
    {
        InAEExpression(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutAEExpression(node);
    }
    public virtual void InAFExpression(AFExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFExpression(AFExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFExpression(AFExpression node)
    {
        InAFExpression(node);
        if(node.GetForrange() != null)
        {
            node.GetForrange().Apply(this);
        }
        OutAFExpression(node);
    }
    public virtual void InAGExpression(AGExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGExpression(AGExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGExpression(AGExpression node)
    {
        InAGExpression(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAGExpression(node);
    }
    public virtual void InAHExpression(AHExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHExpression(AHExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAHExpression(AHExpression node)
    {
        InAHExpression(node);
        if(node.GetIfelse() != null)
        {
            node.GetIfelse().Apply(this);
        }
        OutAHExpression(node);
    }
    public virtual void InAIExpression(AIExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIExpression(AIExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIExpression(AIExpression node)
    {
        InAIExpression(node);
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        OutAIExpression(node);
    }
    public virtual void InAExtractmember(AExtractmember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExtractmember(AExtractmember node)
    {
        DefaultOut(node);
    }

    public override void CaseAExtractmember(AExtractmember node)
    {
        InAExtractmember(node);
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        if(node.GetOperatorExtractMember() != null)
        {
            node.GetOperatorExtractMember().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAExtractmember(node);
    }
    public virtual void InAForrange(AForrange node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForrange(AForrange node)
    {
        DefaultOut(node);
    }

    public override void CaseAForrange(AForrange node)
    {
        InAForrange(node);
        if(node.GetKeywordFor() != null)
        {
            node.GetKeywordFor().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetKeywordFrom() != null)
        {
            node.GetKeywordFrom().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetKeywordTo() != null)
        {
            node.GetKeywordTo().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAForrange(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetKeywordFunc() != null)
        {
            node.GetKeywordFunc().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAAType(AAType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAType(AAType node)
    {
        DefaultOut(node);
    }

    public override void CaseAAType(AAType node)
    {
        InAAType(node);
        if(node.GetKeywordDyn() != null)
        {
            node.GetKeywordDyn().Apply(this);
        }
        OutAAType(node);
    }
    public virtual void InABType(ABType node)
    {
        DefaultIn(node);
    }

    public virtual void OutABType(ABType node)
    {
        DefaultOut(node);
    }

    public override void CaseABType(ABType node)
    {
        InABType(node);
        if(node.GetKeywordVoid() != null)
        {
            node.GetKeywordVoid().Apply(this);
        }
        OutABType(node);
    }
    public virtual void InAFunctiondeclaration(AFunctiondeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctiondeclaration(AFunctiondeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctiondeclaration(AFunctiondeclaration node)
    {
        InAFunctiondeclaration(node);
        if(node.GetKeywordFunc() != null)
        {
            node.GetKeywordFunc().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetParameterlist() != null)
        {
            node.GetParameterlist().Apply(this);
        }
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAFunctiondeclaration(node);
    }
    public virtual void InAIfelse(AIfelse node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelse(AIfelse node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelse(AIfelse node)
    {
        InAIfelse(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetElif() != null)
        {
            node.GetElif().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAIfelse(node);
    }
    public virtual void InAAIfexpr(AAIfexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAIfexpr(AAIfexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAAIfexpr(AAIfexpr node)
    {
        InAAIfexpr(node);
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        OutAAIfexpr(node);
    }
    public virtual void InABIfexpr(ABIfexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutABIfexpr(ABIfexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseABIfexpr(ABIfexpr node)
    {
        InABIfexpr(node);
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        OutABIfexpr(node);
    }
    public virtual void InAIf(AIf node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIf(AIf node)
    {
        DefaultOut(node);
    }

    public override void CaseAIf(AIf node)
    {
        InAIf(node);
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        if(node.GetIfexpr() != null)
        {
            node.GetIfexpr().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAIf(node);
    }
    public virtual void InAAElif(AAElif node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAElif(AAElif node)
    {
        DefaultOut(node);
    }

    public override void CaseAAElif(AAElif node)
    {
        InAAElif(node);
        if(node.GetKeywordElif() != null)
        {
            node.GetKeywordElif().Apply(this);
        }
        if(node.GetIfexpr() != null)
        {
            node.GetIfexpr().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAAElif(node);
    }
    public virtual void InABElif(ABElif node)
    {
        DefaultIn(node);
    }

    public virtual void OutABElif(ABElif node)
    {
        DefaultOut(node);
    }

    public override void CaseABElif(ABElif node)
    {
        InABElif(node);
        if(node.GetElif() != null)
        {
            node.GetElif().Apply(this);
        }
        if(node.GetKeywordElif() != null)
        {
            node.GetKeywordElif().Apply(this);
        }
        if(node.GetIfexpr() != null)
        {
            node.GetIfexpr().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutABElif(node);
    }
    public virtual void InAElse(AElse node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElse(AElse node)
    {
        DefaultOut(node);
    }

    public override void CaseAElse(AElse node)
    {
        InAElse(node);
        if(node.GetKeywordElse() != null)
        {
            node.GetKeywordElse().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAElse(node);
    }
    public virtual void InAAMult(AAMult node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAMult(AAMult node)
    {
        DefaultOut(node);
    }

    public override void CaseAAMult(AAMult node)
    {
        InAAMult(node);
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        OutAAMult(node);
    }
    public virtual void InABMult(ABMult node)
    {
        DefaultIn(node);
    }

    public virtual void OutABMult(ABMult node)
    {
        DefaultOut(node);
    }

    public override void CaseABMult(ABMult node)
    {
        InABMult(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetOperatorTimes() != null)
        {
            node.GetOperatorTimes().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        OutABMult(node);
    }
    public virtual void InACMult(ACMult node)
    {
        DefaultIn(node);
    }

    public virtual void OutACMult(ACMult node)
    {
        DefaultOut(node);
    }

    public override void CaseACMult(ACMult node)
    {
        InACMult(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetOperatorDivide() != null)
        {
            node.GetOperatorDivide().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        OutACMult(node);
    }
    public virtual void InAParameter(AParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameter(AParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameter(AParameter node)
    {
        InAParameter(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAParameter(node);
    }
    public virtual void InAAParameterlist(AAParameterlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAParameterlist(AAParameterlist node)
    {
        DefaultOut(node);
    }

    public override void CaseAAParameterlist(AAParameterlist node)
    {
        InAAParameterlist(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAAParameterlist(node);
    }
    public virtual void InABParameterlist(ABParameterlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutABParameterlist(ABParameterlist node)
    {
        DefaultOut(node);
    }

    public override void CaseABParameterlist(ABParameterlist node)
    {
        InABParameterlist(node);
        if(node.GetParameterlist() != null)
        {
            node.GetParameterlist().Apply(this);
        }
        if(node.GetOperatorComma() != null)
        {
            node.GetOperatorComma().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutABParameterlist(node);
    }
    public virtual void InAParenthetical(AParenthetical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthetical(AParenthetical node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthetical(AParenthetical node)
    {
        InAParenthetical(node);
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        OutAParenthetical(node);
    }
    public virtual void InAAPrimary(AAPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAPrimary(AAPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseAAPrimary(AAPrimary node)
    {
        InAAPrimary(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAAPrimary(node);
    }
    public virtual void InABPrimary(ABPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutABPrimary(ABPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseABPrimary(ABPrimary node)
    {
        InABPrimary(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutABPrimary(node);
    }
    public virtual void InACPrimary(ACPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutACPrimary(ACPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseACPrimary(ACPrimary node)
    {
        InACPrimary(node);
        if(node.GetRational() != null)
        {
            node.GetRational().Apply(this);
        }
        OutACPrimary(node);
    }
    public virtual void InADPrimary(ADPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutADPrimary(ADPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseADPrimary(ADPrimary node)
    {
        InADPrimary(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutADPrimary(node);
    }
    public virtual void InAEPrimary(AEPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEPrimary(AEPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseAEPrimary(AEPrimary node)
    {
        InAEPrimary(node);
        if(node.GetParenthetical() != null)
        {
            node.GetParenthetical().Apply(this);
        }
        OutAEPrimary(node);
    }
    public virtual void InAASimple(AASimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutAASimple(AASimple node)
    {
        DefaultOut(node);
    }

    public override void CaseAASimple(AASimple node)
    {
        InAASimple(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAASimple(node);
    }
    public virtual void InABSimple(ABSimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutABSimple(ABSimple node)
    {
        DefaultOut(node);
    }

    public override void CaseABSimple(ABSimple node)
    {
        InABSimple(node);
        if(node.GetCall() != null)
        {
            node.GetCall().Apply(this);
        }
        OutABSimple(node);
    }
    public virtual void InACSimple(ACSimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutACSimple(ACSimple node)
    {
        DefaultOut(node);
    }

    public override void CaseACSimple(ACSimple node)
    {
        InACSimple(node);
        if(node.GetExtractmember() != null)
        {
            node.GetExtractmember().Apply(this);
        }
        OutACSimple(node);
    }
    public virtual void InADSimple(ADSimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutADSimple(ADSimple node)
    {
        DefaultOut(node);
    }

    public override void CaseADSimple(ADSimple node)
    {
        InADSimple(node);
        if(node.GetPrimary() != null)
        {
            node.GetPrimary().Apply(this);
        }
        OutADSimple(node);
    }
    public virtual void InATest(ATest node)
    {
        DefaultIn(node);
    }

    public virtual void OutATest(ATest node)
    {
        DefaultOut(node);
    }

    public override void CaseATest(ATest node)
    {
        InATest(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetComparisonfunction() != null)
        {
            node.GetComparisonfunction().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        OutATest(node);
    }
    public virtual void InAAComparisonfunction(AAComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAComparisonfunction(AAComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAAComparisonfunction(AAComparisonfunction node)
    {
        InAAComparisonfunction(node);
        if(node.GetKeywordLt() != null)
        {
            node.GetKeywordLt().Apply(this);
        }
        OutAAComparisonfunction(node);
    }
    public virtual void InABComparisonfunction(ABComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutABComparisonfunction(ABComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseABComparisonfunction(ABComparisonfunction node)
    {
        InABComparisonfunction(node);
        if(node.GetKeywordLte() != null)
        {
            node.GetKeywordLte().Apply(this);
        }
        OutABComparisonfunction(node);
    }
    public virtual void InACComparisonfunction(ACComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutACComparisonfunction(ACComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseACComparisonfunction(ACComparisonfunction node)
    {
        InACComparisonfunction(node);
        if(node.GetKeywordEql() != null)
        {
            node.GetKeywordEql().Apply(this);
        }
        OutACComparisonfunction(node);
    }
    public virtual void InADComparisonfunction(ADComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADComparisonfunction(ADComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADComparisonfunction(ADComparisonfunction node)
    {
        InADComparisonfunction(node);
        if(node.GetKeywordGte() != null)
        {
            node.GetKeywordGte().Apply(this);
        }
        OutADComparisonfunction(node);
    }
    public virtual void InAEComparisonfunction(AEComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEComparisonfunction(AEComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAEComparisonfunction(AEComparisonfunction node)
    {
        InAEComparisonfunction(node);
        if(node.GetKeywordGt() != null)
        {
            node.GetKeywordGt().Apply(this);
        }
        OutAEComparisonfunction(node);
    }
    public virtual void InAFComparisonfunction(AFComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFComparisonfunction(AFComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFComparisonfunction(AFComparisonfunction node)
    {
        InAFComparisonfunction(node);
        if(node.GetKeywordDne() != null)
        {
            node.GetKeywordDne().Apply(this);
        }
        OutAFComparisonfunction(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPDocument().Apply(this);
        OutStart(node);
    }

    public virtual void InADocument(ADocument node)
    {
        DefaultIn(node);
    }

    public virtual void OutADocument(ADocument node)
    {
        DefaultOut(node);
    }

    public override void CaseADocument(ADocument node)
    {
        InADocument(node);
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetDocumentinside() != null)
        {
            node.GetDocumentinside().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetExpose().Count];
            node.GetExpose().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExpose) temp[i]).Apply(this);
            }
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutADocument(node);
    }
    public virtual void InAExpose(AExpose node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpose(AExpose node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpose(AExpose node)
    {
        InAExpose(node);
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetKeywordExpose() != null)
        {
            node.GetKeywordExpose().Apply(this);
        }
        OutAExpose(node);
    }
    public virtual void InAADocumentinside(AADocumentinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutAADocumentinside(AADocumentinside node)
    {
        DefaultOut(node);
    }

    public override void CaseAADocumentinside(AADocumentinside node)
    {
        InAADocumentinside(node);
        {
            Object[] temp = new Object[node.GetPlanereference().Count];
            node.GetPlanereference().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PPlanereference) temp[i]).Apply(this);
            }
        }
        OutAADocumentinside(node);
    }
    public virtual void InABDocumentinside(ABDocumentinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutABDocumentinside(ABDocumentinside node)
    {
        DefaultOut(node);
    }

    public override void CaseABDocumentinside(ABDocumentinside node)
    {
        InABDocumentinside(node);
        if(node.GetDeclarefirstlist() != null)
        {
            node.GetDeclarefirstlist().Apply(this);
        }
        OutABDocumentinside(node);
    }
    public virtual void InACDocumentinside(ACDocumentinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutACDocumentinside(ACDocumentinside node)
    {
        DefaultOut(node);
    }

    public override void CaseACDocumentinside(ACDocumentinside node)
    {
        InACDocumentinside(node);
        if(node.GetDeclarefirstlist() != null)
        {
            node.GetDeclarefirstlist().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetPlanereference().Count];
            node.GetPlanereference().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PPlanereference) temp[i]).Apply(this);
            }
        }
        OutACDocumentinside(node);
    }
    public virtual void InAPlanereference(APlanereference node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlanereference(APlanereference node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlanereference(APlanereference node)
    {
        InAPlanereference(node);
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetKeywordPlane() != null)
        {
            node.GetKeywordPlane().Apply(this);
        }
        OutAPlanereference(node);
    }
    public virtual void InAADeclarefirstlist(AADeclarefirstlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutAADeclarefirstlist(AADeclarefirstlist node)
    {
        DefaultOut(node);
    }

    public override void CaseAADeclarefirstlist(AADeclarefirstlist node)
    {
        InAADeclarefirstlist(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutAADeclarefirstlist(node);
    }
    public virtual void InABDeclarefirstlist(ABDeclarefirstlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutABDeclarefirstlist(ABDeclarefirstlist node)
    {
        DefaultOut(node);
    }

    public override void CaseABDeclarefirstlist(ABDeclarefirstlist node)
    {
        InABDeclarefirstlist(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetDeclarefirstlist() != null)
        {
            node.GetDeclarefirstlist().Apply(this);
        }
        OutABDeclarefirstlist(node);
    }
    public virtual void InAAAdd(AAAdd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAAdd(AAAdd node)
    {
        DefaultOut(node);
    }

    public override void CaseAAAdd(AAAdd node)
    {
        InAAAdd(node);
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        OutAAAdd(node);
    }
    public virtual void InABAdd(ABAdd node)
    {
        DefaultIn(node);
    }

    public virtual void OutABAdd(ABAdd node)
    {
        DefaultOut(node);
    }

    public override void CaseABAdd(ABAdd node)
    {
        InABAdd(node);
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetOperatorPlus() != null)
        {
            node.GetOperatorPlus().Apply(this);
        }
        if(node.GetAdd() != null)
        {
            node.GetAdd().Apply(this);
        }
        OutABAdd(node);
    }
    public virtual void InACAdd(ACAdd node)
    {
        DefaultIn(node);
    }

    public virtual void OutACAdd(ACAdd node)
    {
        DefaultOut(node);
    }

    public override void CaseACAdd(ACAdd node)
    {
        InACAdd(node);
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetOperatorMinus() != null)
        {
            node.GetOperatorMinus().Apply(this);
        }
        if(node.GetAdd() != null)
        {
            node.GetAdd().Apply(this);
        }
        OutACAdd(node);
    }
    public virtual void InAAArgumentlist(AAArgumentlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAArgumentlist(AAArgumentlist node)
    {
        DefaultOut(node);
    }

    public override void CaseAAArgumentlist(AAArgumentlist node)
    {
        InAAArgumentlist(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAArgumentlist(node);
    }
    public virtual void InABArgumentlist(ABArgumentlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutABArgumentlist(ABArgumentlist node)
    {
        DefaultOut(node);
    }

    public override void CaseABArgumentlist(ABArgumentlist node)
    {
        InABArgumentlist(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOperatorComma() != null)
        {
            node.GetOperatorComma().Apply(this);
        }
        if(node.GetArgumentlist() != null)
        {
            node.GetArgumentlist().Apply(this);
        }
        OutABArgumentlist(node);
    }
    public virtual void InAABlock(AABlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAABlock(AABlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAABlock(AABlock node)
    {
        InAABlock(node);
        if(node.GetBraceblock() != null)
        {
            node.GetBraceblock().Apply(this);
        }
        OutAABlock(node);
    }
    public virtual void InABBlock(ABBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABBlock(ABBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseABBlock(ABBlock node)
    {
        InABBlock(node);
        if(node.GetTabblock() != null)
        {
            node.GetTabblock().Apply(this);
        }
        OutABBlock(node);
    }
    public virtual void InACBlock(ACBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutACBlock(ACBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseACBlock(ACBlock node)
    {
        InACBlock(node);
        if(node.GetBracetabblock() != null)
        {
            node.GetBracetabblock().Apply(this);
        }
        OutACBlock(node);
    }
    public virtual void InABraceblock(ABraceblock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABraceblock(ABraceblock node)
    {
        DefaultOut(node);
    }

    public override void CaseABraceblock(ABraceblock node)
    {
        InABraceblock(node);
        if(node.GetOperatorClosingBrace() != null)
        {
            node.GetOperatorClosingBrace().Apply(this);
        }
        if(node.GetBraceblockinside() != null)
        {
            node.GetBraceblockinside().Apply(this);
        }
        if(node.GetOperatorOpeningBrace() != null)
        {
            node.GetOperatorOpeningBrace().Apply(this);
        }
        OutABraceblock(node);
    }
    public virtual void InABraceblockinside(ABraceblockinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutABraceblockinside(ABraceblockinside node)
    {
        DefaultOut(node);
    }

    public override void CaseABraceblockinside(ABraceblockinside node)
    {
        InABraceblockinside(node);
        if(node.GetPrimary() != null)
        {
            node.GetPrimary().Apply(this);
        }
        OutABraceblockinside(node);
    }
    public virtual void InATabblock(ATabblock node)
    {
        DefaultIn(node);
    }

    public virtual void OutATabblock(ATabblock node)
    {
        DefaultOut(node);
    }

    public override void CaseATabblock(ATabblock node)
    {
        InATabblock(node);
        if(node.GetIndentClose() != null)
        {
            node.GetIndentClose().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetTabblockinside() != null)
        {
            node.GetTabblockinside().Apply(this);
        }
        if(node.GetIndentOpen() != null)
        {
            node.GetIndentOpen().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutATabblock(node);
    }
    public virtual void InAATabblockinside(AATabblockinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutAATabblockinside(AATabblockinside node)
    {
        DefaultOut(node);
    }

    public override void CaseAATabblockinside(AATabblockinside node)
    {
        InAATabblockinside(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAATabblockinside(node);
    }
    public virtual void InABTabblockinside(ABTabblockinside node)
    {
        DefaultIn(node);
    }

    public virtual void OutABTabblockinside(ABTabblockinside node)
    {
        DefaultOut(node);
    }

    public override void CaseABTabblockinside(ABTabblockinside node)
    {
        InABTabblockinside(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetTabblockinside() != null)
        {
            node.GetTabblockinside().Apply(this);
        }
        OutABTabblockinside(node);
    }
    public virtual void InABracetabblock(ABracetabblock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABracetabblock(ABracetabblock node)
    {
        DefaultOut(node);
    }

    public override void CaseABracetabblock(ABracetabblock node)
    {
        InABracetabblock(node);
        if(node.GetOperatorClosingBrace() != null)
        {
            node.GetOperatorClosingBrace().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetTabblock() != null)
        {
            node.GetTabblock().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetOperatorOpeningBrace() != null)
        {
            node.GetOperatorOpeningBrace().Apply(this);
        }
        OutABracetabblock(node);
    }
    public virtual void InABooleanlogic(ABooleanlogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanlogic(ABooleanlogic node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanlogic(ABooleanlogic node)
    {
        InABooleanlogic(node);
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetBooleanfunction() != null)
        {
            node.GetBooleanfunction().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutABooleanlogic(node);
    }
    public virtual void InAABooleanfunction(AABooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAABooleanfunction(AABooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAABooleanfunction(AABooleanfunction node)
    {
        InAABooleanfunction(node);
        if(node.GetKeywordAnd() != null)
        {
            node.GetKeywordAnd().Apply(this);
        }
        OutAABooleanfunction(node);
    }
    public virtual void InABBooleanfunction(ABBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutABBooleanfunction(ABBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseABBooleanfunction(ABBooleanfunction node)
    {
        InABBooleanfunction(node);
        if(node.GetKeywordNand() != null)
        {
            node.GetKeywordNand().Apply(this);
        }
        OutABBooleanfunction(node);
    }
    public virtual void InACBooleanfunction(ACBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutACBooleanfunction(ACBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseACBooleanfunction(ACBooleanfunction node)
    {
        InACBooleanfunction(node);
        if(node.GetKeywordOr() != null)
        {
            node.GetKeywordOr().Apply(this);
        }
        OutACBooleanfunction(node);
    }
    public virtual void InADBooleanfunction(ADBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADBooleanfunction(ADBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADBooleanfunction(ADBooleanfunction node)
    {
        InADBooleanfunction(node);
        if(node.GetKeywordNor() != null)
        {
            node.GetKeywordNor().Apply(this);
        }
        OutADBooleanfunction(node);
    }
    public virtual void InAEBooleanfunction(AEBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEBooleanfunction(AEBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAEBooleanfunction(AEBooleanfunction node)
    {
        InAEBooleanfunction(node);
        if(node.GetKeywordXor() != null)
        {
            node.GetKeywordXor().Apply(this);
        }
        OutAEBooleanfunction(node);
    }
    public virtual void InAFBooleanfunction(AFBooleanfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFBooleanfunction(AFBooleanfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFBooleanfunction(AFBooleanfunction node)
    {
        InAFBooleanfunction(node);
        if(node.GetKeywordXnor() != null)
        {
            node.GetKeywordXnor().Apply(this);
        }
        OutAFBooleanfunction(node);
    }
    public virtual void InACall(ACall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACall(ACall node)
    {
        DefaultOut(node);
    }

    public override void CaseACall(ACall node)
    {
        InACall(node);
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        if(node.GetArgumentlist() != null)
        {
            node.GetArgumentlist().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        OutACall(node);
    }
    public virtual void InADeclareassign(ADeclareassign node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareassign(ADeclareassign node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareassign(ADeclareassign node)
    {
        InADeclareassign(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOperatorAssign() != null)
        {
            node.GetOperatorAssign().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        if(node.GetKeywordDecl() != null)
        {
            node.GetKeywordDecl().Apply(this);
        }
        OutADeclareassign(node);
    }
    public virtual void InADeclareempty(ADeclareempty node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareempty(ADeclareempty node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareempty(ADeclareempty node)
    {
        InADeclareempty(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        if(node.GetKeywordDecl() != null)
        {
            node.GetKeywordDecl().Apply(this);
        }
        OutADeclareempty(node);
    }
    public virtual void InAADeclarefirst(AADeclarefirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutAADeclarefirst(AADeclarefirst node)
    {
        DefaultOut(node);
    }

    public override void CaseAADeclarefirst(AADeclarefirst node)
    {
        InAADeclarefirst(node);
        if(node.GetDeclarefirstnormal() != null)
        {
            node.GetDeclarefirstnormal().Apply(this);
        }
        OutAADeclarefirst(node);
    }
    public virtual void InABDeclarefirst(ABDeclarefirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutABDeclarefirst(ABDeclarefirst node)
    {
        DefaultOut(node);
    }

    public override void CaseABDeclarefirst(ABDeclarefirst node)
    {
        InABDeclarefirst(node);
        if(node.GetFunctiondeclaration() != null)
        {
            node.GetFunctiondeclaration().Apply(this);
        }
        OutABDeclarefirst(node);
    }
    public virtual void InADeclarefirstnormal(ADeclarefirstnormal node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarefirstnormal(ADeclarefirstnormal node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarefirstnormal(ADeclarefirstnormal node)
    {
        InADeclarefirstnormal(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOperatorAssign() != null)
        {
            node.GetOperatorAssign().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetKeywordDeclfirst() != null)
        {
            node.GetKeywordDeclfirst().Apply(this);
        }
        OutADeclarefirstnormal(node);
    }
    public virtual void InAAExpression(AAExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAExpression(AAExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAExpression(AAExpression node)
    {
        InAAExpression(node);
        if(node.GetAdd() != null)
        {
            node.GetAdd().Apply(this);
        }
        OutAAExpression(node);
    }
    public virtual void InABExpression(ABExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABExpression(ABExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABExpression(ABExpression node)
    {
        InABExpression(node);
        if(node.GetBooleanlogic() != null)
        {
            node.GetBooleanlogic().Apply(this);
        }
        OutABExpression(node);
    }
    public virtual void InACExpression(ACExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACExpression(ACExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACExpression(ACExpression node)
    {
        InACExpression(node);
        if(node.GetDeclareassign() != null)
        {
            node.GetDeclareassign().Apply(this);
        }
        OutACExpression(node);
    }
    public virtual void InADExpression(ADExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADExpression(ADExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADExpression(ADExpression node)
    {
        InADExpression(node);
        if(node.GetDeclareempty() != null)
        {
            node.GetDeclareempty().Apply(this);
        }
        OutADExpression(node);
    }
    public virtual void InAEExpression(AEExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEExpression(AEExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAEExpression(AEExpression node)
    {
        InAEExpression(node);
        if(node.GetDeclarefirst() != null)
        {
            node.GetDeclarefirst().Apply(this);
        }
        OutAEExpression(node);
    }
    public virtual void InAFExpression(AFExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFExpression(AFExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFExpression(AFExpression node)
    {
        InAFExpression(node);
        if(node.GetForrange() != null)
        {
            node.GetForrange().Apply(this);
        }
        OutAFExpression(node);
    }
    public virtual void InAGExpression(AGExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGExpression(AGExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGExpression(AGExpression node)
    {
        InAGExpression(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAGExpression(node);
    }
    public virtual void InAHExpression(AHExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHExpression(AHExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAHExpression(AHExpression node)
    {
        InAHExpression(node);
        if(node.GetIfelse() != null)
        {
            node.GetIfelse().Apply(this);
        }
        OutAHExpression(node);
    }
    public virtual void InAIExpression(AIExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIExpression(AIExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIExpression(AIExpression node)
    {
        InAIExpression(node);
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        OutAIExpression(node);
    }
    public virtual void InAExtractmember(AExtractmember node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExtractmember(AExtractmember node)
    {
        DefaultOut(node);
    }

    public override void CaseAExtractmember(AExtractmember node)
    {
        InAExtractmember(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetOperatorExtractMember() != null)
        {
            node.GetOperatorExtractMember().Apply(this);
        }
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        OutAExtractmember(node);
    }
    public virtual void InAForrange(AForrange node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForrange(AForrange node)
    {
        DefaultOut(node);
    }

    public override void CaseAForrange(AForrange node)
    {
        InAForrange(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetKeywordTo() != null)
        {
            node.GetKeywordTo().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetKeywordFrom() != null)
        {
            node.GetKeywordFrom().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetKeywordFor() != null)
        {
            node.GetKeywordFor().Apply(this);
        }
        OutAForrange(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetKeywordFunc() != null)
        {
            node.GetKeywordFunc().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAAType(AAType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAType(AAType node)
    {
        DefaultOut(node);
    }

    public override void CaseAAType(AAType node)
    {
        InAAType(node);
        if(node.GetKeywordDyn() != null)
        {
            node.GetKeywordDyn().Apply(this);
        }
        OutAAType(node);
    }
    public virtual void InABType(ABType node)
    {
        DefaultIn(node);
    }

    public virtual void OutABType(ABType node)
    {
        DefaultOut(node);
    }

    public override void CaseABType(ABType node)
    {
        InABType(node);
        if(node.GetKeywordVoid() != null)
        {
            node.GetKeywordVoid().Apply(this);
        }
        OutABType(node);
    }
    public virtual void InAFunctiondeclaration(AFunctiondeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctiondeclaration(AFunctiondeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctiondeclaration(AFunctiondeclaration node)
    {
        InAFunctiondeclaration(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        if(node.GetParameterlist() != null)
        {
            node.GetParameterlist().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetKeywordFunc() != null)
        {
            node.GetKeywordFunc().Apply(this);
        }
        OutAFunctiondeclaration(node);
    }
    public virtual void InAIfelse(AIfelse node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelse(AIfelse node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelse(AIfelse node)
    {
        InAIfelse(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetElif() != null)
        {
            node.GetElif().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfelse(node);
    }
    public virtual void InAAIfexpr(AAIfexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAIfexpr(AAIfexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAAIfexpr(AAIfexpr node)
    {
        InAAIfexpr(node);
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        OutAAIfexpr(node);
    }
    public virtual void InABIfexpr(ABIfexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutABIfexpr(ABIfexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseABIfexpr(ABIfexpr node)
    {
        InABIfexpr(node);
        if(node.GetTest() != null)
        {
            node.GetTest().Apply(this);
        }
        OutABIfexpr(node);
    }
    public virtual void InAIf(AIf node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIf(AIf node)
    {
        DefaultOut(node);
    }

    public override void CaseAIf(AIf node)
    {
        InAIf(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetIfexpr() != null)
        {
            node.GetIfexpr().Apply(this);
        }
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        OutAIf(node);
    }
    public virtual void InAAElif(AAElif node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAElif(AAElif node)
    {
        DefaultOut(node);
    }

    public override void CaseAAElif(AAElif node)
    {
        InAAElif(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetIfexpr() != null)
        {
            node.GetIfexpr().Apply(this);
        }
        if(node.GetKeywordElif() != null)
        {
            node.GetKeywordElif().Apply(this);
        }
        OutAAElif(node);
    }
    public virtual void InABElif(ABElif node)
    {
        DefaultIn(node);
    }

    public virtual void OutABElif(ABElif node)
    {
        DefaultOut(node);
    }

    public override void CaseABElif(ABElif node)
    {
        InABElif(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetIfexpr() != null)
        {
            node.GetIfexpr().Apply(this);
        }
        if(node.GetKeywordElif() != null)
        {
            node.GetKeywordElif().Apply(this);
        }
        if(node.GetElif() != null)
        {
            node.GetElif().Apply(this);
        }
        OutABElif(node);
    }
    public virtual void InAElse(AElse node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElse(AElse node)
    {
        DefaultOut(node);
    }

    public override void CaseAElse(AElse node)
    {
        InAElse(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetKeywordElse() != null)
        {
            node.GetKeywordElse().Apply(this);
        }
        OutAElse(node);
    }
    public virtual void InAAMult(AAMult node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAMult(AAMult node)
    {
        DefaultOut(node);
    }

    public override void CaseAAMult(AAMult node)
    {
        InAAMult(node);
        if(node.GetSimple() != null)
        {
            node.GetSimple().Apply(this);
        }
        OutAAMult(node);
    }
    public virtual void InABMult(ABMult node)
    {
        DefaultIn(node);
    }

    public virtual void OutABMult(ABMult node)
    {
        DefaultOut(node);
    }

    public override void CaseABMult(ABMult node)
    {
        InABMult(node);
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetOperatorTimes() != null)
        {
            node.GetOperatorTimes().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutABMult(node);
    }
    public virtual void InACMult(ACMult node)
    {
        DefaultIn(node);
    }

    public virtual void OutACMult(ACMult node)
    {
        DefaultOut(node);
    }

    public override void CaseACMult(ACMult node)
    {
        InACMult(node);
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetOperatorDivide() != null)
        {
            node.GetOperatorDivide().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutACMult(node);
    }
    public virtual void InAParameter(AParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameter(AParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameter(AParameter node)
    {
        InAParameter(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAParameter(node);
    }
    public virtual void InAAParameterlist(AAParameterlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAParameterlist(AAParameterlist node)
    {
        DefaultOut(node);
    }

    public override void CaseAAParameterlist(AAParameterlist node)
    {
        InAAParameterlist(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAAParameterlist(node);
    }
    public virtual void InABParameterlist(ABParameterlist node)
    {
        DefaultIn(node);
    }

    public virtual void OutABParameterlist(ABParameterlist node)
    {
        DefaultOut(node);
    }

    public override void CaseABParameterlist(ABParameterlist node)
    {
        InABParameterlist(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetOperatorComma() != null)
        {
            node.GetOperatorComma().Apply(this);
        }
        if(node.GetParameterlist() != null)
        {
            node.GetParameterlist().Apply(this);
        }
        OutABParameterlist(node);
    }
    public virtual void InAParenthetical(AParenthetical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthetical(AParenthetical node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthetical(AParenthetical node)
    {
        InAParenthetical(node);
        if(node.GetOperatorClosingParenthesis() != null)
        {
            node.GetOperatorClosingParenthesis().Apply(this);
        }
        if(node.GetNewline() != null)
        {
            node.GetNewline().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOperatorOpeningParenthesis() != null)
        {
            node.GetOperatorOpeningParenthesis().Apply(this);
        }
        OutAParenthetical(node);
    }
    public virtual void InAAPrimary(AAPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAPrimary(AAPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseAAPrimary(AAPrimary node)
    {
        InAAPrimary(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAAPrimary(node);
    }
    public virtual void InABPrimary(ABPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutABPrimary(ABPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseABPrimary(ABPrimary node)
    {
        InABPrimary(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutABPrimary(node);
    }
    public virtual void InACPrimary(ACPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutACPrimary(ACPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseACPrimary(ACPrimary node)
    {
        InACPrimary(node);
        if(node.GetRational() != null)
        {
            node.GetRational().Apply(this);
        }
        OutACPrimary(node);
    }
    public virtual void InADPrimary(ADPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutADPrimary(ADPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseADPrimary(ADPrimary node)
    {
        InADPrimary(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutADPrimary(node);
    }
    public virtual void InAEPrimary(AEPrimary node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEPrimary(AEPrimary node)
    {
        DefaultOut(node);
    }

    public override void CaseAEPrimary(AEPrimary node)
    {
        InAEPrimary(node);
        if(node.GetParenthetical() != null)
        {
            node.GetParenthetical().Apply(this);
        }
        OutAEPrimary(node);
    }
    public virtual void InAASimple(AASimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutAASimple(AASimple node)
    {
        DefaultOut(node);
    }

    public override void CaseAASimple(AASimple node)
    {
        InAASimple(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAASimple(node);
    }
    public virtual void InABSimple(ABSimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutABSimple(ABSimple node)
    {
        DefaultOut(node);
    }

    public override void CaseABSimple(ABSimple node)
    {
        InABSimple(node);
        if(node.GetCall() != null)
        {
            node.GetCall().Apply(this);
        }
        OutABSimple(node);
    }
    public virtual void InACSimple(ACSimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutACSimple(ACSimple node)
    {
        DefaultOut(node);
    }

    public override void CaseACSimple(ACSimple node)
    {
        InACSimple(node);
        if(node.GetExtractmember() != null)
        {
            node.GetExtractmember().Apply(this);
        }
        OutACSimple(node);
    }
    public virtual void InADSimple(ADSimple node)
    {
        DefaultIn(node);
    }

    public virtual void OutADSimple(ADSimple node)
    {
        DefaultOut(node);
    }

    public override void CaseADSimple(ADSimple node)
    {
        InADSimple(node);
        if(node.GetPrimary() != null)
        {
            node.GetPrimary().Apply(this);
        }
        OutADSimple(node);
    }
    public virtual void InATest(ATest node)
    {
        DefaultIn(node);
    }

    public virtual void OutATest(ATest node)
    {
        DefaultOut(node);
    }

    public override void CaseATest(ATest node)
    {
        InATest(node);
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetComparisonfunction() != null)
        {
            node.GetComparisonfunction().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutATest(node);
    }
    public virtual void InAAComparisonfunction(AAComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAComparisonfunction(AAComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAAComparisonfunction(AAComparisonfunction node)
    {
        InAAComparisonfunction(node);
        if(node.GetKeywordLt() != null)
        {
            node.GetKeywordLt().Apply(this);
        }
        OutAAComparisonfunction(node);
    }
    public virtual void InABComparisonfunction(ABComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutABComparisonfunction(ABComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseABComparisonfunction(ABComparisonfunction node)
    {
        InABComparisonfunction(node);
        if(node.GetKeywordLte() != null)
        {
            node.GetKeywordLte().Apply(this);
        }
        OutABComparisonfunction(node);
    }
    public virtual void InACComparisonfunction(ACComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutACComparisonfunction(ACComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseACComparisonfunction(ACComparisonfunction node)
    {
        InACComparisonfunction(node);
        if(node.GetKeywordEql() != null)
        {
            node.GetKeywordEql().Apply(this);
        }
        OutACComparisonfunction(node);
    }
    public virtual void InADComparisonfunction(ADComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADComparisonfunction(ADComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADComparisonfunction(ADComparisonfunction node)
    {
        InADComparisonfunction(node);
        if(node.GetKeywordGte() != null)
        {
            node.GetKeywordGte().Apply(this);
        }
        OutADComparisonfunction(node);
    }
    public virtual void InAEComparisonfunction(AEComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEComparisonfunction(AEComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAEComparisonfunction(AEComparisonfunction node)
    {
        InAEComparisonfunction(node);
        if(node.GetKeywordGt() != null)
        {
            node.GetKeywordGt().Apply(this);
        }
        OutAEComparisonfunction(node);
    }
    public virtual void InAFComparisonfunction(AFComparisonfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFComparisonfunction(AFComparisonfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFComparisonfunction(AFComparisonfunction node)
    {
        InAFComparisonfunction(node);
        if(node.GetKeywordDne() != null)
        {
            node.GetKeywordDne().Apply(this);
        }
        OutAFComparisonfunction(node);
    }
}
} // namespace Dextr.Sablecc.analysis
